<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>阿里云CentOS7安装Hive</title>
      <link href="/2020/06/08/%E9%98%BF%E9%87%8C%E4%BA%91CentOS7%E5%AE%89%E8%A3%85Hive%20/"/>
      <url>/2020/06/08/%E9%98%BF%E9%87%8C%E4%BA%91CentOS7%E5%AE%89%E8%A3%85Hive%20/</url>
      
        <content type="html"><![CDATA[<h2 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h2><p>Hive是建立在Hadoop上的数据仓库基础架构，提供了一系列的工具可以用来进行数据提取转化加载（ETL），定义了简单的类SQL查询语言QL。<br>Hive是SQL解析引擎，用于将SQL语句转译成M/R Job然后在Hadoop执行。<br>Hive将元数据存储在数据库中(metastore)，目前只支持mysql，derby，元数据包括表的名字，表的列和分区及其属性，表的数据所在目录等。<br>Hive数据存储在HDFS中，大部分的查询由MapReduce完成。</p><p><img src="/images/20-database/05-hive.png"></p><h2 id="Hadoop3伪分布式集群安装"><a href="#Hadoop3伪分布式集群安装" class="headerlink" title="Hadoop3伪分布式集群安装"></a>Hadoop3伪分布式集群安装</h2><p>1、安装JDK，并配置环境变量</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=<span class="regexp">/usr/java</span><span class="regexp">/jdk1.8.0_151</span></span><br><span class="line"><span class="regexp">export CLASSPATH=.:$JAVA_HOME/jre</span><span class="regexp">/lib/rt</span>.<span class="symbol">jar:</span>$JAVA_HOME/<span class="class"><span class="keyword">lib</span>/<span class="title">dt</span>.<span class="title">jar</span>:$<span class="title">JAVA_HOME</span>/<span class="title">lib</span>/<span class="title">tools</span>.<span class="title">jar</span></span></span><br><span class="line">export PATH=$JAVA_HOME/<span class="symbol">bin:</span>$PATH</span><br></pre></td></tr></table></figure><p>2、免密码ssh设置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~<span class="regexp">/.ssh/</span> <span class="comment"># 若没有该目录，请先执行一次ssh localhost</span></span><br><span class="line">ssh-keygen -t rsa <span class="comment"># 会有提示，都按回车就可以</span></span><br><span class="line">cat .<span class="regexp">/id_rsa.pub &gt;&gt; ./</span>authorized_keys <span class="comment"># 加入授权</span></span><br></pre></td></tr></table></figure><p>3、修改配置</p><ul><li>修改hadoop-env.sh文件，增加环境变量信息<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/data/soft/jdk1.8</span><br></pre></td></tr></table></figure></li><li>修改core-site.xml文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定HADOOP所使用的文件系统schema（URI），HDFS的老大（NameNode）的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop100:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定hadoop运行时产生文件的存储目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/hadoop_repo<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>修改hdfs-site.xml文件，把hdfs中文件副本的数量设置为1<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果是通过公网IP访问阿里云上内网搭建的集群 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.use.datanode.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>only cofig in clients<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>修改mapred-site.xml，设置mapreduce使用的资源调度框架<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定mr运行在yarn上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>修改yarn-site.xml，设置yarn上支持运行的服务和环境白名单<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CL</span><br><span class="line">ASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>4、格式化namenode</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs namenode -format</span><br><span class="line"><span class="comment"># 如果在后面的日志信息中能看到这一行，则说明namenode 格式化成功。</span></span><br><span class="line">common.Storage: Storage directory <span class="regexp">/data/</span>hadoop_repo<span class="regexp">/dfs/</span>name has been successfully</span><br><span class="line">formatted.</span><br></pre></td></tr></table></figure><p>5、修改start-dfs.sh，stop-dfs.sh这两个脚本文件，增加如下内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">HDFS_DATANODE_USER</span>=root</span><br><span class="line"><span class="attr">HDFS_DATANODE_SECURE_USER</span>=hdfs</span><br><span class="line"><span class="attr">HDFS_NAMENODE_USER</span>=root</span><br><span class="line"><span class="attr">HDFS_SECONDARYNAMENODE_USER</span>=root</span><br></pre></td></tr></table></figure><p>start-dfs.sh分别用来启动dfs即启动Hadoop文件系统。<br>6、修改start-yarn.sh，stop-yarn.sh 这两个脚本文件，在文件前面增加如下内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">YARN_RESOURCEMANAGER_USER</span>=root</span><br><span class="line"><span class="attr">HADOOP_SECURE_DN_USER</span>=yarn</span><br><span class="line"><span class="attr">YARN_NODEMANAGER_USER</span>=root</span><br></pre></td></tr></table></figure><p>start-yarn.sh启动yarn脚本，执行此命令将启动yarn守护进程。<br>7、启动集群</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">./start-all.sh</span><br><span class="line"></span><br><span class="line">运行jps，出现如下<span class="number">6</span>个进程，则成功</span><br><span class="line"><span class="number">2882</span> ResourceManager</span><br><span class="line"><span class="number">2420</span> DataNode</span><br><span class="line"><span class="number">3365</span> Jps</span><br><span class="line"><span class="number">2619</span> SecondaryNameNode</span><br><span class="line"><span class="number">2315</span> NameNode</span><br><span class="line"><span class="number">2988</span> NodeManager</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：<br>1、查看及修改主机名</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hostname</span><br><span class="line"></span><br><span class="line">vim /etc/sysconfig/network</span><br><span class="line"><span class="attribute">NETWORKING</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attribute">HOSTNAME</span>=hadoop100</span><br></pre></td></tr></table></figure><p>2、hosts映射文件</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 阿里云公网IP需要替换为内网IP</span><br><span class="line">vim /etc/hosts</span><br><span class="line"><span class="number">192.168.111.100</span> hadoop100</span><br></pre></td></tr></table></figure><h2 id="Hive安装"><a href="#Hive安装" class="headerlink" title="Hive安装"></a>Hive安装</h2><p>内嵌模式：<br>–元数据保存在内嵌的derby数据库中，只允许一个会话链接，尝试多个会话链接时会报错<br>本地模式：<br>–本地安装模式其实就是把mysql和hive安装在一台机器上而已(这就是本地模式)<br>（本地安装mysql 替代derby存储元数据,使用mysql进行hive的元数据信息管理）<br>远程模式：<br>–远程模式的意思就是mysql的安装和hive的安装没有在同一台机器上，和本地模式最大的区别就是在hive-site.xml中，我们需要修改下mysql的ip地址和端口号。但是我们需要注意以下两个问题:<br>–hive-site.xml中的mysql安装主机的ip地址和端口号.<br>–访问mysql的用户名的访问权限需要进行设置<br>–多用于实际的生产运行环境<br>1、下载文件并解压，下载mysql驱动包并放置到hive文件夹lib目录</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tar</span> -zxvf apache-hive-<span class="number">2</span>.<span class="number">3</span>.<span class="number">3</span>-bin.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="attribute">mv</span> mysql-connector-java-<span class="number">5</span>.<span class="number">1</span>.<span class="number">6</span>.jar /usr/local/src/hive</span><br></pre></td></tr></table></figure><p>2、修改hive-site.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">cp hive-default.xml.template hive-site.xml 删除多余配置替换为如下</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://47.100.139.162:3306/hive?createDatabaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定驱动类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 指定用户名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>ant2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定密码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Bnm,./321<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.schema.verification<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、配置环境变量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HIVE_HOME</span>=/usr/local/hive</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$HIVE_HOME/bin</span><br></pre></td></tr></table></figure><p>4、验证Hive安装</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hive&gt;<span class="keyword">create</span> <span class="keyword">table</span> test1(tid <span class="type">int</span>,tname string);</span><br><span class="line"></span><br><span class="line">hive&gt; <span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line">OK</span><br><span class="line">test1</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">28.297</span> seconds, Fetched: <span class="number">1</span> <span class="keyword">row</span>(s)</span><br></pre></td></tr></table></figure><p>5、错误提示<br>问题1：hive环境搭建提示: java.lang.NoSuchMethodError: com.google.common.base.Preconditions.checkArgument<br>解决1：查看hadoop安装目录下share/hadoop/common/lib内guava.jar版本，查看hive安装目录下lib内guava.jar的版本，如果两者不一致，删除版本低的，并拷贝高版本的 问题解决！<br>问题2：Please use schematool (e.g. ./schematool -initSchema -dbType …) to create the schema.<br>解决2：bin目录下./schematool -initSchema -dbType初始化元数据库</p>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pandas速查手册中文版</title>
      <link href="/2020/06/03/Pandas%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C%E4%B8%AD%E6%96%87%E7%89%88/"/>
      <url>/2020/06/03/Pandas%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C%E4%B8%AD%E6%96%87%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>十分钟入门Pandas：10 Minutes to pandas—<a href="https://pandas.pydata.org/pandas-docs/stable/getting_started/10min.html">点击跳转</a><br>关键缩写和包导入<br>在这个速查手册中，我们使用如下缩写：</p><p>df：任意的Pandas DataFrame对象<br>s：任意的Pandas Series对象<br>同时我们需要做如下的引入：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pd.read<span class="constructor">_csv(<span class="params">filename</span>)</span>：从CSV文件导入数据</span><br><span class="line">pd.read<span class="constructor">_table(<span class="params">filename</span>)</span>：从限定分隔符的文本文件导入数据</span><br><span class="line">pd.read<span class="constructor">_excel(<span class="params">filename</span>)</span>：从Excel文件导入数据</span><br><span class="line">pd.read<span class="constructor">_sql(<span class="params">query</span>, <span class="params">connection_object</span>)</span>：从SQL表/库导入数据</span><br><span class="line">pd.read<span class="constructor">_json(<span class="params">json_string</span>)</span>：从JSON格式的字符串导入数据</span><br><span class="line">pd.read<span class="constructor">_html(<span class="params">url</span>)</span>：解析URL、字符串或者HTML文件，抽取其中的tables表格</span><br><span class="line">pd.read<span class="constructor">_clipboard()</span>：从你的粘贴板获取内容，并传给read<span class="constructor">_table()</span></span><br><span class="line">pd.<span class="constructor">DataFrame(<span class="params">dict</span>)</span>：从字典对象导入数据，Key是列名，Value是数据</span><br></pre></td></tr></table></figure><h2 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df.<span class="keyword">to</span><span class="constructor">_csv(<span class="params">filename</span>)</span>：导出数据到CSV文件</span><br><span class="line">df.<span class="keyword">to</span><span class="constructor">_excel(<span class="params">filename</span>)</span>：导出数据到Excel文件</span><br><span class="line">df.<span class="keyword">to</span><span class="constructor">_sql(<span class="params">table_name</span>, <span class="params">connection_object</span>)</span>：导出数据到SQL表</span><br><span class="line">df.<span class="keyword">to</span><span class="constructor">_json(<span class="params">filename</span>)</span>：以Json格式导出数据到文本文件</span><br></pre></td></tr></table></figure><h2 id="创建测试对象"><a href="#创建测试对象" class="headerlink" title="创建测试对象"></a>创建测试对象</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pd.<span class="constructor">DataFrame(<span class="params">np</span>.<span class="params">random</span>.<span class="params">rand</span>(20,5)</span>)：创建<span class="number">20</span>行<span class="number">5</span>列的随机数组成的DataFrame对象</span><br><span class="line">pd.<span class="constructor">Series(<span class="params">my_list</span>)</span>：从可迭代对象my_list创建一个Series对象</span><br><span class="line">df.index = pd.date<span class="constructor">_range(&#x27;1900<span class="operator">/</span>1<span class="operator">/</span>30&#x27;, <span class="params">periods</span>=<span class="params">df</span>.<span class="params">shape</span>[0])</span>：增加一个日期索引</span><br></pre></td></tr></table></figure><h2 id="查看、检查数据"><a href="#查看、检查数据" class="headerlink" title="查看、检查数据"></a>查看、检查数据</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">df</span><span class="selector-class">.head</span>(n)：查看<span class="selector-tag">DataFrame</span>对象的前<span class="selector-tag">n</span>行</span><br><span class="line"><span class="selector-tag">df</span><span class="selector-class">.tail</span>(n)：查看<span class="selector-tag">DataFrame</span>对象的最后<span class="selector-tag">n</span>行</span><br><span class="line"><span class="selector-tag">df</span><span class="selector-class">.shape</span>()：查看行数和列数</span><br><span class="line"><span class="selector-tag">df</span><span class="selector-class">.info</span>()：查看索引、数据类型和内存信息</span><br><span class="line"><span class="selector-tag">df</span><span class="selector-class">.describe</span>()：查看数值型列的汇总统计</span><br><span class="line"><span class="selector-tag">s</span><span class="selector-class">.value_counts</span>(dropna=False)：查看<span class="selector-tag">Series</span>对象的唯一值和计数</span><br><span class="line"><span class="selector-tag">df</span><span class="selector-class">.apply</span>(pd.Series.value_counts)：查看<span class="selector-tag">DataFrame</span>对象中每一列的唯一值和计数</span><br></pre></td></tr></table></figure><h2 id="数据选取"><a href="#数据选取" class="headerlink" title="数据选取"></a>数据选取</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">df</span><span class="selector-attr">[col]</span>：根据列名，并以<span class="selector-tag">Series</span>的形式返回列</span><br><span class="line"><span class="selector-tag">df</span><span class="selector-attr">[[col1, col2]</span>]：以<span class="selector-tag">DataFrame</span>形式返回多列</span><br><span class="line"><span class="selector-tag">s</span><span class="selector-class">.iloc</span><span class="selector-attr">[0]</span>：按位置选取数据</span><br><span class="line"><span class="selector-tag">s</span><span class="selector-class">.loc</span><span class="selector-attr">[<span class="string">&#x27;index_one&#x27;</span>]</span>：按索引选取数据</span><br><span class="line"><span class="selector-tag">df</span><span class="selector-class">.iloc</span><span class="selector-attr">[0,:]</span>：返回第一行</span><br><span class="line"><span class="selector-tag">df</span><span class="selector-class">.iloc</span><span class="selector-attr">[0,0]</span>：返回第一列的第一个元素</span><br></pre></td></tr></table></figure><h2 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">df.<span class="keyword">columns</span> = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]：重命名列名</span><br><span class="line">pd.<span class="keyword">isnull</span>()：检查DataFrame对象中的空值，并返回一个<span class="type">Boolean</span>数组</span><br><span class="line">pd.<span class="keyword">notnull</span>()：检查DataFrame对象中的非空值，并返回一个<span class="type">Boolean</span>数组</span><br><span class="line">df.dropna()：删除所有包含空值的行</span><br><span class="line">df.dropna(axis=<span class="number">1</span>)：删除所有包含空值的列</span><br><span class="line">df.dropna(axis=<span class="number">1</span>,thresh=n)：删除所有小于n个非空值的列</span><br><span class="line">df.fillna(x)：用x替换DataFrame对象中所有的空值</span><br><span class="line">s.astype(<span class="type">float</span>)：将Series中的数据类型更改为<span class="type">float</span>类型</span><br><span class="line">s.replace(<span class="number">1</span>,<span class="string">&#x27;one&#x27;</span>)：用‘one’代替所有等于<span class="number">1</span>的值</span><br><span class="line">s.replace([<span class="number">1</span>,<span class="number">3</span>],[<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;three&#x27;</span>])：用<span class="string">&#x27;one&#x27;</span>代替<span class="number">1</span>，用<span class="string">&#x27;three&#x27;</span>代替<span class="number">3</span></span><br><span class="line">df.<span class="keyword">rename</span>(<span class="keyword">columns</span>=lambda x: x + <span class="number">1</span>)：批量更改列名</span><br><span class="line">df.<span class="keyword">rename</span>(<span class="keyword">columns</span>=&#123;<span class="string">&#x27;old_name&#x27;</span>: <span class="string">&#x27;new_ name&#x27;</span>&#125;)：选择性更改列名</span><br><span class="line">df.set_index(<span class="string">&#x27;column_one&#x27;</span>)：更改索引列</span><br><span class="line">df.<span class="keyword">rename</span>(<span class="keyword">index</span>=lambda x: x + <span class="number">1</span>)：批量重命名索引</span><br></pre></td></tr></table></figure><h2 id="数据处理：Filter、Sort和GroupBy"><a href="#数据处理：Filter、Sort和GroupBy" class="headerlink" title="数据处理：Filter、Sort和GroupBy"></a>数据处理：Filter、Sort和GroupBy</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">df</span>[df[col] &gt; <span class="number">0</span>.<span class="number">5</span>]：选择col列的值大于<span class="number">0</span>.<span class="number">5</span>的行</span><br><span class="line"><span class="attribute">df</span>.sort_values(col<span class="number">1</span>)：按照列col<span class="number">1</span>排序数据，默认升序排列</span><br><span class="line"><span class="attribute">df</span>.sort_values(col<span class="number">1</span>, ascending=False)：按照列col降序排列数据</span><br><span class="line"><span class="attribute">df</span>.sort_values([col<span class="number">1</span>,col<span class="number">2</span>], ascending=[True,False])：先按列col<span class="number">1</span>升序排列，后按col<span class="number">2</span>降序排列数据</span><br><span class="line"><span class="attribute">df</span>.groupby(col)：返回一个按列col进行分组的Groupby对象</span><br><span class="line"><span class="attribute">df</span>.groupby([col<span class="number">1</span>,col<span class="number">2</span>])：返回一个按多列进行分组的Groupby对象</span><br><span class="line"><span class="attribute">df</span>.groupby(col<span class="number">1</span>)[col<span class="number">2</span>].mean()：返回按列col<span class="number">1</span>进行分组后，列col<span class="number">2</span>的均值</span><br><span class="line"><span class="attribute">df</span>.pivot_table(index=col<span class="number">1</span>, values=[col<span class="number">2</span>,col<span class="number">3</span>], aggfunc=max)：创建一个按列col<span class="number">1</span>进行分组，并计算col<span class="number">2</span>和col<span class="number">3</span>的最大值的数据透视表</span><br><span class="line"><span class="attribute">df</span>.groupby(col<span class="number">1</span>).agg(np.mean)：返回按列col<span class="number">1</span>分组的所有列的均值</span><br><span class="line"><span class="attribute">data</span>.apply(np.mean)：对DataFrame中的每一列应用函数np.mean</span><br><span class="line"><span class="attribute">data</span>.apply(np.max,axis=<span class="number">1</span>)：对DataFrame中的每一行应用函数np.max</span><br></pre></td></tr></table></figure><h2 id="数据合并"><a href="#数据合并" class="headerlink" title="数据合并"></a>数据合并</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pd</span>.merge(df<span class="number">1</span>,df<span class="number">2</span>) 默认参数how是inner内连接，并且会按照相同的字段key进行合并</span><br><span class="line"><span class="attribute">df1</span>.append(df<span class="number">2</span>)：将df<span class="number">2</span>中的行添加到df<span class="number">1</span>的尾部</span><br><span class="line"><span class="attribute">pd</span>.concat([df<span class="number">1</span>, df<span class="number">2</span>],axis=<span class="number">1</span>)：将df<span class="number">2</span>中的列添加到df<span class="number">1</span>的尾部</span><br><span class="line"><span class="attribute">df1</span>.join(df<span class="number">2</span>,<span class="literal">on</span>=col<span class="number">1</span>,how=&#x27;inner&#x27;)：对df<span class="number">1</span>的列和df<span class="number">2</span>的列执行SQL形式的join</span><br></pre></td></tr></table></figure><h2 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">df</span><span class="selector-class">.describe</span>()：查看数据值列的汇总统计</span><br><span class="line"><span class="selector-tag">df</span><span class="selector-class">.mean</span>()：返回所有列的均值</span><br><span class="line"><span class="selector-tag">df</span><span class="selector-class">.corr</span>()：返回列与列之间的相关系数</span><br><span class="line"><span class="selector-tag">df</span><span class="selector-class">.count</span>()：返回每一列中的非空值的个数</span><br><span class="line"><span class="selector-tag">df</span><span class="selector-class">.max</span>()：返回每一列的最大值</span><br><span class="line"><span class="selector-tag">df</span><span class="selector-class">.min</span>()：返回每一列的最小值</span><br><span class="line"><span class="selector-tag">df</span><span class="selector-class">.median</span>()：返回每一列的中位数</span><br><span class="line"><span class="selector-tag">df</span><span class="selector-class">.std</span>()：返回每一列的标准差</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据科学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据可视化Matlabplot</title>
      <link href="/2020/06/03/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96Matlabplot/"/>
      <url>/2020/06/03/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96Matlabplot/</url>
      
        <content type="html"><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>1、创建一个新的画布(figure)。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.figure(num=None, figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True, FigureClass=&lt;class &#x27;matplotlib.figure.Figure&#x27;&gt;, clear=False, **kwargs)</span><br></pre></td></tr></table></figure><p>输入参数：<br>num：整型或者字符串，可选参数，默认：None。<br>            如果不提供该参数，一个新的画布(figure)将被创建而且画布数量将会增加。<br>            如果提供该参数，带有id的画布是已经存在的，激活该画布并返回该画布的引用。<br>            如果这个画布不存在，创建并返回画布实例。<br>            如果num是字符串，窗口标题将被设置为该图的数字。<br>figsize：整型元组，可选参数 ，默认：None。<br>                每英寸的宽度和高度。如果不提供，默认值是figure.figsize。<br>dpi：整型，可选参数，默认：None。每英寸像素点。如果不提供，默认是figure.dpi。<br>facecolor：背景色。如果不提供，默认值：figure.facecolor。<br>edgecolor：边界颜色。如果不提供，默认值：figure.edgecolor。<br>framemon：布尔类型，可选参数，默认值：True。如果是False，禁止绘制画图框。<br>FigureClass：源于matplotlib.figure.Figure的类。（可选）使用自定义图实例。<br>clear：布尔类型，可选参数，默认值：False。如果为True和figure已经存在时，这是清理掉改图。</p><p>2、添加图例与描述信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;X axis&#x27;</span>,fontproperties=)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y axis&#x27;</span>,fontproperties=)</span><br></pre></td></tr></table></figure><p>3、添加刻度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.xticks()</span><br><span class="line">plt.yticks()</span><br><span class="line"></span><br><span class="line">ax.set_xticks([])</span><br><span class="line">ax.set_yticks([])</span><br></pre></td></tr></table></figure><p>4、子图操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fig,axes = plt.subplots(<span class="number">2</span>,<span class="number">3</span>,figsize=(<span class="number">10</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><p>可以展示数据的分布和聚合情况。<br>1、colormap:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cmaps = [(<span class="string">&#x27;Perceptually Uniform Sequential&#x27;</span>, [</span><br><span class="line">            <span class="string">&#x27;viridis&#x27;</span>, <span class="string">&#x27;plasma&#x27;</span>, <span class="string">&#x27;inferno&#x27;</span>, <span class="string">&#x27;magma&#x27;</span>]),</span><br><span class="line">         (<span class="string">&#x27;Sequential&#x27;</span>, [</span><br><span class="line">            <span class="string">&#x27;Greys&#x27;</span>, <span class="string">&#x27;Purples&#x27;</span>, <span class="string">&#x27;Blues&#x27;</span>, <span class="string">&#x27;Greens&#x27;</span>, <span class="string">&#x27;Oranges&#x27;</span>, <span class="string">&#x27;Reds&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;YlOrBr&#x27;</span>, <span class="string">&#x27;YlOrRd&#x27;</span>, <span class="string">&#x27;OrRd&#x27;</span>, <span class="string">&#x27;PuRd&#x27;</span>, <span class="string">&#x27;RdPu&#x27;</span>, <span class="string">&#x27;BuPu&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;GnBu&#x27;</span>, <span class="string">&#x27;PuBu&#x27;</span>, <span class="string">&#x27;YlGnBu&#x27;</span>, <span class="string">&#x27;PuBuGn&#x27;</span>, <span class="string">&#x27;BuGn&#x27;</span>, <span class="string">&#x27;YlGn&#x27;</span>]),</span><br><span class="line">         (<span class="string">&#x27;Sequential (2)&#x27;</span>, [</span><br><span class="line">            <span class="string">&#x27;binary&#x27;</span>, <span class="string">&#x27;gist_yarg&#x27;</span>, <span class="string">&#x27;gist_gray&#x27;</span>, <span class="string">&#x27;gray&#x27;</span>, <span class="string">&#x27;bone&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;spring&#x27;</span>, <span class="string">&#x27;summer&#x27;</span>, <span class="string">&#x27;autumn&#x27;</span>, <span class="string">&#x27;winter&#x27;</span>, <span class="string">&#x27;cool&#x27;</span>, <span class="string">&#x27;Wistia&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;hot&#x27;</span>, <span class="string">&#x27;afmhot&#x27;</span>, <span class="string">&#x27;gist_heat&#x27;</span>, <span class="string">&#x27;copper&#x27;</span>]),</span><br><span class="line">         (<span class="string">&#x27;Diverging&#x27;</span>, [</span><br><span class="line">            <span class="string">&#x27;PiYG&#x27;</span>, <span class="string">&#x27;PRGn&#x27;</span>, <span class="string">&#x27;BrBG&#x27;</span>, <span class="string">&#x27;PuOr&#x27;</span>, <span class="string">&#x27;RdGy&#x27;</span>, <span class="string">&#x27;RdBu&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;RdYlBu&#x27;</span>, <span class="string">&#x27;RdYlGn&#x27;</span>, <span class="string">&#x27;Spectral&#x27;</span>, <span class="string">&#x27;coolwarm&#x27;</span>, <span class="string">&#x27;bwr&#x27;</span>, <span class="string">&#x27;seismic&#x27;</span>]),</span><br><span class="line">         (<span class="string">&#x27;Qualitative&#x27;</span>, [</span><br><span class="line">            <span class="string">&#x27;Pastel1&#x27;</span>, <span class="string">&#x27;Pastel2&#x27;</span>, <span class="string">&#x27;Paired&#x27;</span>, <span class="string">&#x27;Accent&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Dark2&#x27;</span>, <span class="string">&#x27;Set1&#x27;</span>, <span class="string">&#x27;Set2&#x27;</span>, <span class="string">&#x27;Set3&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;tab10&#x27;</span>, <span class="string">&#x27;tab20&#x27;</span>, <span class="string">&#x27;tab20b&#x27;</span>, <span class="string">&#x27;tab20c&#x27;</span>]),</span><br><span class="line">         (<span class="string">&#x27;Miscellaneous&#x27;</span>, [</span><br><span class="line">            <span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;prism&#x27;</span>, <span class="string">&#x27;ocean&#x27;</span>, <span class="string">&#x27;gist_earth&#x27;</span>, <span class="string">&#x27;terrain&#x27;</span>, <span class="string">&#x27;gist_stern&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;gnuplot&#x27;</span>, <span class="string">&#x27;gnuplot2&#x27;</span>, <span class="string">&#x27;CMRmap&#x27;</span>, <span class="string">&#x27;cubehelix&#x27;</span>, <span class="string">&#x27;brg&#x27;</span>, <span class="string">&#x27;hsv&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;gist_rainbow&#x27;</span>, <span class="string">&#x27;rainbow&#x27;</span>, <span class="string">&#x27;jet&#x27;</span>, <span class="string">&#x27;nipy_spectral&#x27;</span>, <span class="string">&#x27;gist_ncar&#x27;</span>])]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、常用参数（示例可查官方文档）：</p><ul><li>x：指定散点图的x轴数据；</li><li>y：指定散点图的y轴数据；</li><li>s：指定散点图点的大小，默认为20，通过传入新的变量，实现气泡图的绘制；</li><li>c：可用于不同类别的颜色，指定散点图点的颜色，默认为蓝色；b-blue c-cyan g-green k-black m-magenta r-red w-white y-yellow</li><li>marker：指定散点图点的形状，默认为圆形；filled_markers = (‘o’, ‘v’, ‘^’, ‘&lt;’, ‘&gt;’, ‘8’, ‘s’, ‘p’, ‘*’, ‘h’, ‘H’, ‘D’, ‘d’, ‘P’, ‘X’)</li><li>cmap：指定色图，只有当c参数是一个浮点型的数组的时候才起作用；</li><li>alpha：设置散点的透明度；</li><li>linewidths：设置散点边界线的宽度；</li><li>edgecolors：设置散点边界线的颜色；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.scatter(x, y, s=<span class="literal">None</span>, c=<span class="literal">None</span>, marker=<span class="literal">None</span>, cmap=<span class="literal">None</span>, norm=<span class="literal">None</span>, vmin=<span class="literal">None</span>, vmax=<span class="literal">None</span>, alpha=<span class="literal">None</span>, linewidths=<span class="literal">None</span>, verts=<span class="literal">None</span>, edgecolors=<span class="literal">None</span>, *, plotnonfinite=<span class="literal">False</span>, data=<span class="literal">None</span>, **kwargs)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">x = np.random.randn(<span class="number">1000</span>)</span><br><span class="line">y = np.random.randn(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(x,y,marker=<span class="string">&#x27;.&#x27;</span>,</span><br><span class="line">            s=np.random.randn(<span class="number">1000</span>)*<span class="number">100</span>,</span><br><span class="line">            cmap=<span class="string">&#x27;Reds&#x27;</span>,</span><br><span class="line">            c=y,</span><br><span class="line">            alpha=<span class="number">0.8</span>)</span><br><span class="line">plt.grid()</span><br></pre></td></tr></table></figure><h2 id="箱型图"><a href="#箱型图" class="headerlink" title="箱型图"></a>箱型图</h2><p>又称为盒式图，纵轴按数值从下到上按顺序排序并画出四分位5个数值的位置就是箱型图。<br>用作显示一组<strong>数据聚散和偏态情况</strong>资料，常用于识别异常值。<br><img src="/images/seaborn/boxplot.png"></p><p>1、五要素</p><ul><li>下边缘（Q1），表示最小值（排除异常值后）；</li><li>下四分位数（Q2），又称“第一四分位数”，等于该样本中所有数值由小到大排列后第25%的数字；即有1/4的数据比它小。</li><li>中位数（Q3），又称“第二四分位数”等于该样本中所有数值由小到大排列后第50%的数字；</li><li>上四分位数（Q4），又称“第三四分位数”等于该样本中所有数值由小到大排列后第75%的数字；</li><li>上边缘（Q5），表述最大值。</li></ul><p>2、数学示例<br>有序序列test=c(1,2,3,4,5,6,7,8)，序列长度n=8</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">代码运行结果</span></span><br><span class="line"><span class="string">count</span>    <span class="number">8.00000</span></span><br><span class="line"><span class="string">mean</span>     <span class="number">4.50000</span></span><br><span class="line"><span class="string">std</span>      <span class="number">2.44949</span></span><br><span class="line"><span class="string">min</span>      <span class="number">1.00000</span></span><br><span class="line"><span class="number">25</span><span class="string">%</span>      <span class="number">2.75000</span></span><br><span class="line"><span class="number">50</span><span class="string">%</span>      <span class="number">4.50000</span></span><br><span class="line"><span class="number">75</span><span class="string">%</span>      <span class="number">6.25000</span></span><br><span class="line"><span class="string">max</span>      <span class="number">8.00000</span></span><br><span class="line"><span class="attr">Name:</span> <span class="string">A,</span> <span class="attr">dtype:</span> <span class="string">float64</span></span><br></pre></td></tr></table></figure><p>n表示项数<br>Q2的位置= (n+1) × 0.25<br>Q3的位置= (n+1) × 0.5<br>Q4的位置= (n+1) × 0.75</p><p>下四分位数:(1+n)/4 = 2.25,假设第2个数到第3个数是均匀分布的，可得<code>2*0.25+3*0.75 = 2.75</code></p><p>3、常识补充</p><ul><li>四分位数差（IQR，interquartile range）Q3-Q1 </li><li>大于上四分位数1.5倍四分位数差的值，或者小于下四分位数1.5倍四分位数差的值，即使最大值区间Q4+1.5IQR,最小值区间Q2-1.5IQR划为异常值（outliers）</li><li>异常值之外，最靠近上边缘和下边缘的两个值处，画横线，作为箱线图的触须。</li><li>极端异常值，即超出四分位数差3倍距离的异常值，用实心点表示；较为温和的异常值，即处于1.5倍-3倍四分位数差之间的异常值，用空心点表示。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.rand(<span class="number">10</span>,<span class="number">5</span>),columns=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>])</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">f = df.boxplot(sym=<span class="string">&#x27;o&#x27;</span>, <span class="comment"># 异常点形状</span></span><br><span class="line">              vert=<span class="literal">False</span>, <span class="comment"># 是否垂直</span></span><br><span class="line">              whis=[<span class="number">5</span>,<span class="number">95</span>], <span class="comment"># IQR默认1.5，外限则为3，也可以强制上下边缘数据5%和95%的位置【5，95】</span></span><br><span class="line">              patch_artist = <span class="literal">True</span>, <span class="comment"># 上下四分位框内是否填充</span></span><br><span class="line">              meanline = <span class="literal">False</span>,showmeans=<span class="literal">True</span>, <span class="comment"># 是否有均值线及其形状</span></span><br><span class="line">              showbox = <span class="literal">True</span>, <span class="comment"># 是否显示箱线</span></span><br><span class="line">              showcaps = <span class="literal">True</span>, <span class="comment"># 是否显示边缘线</span></span><br><span class="line">              showfliers = <span class="literal">True</span>, <span class="comment"># 是否显示异常值</span></span><br><span class="line">              notch = <span class="literal">False</span>, <span class="comment"># 中间箱体是否缺口</span></span><br><span class="line">              return_type = <span class="string">&#x27;dict&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">plt.title(<span class="string">&#x27;boxplot&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h2><p>可以清楚看出各个数据的大小,比较数据之间的差别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">bar_height = <span class="number">0.2</span></span><br><span class="line">name = [<span class="string">&#x27;leo&#x27;</span>,<span class="string">&#x27;bob&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>]</span><br><span class="line">x_value = list(range(len(name)))</span><br><span class="line">x_value_mid = [i+bar_height/<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> x_value]</span><br><span class="line">x_value_back = [i+bar_height <span class="keyword">for</span> i <span class="keyword">in</span> x_value]</span><br><span class="line"></span><br><span class="line">score_a = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>]</span><br><span class="line">score_b = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">fig, [ax1,ax2] = plt.subplots(<span class="number">2</span>,<span class="number">1</span>,figsize=(<span class="number">10</span>,<span class="number">8</span>),facecolor=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">fig.text(<span class="number">0.75</span>, <span class="number">0.45</span>, <span class="string">&#x27;Leo Lin copyright&#x27;</span>,</span><br><span class="line">         fontsize=<span class="number">40</span>, color=<span class="string">&#x27;gray&#x27;</span>,</span><br><span class="line">         ha=<span class="string">&#x27;right&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>, alpha=<span class="number">0.4</span>)</span><br><span class="line"></span><br><span class="line">ax1.barh(x_value,score_a,height=bar_height,color=<span class="string">&#x27;orange&#x27;</span>,label=<span class="string">&quot;a&quot;</span>)</span><br><span class="line">ax1.barh(x_value_back,score_b,height=bar_height,color=<span class="string">&#x27;blue&#x27;</span>,label=<span class="string">&quot;b&quot;</span>)</span><br><span class="line">ax1.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x轴刻度标签名称</span></span><br><span class="line">ax1.set_yticks(x_value_mid)</span><br><span class="line">ax1.set_yticklabels(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 作y=sin(x)函数</span></span><br><span class="line">x1 = np.linspace(<span class="number">0</span>, <span class="number">4</span> * np.pi, <span class="number">100</span>)</span><br><span class="line">y1 = np.sin(x1)</span><br><span class="line">ax2.plot(x1,y1,linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># wspace用于控制宽度和高度的百分比</span></span><br><span class="line">plt.subplots_adjust(wspace=<span class="number">0</span>,hspace=<span class="number">0</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据科学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次运维SQL笔试题</title>
      <link href="/2020/06/01/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%90%E7%BB%B4SQL%E7%AC%94%E8%AF%95%E9%A2%98/"/>
      <url>/2020/06/01/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%90%E7%BB%B4SQL%E7%AC%94%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="创建一个学生表，包含课程、学号、分数"><a href="#创建一个学生表，包含课程、学号、分数" class="headerlink" title="创建一个学生表，包含课程、学号、分数"></a>创建一个学生表，包含课程、学号、分数</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `student` (</span><br><span class="line">  `id` int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `num` int(11) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  `course` varchar(255)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  `score` int(11)<span class="built_in"> DEFAULT </span><span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) <span class="attribute">ENGINE</span>=InnoDB<span class="built_in"> DEFAULT </span><span class="attribute">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h2 id="把001号学生的数学课成绩改为90"><a href="#把001号学生的数学课成绩改为90" class="headerlink" title="把001号学生的数学课成绩改为90"></a>把001号学生的数学课成绩改为90</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> student </span><br><span class="line"><span class="keyword">SET</span> score = <span class="number">90</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="keyword">num</span> = <span class="number">001</span> </span><br><span class="line"><span class="keyword">AND</span> course_name = <span class="string">&quot;语文&quot;</span></span><br></pre></td></tr></table></figure><h2 id="查询语文成绩在70-90间的记录"><a href="#查询语文成绩在70-90间的记录" class="headerlink" title="查询语文成绩在70-90间的记录"></a>查询语文成绩在70-90间的记录</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">* </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">student </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">course_name = <span class="string">&quot;语文&quot;</span> </span><br><span class="line"><span class="keyword">AND</span> score <span class="keyword">BETWEEN</span> <span class="number">70</span></span><br><span class="line"><span class="keyword">AND</span> <span class="number">90</span>;</span><br></pre></td></tr></table></figure><h2 id="计算001号学生的成绩总和"><a href="#计算001号学生的成绩总和" class="headerlink" title="计算001号学生的成绩总和"></a>计算001号学生的成绩总和</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">SUM</span>( score ) <span class="keyword">AS</span> total </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">student </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="keyword">num</span> = <span class="number">001</span>;</span><br></pre></td></tr></table></figure><h2 id="计算所有学生的平均成绩"><a href="#计算所有学生的平均成绩" class="headerlink" title="计算所有学生的平均成绩"></a>计算所有学生的平均成绩</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">num</span>,</span><br><span class="line"><span class="keyword">AVG</span>( score ) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">student </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"><span class="keyword">num</span>;</span><br></pre></td></tr></table></figure><h2 id="所有学生的语文成绩都加10分"><a href="#所有学生的语文成绩都加10分" class="headerlink" title="所有学生的语文成绩都加10分"></a>所有学生的语文成绩都加10分</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> student </span><br><span class="line"><span class="keyword">SET</span> score = score + <span class="number">10</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">course_name = <span class="string">&quot;语文&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="centos开启9890端口"><a href="#centos开启9890端口" class="headerlink" title="centos开启9890端口"></a>centos开启9890端口</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-<span class="keyword">cmd</span><span class="bash"> --add-port=9890/tcp</span></span><br></pre></td></tr></table></figure><h2 id="收集的笔试题"><a href="#收集的笔试题" class="headerlink" title="收集的笔试题"></a>收集的笔试题</h2><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><p>如下两张表name_t 和 age_t</p><table><thead><tr><th>ID</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>Nick</td></tr><tr><td>2</td><td>Tom</td></tr><tr><td>3</td><td>John</td></tr><tr><td>4</td><td>Peter</td></tr><tr><td>5</td><td>Frank</td></tr></tbody></table><table><thead><tr><th>ID</th><th>Age</th></tr></thead><tbody><tr><td>1</td><td>18</td></tr><tr><td>2</td><td>null</td></tr><tr><td>3</td><td>35</td></tr><tr><td>5</td><td>22</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">count</span>(t1.ID) <span class="keyword">as</span> cnt</span><br><span class="line"> <span class="keyword">FROM</span> </span><br><span class="line">    name_t t1 </span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> </span><br><span class="line">    age_t t2</span><br><span class="line"> <span class="keyword">ON</span> </span><br><span class="line">    t1.ID = t2.ID</span><br><span class="line"> <span class="keyword">WHERE</span> </span><br><span class="line">    t2.Age &gt; <span class="number">22</span> </span><br></pre></td></tr></table></figure><p>分析：忽略WHERE得出<br>ID    Name ID    Age<br>1   Nick 1 18<br>2    Tom  2 null<br>3    John 3 35<br>4    Peter null null<br>5   Frank 5 22<br>继续可得：<br>ID  Name  ID  Age<br>3   John  3   35</p><p>结合表信息，写出SQL的最终结果: 1</p><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><p>请写SQL语句：<br>想要了解班级内同学的考试情况，现有一张成绩表表名为A，每行都包含以下内容（已知表中没有重复内容，但所有的考试结果都录入在了同一张表中，一个同学会有多条考试结果）：<br>student_id，course_name，score<br>现在需要知道：</p><ol><li>每门课程得到成绩的同学人数<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">course_name,</span><br><span class="line"><span class="keyword">COUNT</span>( score ) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">student </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">course_name</span><br></pre></td></tr></table></figure></li><li>每门课程的平均成绩<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">course_name,</span><br><span class="line"><span class="keyword">AVG</span>( score ) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">student </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">course_name</span><br></pre></td></tr></table></figure></li><li>如果对于每门课程来说，60分以下为不及格，高于60为及格，统计每门课程及格和不及格的人数<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">course_name,</span><br><span class="line"><span class="keyword">sum</span>( <span class="keyword">CASE</span> <span class="keyword">WHEN</span> score &gt; <span class="number">60</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">as</span> <span class="string">&#x27;pass&#x27;</span>,</span><br><span class="line"><span class="keyword">sum</span>( <span class="keyword">CASE</span> <span class="keyword">WHEN</span> score &lt; <span class="number">60</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span> ) <span class="keyword">as</span> <span class="string">&#x27;fail&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">course_name;</span><br></pre></td></tr></table></figure></li><li>方案二<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">course_name,</span><br><span class="line"><span class="keyword">count</span>( <span class="keyword">CASE</span> <span class="keyword">WHEN</span> score &lt; <span class="number">60</span> <span class="keyword">THEN</span> <span class="keyword">num</span> <span class="keyword">END</span> ) <span class="keyword">AS</span> notpassNum,</span><br><span class="line"><span class="keyword">count</span>( <span class="keyword">CASE</span> <span class="keyword">WHEN</span> score &gt;= <span class="number">60</span> <span class="keyword">THEN</span> <span class="keyword">num</span> <span class="keyword">END</span> ) <span class="keyword">AS</span> passNum </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">student </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">course_name</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>win10查看端口占用、进程PID</title>
      <link href="/2020/06/01/win10%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E3%80%81%E8%BF%9B%E7%A8%8BPID/"/>
      <url>/2020/06/01/win10%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E3%80%81%E8%BF%9B%E7%A8%8BPID/</url>
      
        <content type="html"><![CDATA[<h2 id="查看端口占用"><a href="#查看端口占用" class="headerlink" title="查看端口占用"></a>查看端口占用</h2><p>1、查看所有的端口和对应的PID（正常情况下，没必要看所有的端口）</p><p>命令：</p><p>netstat -ano<br><img src="/images/16-LinuxOther/2-wnetstat.png"></p><p>2、查看具体的端口占用和对应的进程pid</p><p>比如查看80端口的占用情况：</p><p>命令：</p><p>netstat -ano| findstr 80</p><p><img src="/images/16-LinuxOther/3-wfindstr.png"></p><p>3、查看某个pid进程具体运行什么服务：</p><p>比如查看68644这个pid具体是什么服务</p><p>命令：</p><p>tasklist |findstr 68644</p><p><img src="/images/16-LinuxOther/4-tasklist.png"></p><h2 id="杀死进程："><a href="#杀死进程：" class="headerlink" title="杀死进程："></a>杀死进程：</h2><p>TASKKILL [/S system [/U username [/P [password]]]] { [/FI filter] [/PID processid | /IM imagename] } [/T] [/F]</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1. /S   <span class="built_in"> system </span>   指定要连接的远程系统。  </span><br><span class="line"> </span><br><span class="line">2. /U    [domain\]user    指定应该在哪个用户上下文执行这个命令。</span><br><span class="line"> </span><br><span class="line">3. /P    [password]       为提供的用户上下文指定密码。如果忽略，提示输入。</span><br><span class="line"> </span><br><span class="line">4. /FI  <span class="built_in"> filter </span>          应用筛选器以选择一组任务。允许使用 <span class="string">&quot;*&quot;</span>。例如，映像名称 eq acme*</span><br><span class="line"> </span><br><span class="line">5. /PID  processid        指定要终止的进程的 PID。使用 TaskList 取得 PID。</span><br><span class="line"> </span><br><span class="line">6. /IM   imagename        指定要终止的进程的映像名称。通配符 <span class="string">&#x27;*&#x27;</span>可用来 指定所有任务或映像名称。</span><br><span class="line"> </span><br><span class="line">7. /T                     终止指定的进程和由它启用的子进程。</span><br><span class="line"> </span><br><span class="line">8. /F                     指定强制终止进程。</span><br><span class="line"> </span><br><span class="line">9. /?                     显示帮助消息。</span><br></pre></td></tr></table></figure><p>比如删除14396这个pid：</p><p>taskkill /pid 14396  -t  -f</p>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>经济机器是如何运行的</title>
      <link href="/2020/06/01/%E7%BB%8F%E6%B5%8E%E6%9C%BA%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E7%9A%84/"/>
      <url>/2020/06/01/%E7%BB%8F%E6%B5%8E%E6%9C%BA%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h2 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h2><p>我们先来说经济中最简单的部分：交易！</p><p>经济不过是无数交易的总和，而交易是一件非常简单的事情。交易时刻都在发生，你每次买东西都是进行一笔交易。在每次交易中，买方使用货币或信用向卖方交换商品服务或金融资产。信用在使用时和货币一样，因此把花费的货币和信用加在一起，就可以得出支出总额。支出总额是经济的驱动力。如果用支出金额除以销量就得出价格。就是这么简单，这就是交易。交易是经济机器的最基本零件，所有的经济周期和动力都是交易造成的。所以理解了交易就理解了整个经济。</p><p>一个市场由买卖同一种商品的所有买方和卖方组成；例如小麦市场，汽车市场股票市场和千百万种其他市场。经济，就是由所有市场内的全部交易构成。把全部市场的总支出和销量加在一起，就得到了了解经济运行所需要的全部信息。就这么简单。</p><p>个人、企业、银行和政府都在以上述方式从事交易，用货币和信用交换商品服务和金融资产。政府是最大的买方和卖方，而政府由两个组成部分：收税和花钱的中央政府和中央银行。央行控制的经济中的货币和信贷数量，因此不同于其他买方和卖方。央行通过影响利率和发行更多货币来实行这种控制。我们在下面会看到，正因如此，央行在信贷流通当中发挥着重要作用。</p><h2 id="信贷"><a href="#信贷" class="headerlink" title="信贷"></a>信贷</h2><p>请诸位注意信贷。信贷是经济中最重要的组成部分，但也许是人们最不了解的部分。它之所以最重要，是因为它是经济中最大且最为变幻莫测的一部分。</p><p>贷款人和借款人与在市场中进行交易的买方和卖方没有两样。通常贷款人希望自己的钱生出更多的钱，而借款人则想购买当前无法负担的某种东西——比如房子汽车或是进行投资，例如开办企业。借贷可以同时满足贷款人和借款人的需要。借款人保证偿还借款，称为本金；并支付额外的款额称为利息。利率高时借贷就会减少，因为贷款变得昂贵；当利率低时借贷就会增加，因为贷款变的便宜。如果借款人保证偿还债务，而且贷款人相信这一承诺，信贷就产生了。任何两个人都可以通过协定凭空创造出信贷。信贷看似简单实则复杂，因为信贷还有其他名称。信贷一旦产生，立即成为债务。债务是贷款人的资产，同时是借款人的负债。等到借款人今后偿还了贷款并支付了利息，这些资产和负债将消失，交易得以完成。</p><p>那么为什么信贷如此重要？这是因为借款人一旦获得信贷，便可以增加自己的支出。不要忘记支出是经济的驱动力——这是因为一个人的支出，是另一个人的收入。想想看，你每花一块钱另一个人就挣了一块钱，而你每挣一块钱必定有别人花了一块钱，所以你花的越多别人挣得就越多！如果某人的收入增加，其信用度就会提高，贷款人就更愿意把钱借给他。信用良好的借款人具备两个条件，偿还能力和抵押物收入。债务比率高，借款人就具备偿还能力。如果无法偿还，借款人还可以用有价值可以出售的资产作为抵押物，这样贷款人可以放心的把钱借给他们。所以收入增加使得借贷也增加，从而能够增加支出。由于一个人的支出是另一个人的收入，这将导致借贷进一步增加，并不断循环。这一自我驱动的模式导致经济增长，也正是因为如此，才产生了经济周期。</p><h2 id="经济周期"><a href="#经济周期" class="headerlink" title="经济周期"></a>经济周期</h2><p>在一项交易中，为了获得某样东西，你必须付出另一样东西，长期来看你得到多少，取决于你生产多少。我们的知识随时间而逐渐增多，知识的积累会提高我们的生活水平，我们将此称为生产率的提高。一个善于创新和勤奋的人将比那些自满和懒惰的人更快地提高生产率和生活水平，但在短期内不一定体现出来！生产率在长期内最关键，但信贷在短期内最重要。这是因为生产率的提高不会剧烈波动，因此不是经济起伏的一个重要动力。但是债务是这种动力，因为我们能够通过借债让消费超过产出！但是在还债时，人们不得不让消费低于产出。债务量的波动有两大周期，其中一个周期持续大约五年至八年，另一个持续大约 75 年至 100 年。大部分人虽然能够感受到波动，但由于离波动太近，每天每周都身临其境，通常并不认为这是周期。我们将考查这三股主要动力，并观察它们如何相互作用，以及它们在日常经济中的表现。</p><p>1、周期的产生<br>如上所述，经济的上下起伏不是取决于人们多么善于创新或勤奋工作，而是主要看信贷的总量。我们先想象一个没有信贷的经济运行，在这样的经济运行中，增加支出的唯一办法是增加收入，因此需要提高生产率和工作量。提高生产率是经济增长的唯一途径。由于我的支出是另一个人的收入，当我或者另一个人提高生产率的时候，经济就会增长。我们如果观察各种交易加以总结，就会发现一条类似于生产力增长轨迹的渐进线。</p><p>但是由于我们借债，于是产生了周期，原因并不是任何法规，而是人的天性和信贷的运作方式！借债不过是提前消费，为了购买现在买不起的东西，你的支出必然超过收入。因此你需要借钱，实质上是向未来的自己借钱。你给自己设定了一个未来的时间，到那个时候你的支出必须少于收入，以便偿还债务。 这样马上就形成了一个周期。通常一旦你借钱就制造了一个周期。对于个人是这样，对于整个经济运行也是这样。这就是为什么必须理解信贷，因为信贷触发了一系列机械和可以预料的将在未来发生的事件，这就是信贷不同于货币的地方！完成交易需要使用货币，当你在酒吧用现金买一瓶啤酒时，交易立即完成。但是如果你用信用来买一瓶啤酒，比如赊账，你相当于承诺今后为这瓶啤酒付钱！你和酒吧一起创造了一笔资产和一笔负债，你们凭空制造出了信贷，只有在你今后清偿了这笔赊账之后，上述资产和负债才会消失，债务才会还清，交易才会了结。</p><p>现实生活中大部分所谓的钱实际上是信贷。美国国内的信贷总额大约为 50 万亿美元，而货币总额只有大约 3 万亿美元，不要忘记在没有信贷的经济运行中，增加支出的唯一办法是增加生产。但是在有信贷的经济运行中，还可以通过借债来增加支出。因此有信贷的经济运行能增加支出，使得收入的增长速度在短期内超过生产率的增长，但在长期内并非如此。但是请不要误解我的意思，信贷不一定是坏事，只是会导致周期性变化。信贷如果造成超过偿还能力的过度消费就是不良信贷;但是现在如果高效率地分配资源和产生收入，让你能偿还债务就是良性信贷。例如如果你借钱买一台大彩电，电视机不会带来任何收入，但是需要你偿还债务；但是你如果借钱买一台拖拉机，用它来收获更多的庄稼，赚更多的钱，你就能够偿还债务，提高生活水平。</p><p>在有现代的经济运行中，我们可以跟踪各种交易，观察信贷如何带来经济增长。我举一个例子，假设你每年挣 10 万美元，没有任何债务，你有不错的信用可以借 1 万美元。例如用信用卡借。因此你每年可以花 11 万美元，即使你的收入只有 10 万美元。由于你的支出是别人的收入，另一个人因此挣了 11 万美元。这个挣了 11 万美元的人，如果没有任何债务，可以借 1.1 万美元。他可以消费 12.1 万美元，即使他的年收入只有 11 万美元。由于他的支出是另一个人的收入，而我们通过跟踪各种交易，可以看到这个过程，不断自我强化。</p><p>2、短期债务周期<br>但不要忘记借债形成周期，周期会上升，最终也会下降。下面我们谈谈短期债务周期。随着经济活动的增加，出现了扩张，这是短期债务周期的第一阶段。支出继续增加，价格开始上涨，这里导致支出增加的是信贷，而信贷可以即刻凭空产生。如果支出和收入的增长速度超过所出售的商品的生产速度，价格就会上涨。我们把价格的上涨称为通货膨胀。央行不希望通货膨胀过高，因为这会导致许多问题。央行在看到价格上涨时就会提高利率。随着利率的上升，有能力借钱的人会减少，同时现有的债务成本也会上升，就等于你每个月的信用卡还款额会增加。由于人们减少借债、还款额度增长，剩下来用于支出的资金将减少，因此支出速度放慢。而由于一个人的支出是另一个人的收入，环环相扣，人们的收入将下降。由于支出减少，价格将下跌，我们称之为通货紧缩。经济活动减少，经济便进入衰退。如果衰退过于严重，而且通货膨胀不再成为问题，央行将降低利率，使经济活动重新加速。随着利率降低，偿债成本下降，借债和支出增加，出现另一次经济扩张，可见经济像一部机器一样运行。在短期债务周期中限制支出的唯一因素是贷款人和借款人的贷款和借款意愿。</p><p>3、长期债务周期<br>如果信贷易于获得，经济就会扩张。如果信贷不易获得，经济就会衰退。请注意这个周期主要由央行控制。短期债务周期通常持续 5-8 年，在几十年里不断重复。但是请注意在每个周期的低谷和高峰后，经济增长和债务都超过前一个周期。为什么会这样？这是人促成的。人具有借更多钱和花更多钱的倾向，而不喜欢偿还债务。这是人的天性。因此在长期内债务增加的速度超过收入，从而形成长期债务周期。尽管人们的债务增加，但贷款人会提供更宽松的信贷条件。</p><p>这是为什么？这是因为大家都以为形势一片大好，人们仅注意最近出现的情况。最近的情况是什么？收入一直在增加，资产价值不断上升，股票市场欣欣向荣，现在是繁荣时期——用借来的钱购买商品服务和金融资产很划算。当人们过度借贷消费使泡沫便产生了。因此尽管债务一直增加，但收入也以相进的速度增加，从而抵消了债务！我们把债务与收入比率称为债务负担。只要收入继续上升，债务负担就可以承受。与此同时，资产价值迅猛上升，人们大量借钱来购买资产，因为投资促使资产价格日益升高，人们感觉自己很富有。因此尽管积累了大量债务，收入和资产价值的上升，帮助借贷人在长期内保持良好的信用度。但是这种情况显然无法永久持续下去，也确实没有持续下去。几十年来债务负担缓慢增加，使偿贷成本越来越高，到了一定的时候，偿债成本的增加速度超过收入，迫使人们削减支出。由于一个人的支出是另一个人的收入，收入开始下降。人们的信用因此降低，致使借贷减少，偿债成本继续增加，使得支出进一步减少，周期开始逆转，这时到达长期债务的顶峰，债务负担变得过重。</p><p>美国欧洲和世界上很多其他地区在 2008 年即发生了这一情况，日本在 1989 年和美国在 1929 年因同样原因发生了这一情况。现在经济进入去杠杆化时期，在去杠杆化过程中，人们削减支出、收入下降、信贷消失、资产价格下跌、银行发生挤兑、股票市场暴跌、社会紧张加剧，整个过程开始下滑并形成恶性循环。随着收入下降和偿债成本增加，借款人倍感拮据。随着信用消失信贷枯竭，借款人再也无法借到足够的钱来偿还债务。借款人竭力填补这个窟窿，不得不在支出下降的同时出售资产。出售热潮使市场充斥待售资产，这时股票市场暴跌，不动产市场一蹶不振，银行陷入困境。随着资产价格下跌，借款人能够提供抵押物的价值下降，这进一步降低了借款人的信用，人们觉得自己很穷。信贷迅速消失，支出减少，收入减少，财富减少，信贷减少借债等等随之减少，这是一个恶性循环。</p><p>它看起来与衰退相似，但不同之处是无法通过降低利率来挽回局面。在衰退中可以通过降低利率来刺激借贷，但是在去杠杆化过程中，由于利率已经很低接近零，从而丧失刺激功能，因此降低利率不起作用。美国国内的利率在 1930 年代的去杠杆化期间下降到零，在 2008 年也是如此。衰退与去杠杆化之间的差别在于，在去杠杆化过程中，借款人的债务负担变得过重，无法通过降低利率来减轻。贷款人意识到债务过于庞大，根本无法足额偿还。借款人失去了偿债能力，其抵押物失去价值，他们觉得受到债务的极大伤害，不想再借入更多债务。贷款人停止放贷，借款人停止借贷，整个经济体与个人一样都失去了信用度。</p><h2 id="去杠杆化的手段"><a href="#去杠杆化的手段" class="headerlink" title="去杠杆化的手段"></a>去杠杆化的手段</h2><p>那么应该怎样应对去杠杆化？问题在于债务负担过重，必须减轻。为此可以采用四种办法：一，个人企业和政府削减支出；二，通过债务违约和重组来减少债务；三，财富再分配，将财富从富人转给穷人；四，最后央行发行更多货币。这四种办法被用于现代历史上的每一个去杠杆化过程。</p><p>1、削减支出，共克时艰<br>通常第一个措施是削减支出，我们刚才看到个人企业银行和政府都勒紧裤带削减支出，从而能够减少债务。我们经常把这称为紧缩。当借款人不再借入新的债务，并开始减少旧债务的时候，你会以为债务负担会减轻。但情况正好相反，支出减少了，而一个人的支出是另一个人的收入，这就导致收入下降，收入下降速度超过还债的速度，因此债务负担实际上更为沉重。我们已经看到这种削减支出的做法引起通货紧缩，令人痛苦，企业不得不削减成本，这意味着工作机会减少，失业率上升，这导致下一个步骤：必须减少债务。</p><p>很多借款人无法偿还贷款，而借款人的债务是贷款人的资产。如果借款人不偿还银行贷款，人们会担心银行无法返还其存款，因此纷纷从银行取出存款，银行受到挤兑，而个人企业和银行出现债务违约。这种严重的经济收缩就是萧条。萧条的一个主要特征是人们发现他们原来以为属于自己的财富中有很大一部分实际上并不存在。我们再次以酒吧为例，当你用赊账的办法买一瓶啤酒时，是在承诺今后偿还酒吧的赊账，你的承诺成为酒吧的一项资产。但是如果你不兑现承诺，不偿还酒吧的赊账，实际上是债务违约，那么酒吧的这项资产实际上一钱不值，它实际上是消失了。</p><p>2、债务重组<br>很多贷款人不希望自己的资产消失，同意债务重组。债务重组意味着贷款人得到的还款减少或偿还期延长，或利率低于当初商定的水平。无论如何合约被破坏，结果是债务减少，贷款人希望多少收回一些贷款，这强过血本无归。债务重组让债务消失，但由于它导致收入和资产价值以更快的速度消失，债务负担继续日趋沉重。削减债务与减少支出一样，令人痛苦和导致通货紧缩。所有这些都对中央政府产生影响。因为收入降低和就业减少意味着政府的税收减少。</p><p>3、财富再分配<br>与此同时由于失业率上升，中央政府需要增加支出：很多失业者储蓄不足，需要政府的财务支持；此外政府制定刺激计划和增加支出，以弥补经济活动的减少。在去杠杆化过程中，政府的预算赤字飙升，原因是政府的支出超过税收。你在新闻中所听到的预算赤字正是这种情况。政府必须加税或者举债，以填补赤字。但是在收入下降和很多人失业的时候，应该向谁融资呢？由于政府需要更多的钱，而且大量财富集中在少数人手中，政府自然而然地增加对富人的征税，以帮助经济中的财富再分配，把财富从富人那里，转给穷人。</p><p>4、发行货币，量化宽松<br>正在困苦当中的穷人开始怨恨富人，承受经济疲弱资产贬值和增税压力的富人开始怨恨穷人。如果萧条继续下去就会爆发社会动荡！不仅国家内部的紧张加剧，而且国家之间也会这样，债务国和债权国之间尤其如此。这种局势可以导致政治变革，有时是极端的变革，1930 年代这种局势导致希特勒掌权，欧洲爆发战争和美国的大萧条。要求采取行动来结束萧条的压力越来越大，不要忘记人们心目中的货币，实际上大部分是信贷！因此信贷一旦消失，人们的钱会不够花，人们迫切需要钱，而你一定记得谁可以发行货币，中央银行可以。</p><p>央行已经把利率降到接近零的水平，现在不得不发行更多货币。发行货币与削减支出、减少债务和财富再分配不同，会引起通货膨胀和刺激经济。中央银行不可避免的凭空发行更多货币，并使用这些货币来购买金融资产和政府债券。这种情况发生在美国大萧条期间，并于 2008 年再次爆发。当时美国的中央银行及联邦储备委员会增加发行了 2 万多亿美元，世界各地能够这样做的其他央行也增发了很多货币。央行通过用这些货币购买金融资产，帮助推升了资产价格，从而提高了人们的信用。但是这仅仅有助于那些拥有金融资产的人。你看央行可以发行货币，但是只能购买金融资产。而另一方面，中央政府可以购买商品和服务，可以向人民送钱，但是无法印钞票。因此为了刺激经济，央行和政府必须合作。央行通过购买政府债券，其实是把钱借给政府，使其能够运行赤字预算，并通过刺激计划和失业救济金来增加购买商品和服务的支出。这增加了人们的收入，也增加了政府的债务。但是这个办法将降低经济中的总债务负担，这是一个风险很大的时刻。</p><p>有人问发行货币是否会加剧通货膨胀，如果增发的货币抵消信贷的降幅，就不会引发通货膨胀。不要忘记重要的是支出，每一块钱的支出，无论支付的是货币还是信用，对价格的影响都是一样的。央行可以通过增加货币发行量来弥补消失的信贷。央行为了扭转局面，不仅需要推动收入的增长，而且需要让收入的增长率超过所积累债务的利率，这是什么意思？主要的意思是收入一定要比债务增长的快。例如我们假设有个国家正在经历去杠杆化，其债务收入比率是100%，这意味着债务量相当于整个国家一年的收入。假设这些债务的利率是2%，如果债务以2%的利率速度增加，而收入的增长率仅有大约1%，那么债务负担永远不会减轻，必须发行更多货币，使收入增长率超过利率。然而发行货币太容易了，而且比其他办法受欢迎，因此这个办法可能易于被滥用。关键是避免像1920年代去杠杆化的德国那样发行过多的货币，从而导致恶性通货膨胀。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>决策者需要平衡考虑降低债务负担的四种办法，必须平衡兼顾通货紧缩的办法和通货膨胀的办法，以便保持稳定。如果取成适当的平衡，就可以带来和谐的去杠杆化。所以说去杠杆化可以是痛苦的，也可以是和谐的！怎样才能实现和谐的去杠杆化？尽管去杠杆化是艰难的，但以尽可能好的办法来处理艰难的局势却是一件好事，这比杠杆化阶段大量举债产生过度失衡现象要好得多。在和谐的去杠杆化过程中，债务收入比率下降，经济实际上是正增长；同时通货膨胀并不是一个问题，这是通过适当的平衡所取得的。为了取得适当的平衡，需要结合削减支出、减少债务转移财富和发行货币的办法，以保持经济和社会稳定。</p><p>如果决策层取得适当的平衡，去杠杆化过程就不会那样激烈，经济增长速度缓慢，但债务负担会下降，这就是和谐的去杠杆化，当收入上升的时候，借款人的信用度提高，借款人一旦显得更有信用，贷款人就会开始恢复贷款，债务负担终于开始下降，人们可以借到钱就可以增加消费经济终于开始恢复增长长期债务周期，从而进入通货再膨胀阶段去杠杆化过程如果处理不当会非常可怕，但如果处理得当，最终将解决问题！为了使债务负担下降和经济活动恢复正常，大约需要十年或更长的时间，因此有失去的十年这种说法。综上所述，经济当然要比这个模式复杂一点。然而把短期债务周期长期债务周期和生产率增长轨迹结合起来分析，我们会得到一个不错的模式，可以看清我们在过去和当前的处境，以及未来可能的发展方向。</p><p>忠告<br>最后我希望大家学到三条经验法则。第一，不要让债务的增长速度超过收入，因为债务负担最终将把你压垮。第二，不要让收入的增长速度超过生产率，因为这最终将使你失去竞争力。第三，尽一切努力提高生产率，因为生产率在长期内起着最关键的作用。这就是我给大家，也是给决策者们的简单的建议。大家也许会吃惊地发现，大多数人包括大多数决策者都没有对此予以足够的重视。这个模式对我很有用，希望他也将对你们有用。谢谢大家。</p>]]></content>
      
      
      <categories>
          
          <category> 金融经济 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 视图、事务、索引</title>
      <link href="/2020/05/10/Mysql%20%E8%A7%86%E5%9B%BE%E3%80%81%E4%BA%8B%E5%8A%A1%E3%80%81%E7%B4%A2%E5%BC%95/"/>
      <url>/2020/05/10/Mysql%20%E8%A7%86%E5%9B%BE%E3%80%81%E4%BA%8B%E5%8A%A1%E3%80%81%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>QPS：Queries Per Second意思是“每秒查询率”，是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。</p><p>TPS：是TransactionsPerSecond的缩写，也就是事务数/秒。它是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图是基于 SQL 语句的结果集的可视化的表，即视图是一个虚拟存在的表，可以包含表的全部或者部分记录，也可以由一个表或者多个表来创建。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 一般创建语法</span></span><br><span class="line">create view &lt;视图名称&gt; [(column_list)]</span><br><span class="line">as select语句</span><br><span class="line">with<span class="built_in"> check </span>option;</span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引（Index）是帮助MySQL高效获取数据的数据结构，MySQL只对以下操作符才使用索引：&lt;，&lt;=，=，&gt;，&gt;=，between，in。</p><p>设计索引的原则：</p><ul><li>最适合索引的列是出现在WHERE子句中的列，或连接子句（on语句）中指定的列。</li><li>索引列的值中，不相同的数目越多，索引的效果越好。</li><li>使用短索引：对于CHAR和VARCHAR列，只用它的一部分来创建索引，可以节省索引空间，也会使查询更快捷。</li></ul><p>优点：</p><ul><li>提高了检索速度，若没有索引，MYSQL不得不以第一条记录开始全表扫描直到找出相关的行。</li></ul><p>缺点：</p><ul><li>降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。在执行这些操作时，DBMS（数据库管理系统）必须动态更新索引。</li><li>占用磁盘空间。</li></ul><h3 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h3><p>1、从数据结构角度：</p><ul><li>B+树索引(O(log(n)))：关于B+树索引，可以参考 MySQL索引背后的数据结构及算法原理</li><li>hash索引</li><li>FULLTEXT索引（现在MyISAM和InnoDB引擎都支持了）</li><li>R-Tree索引（用于对GIS数据类型创建SPATIAL索引）</li></ul><p>1.2 B+Tree索引和Hash索引区别？<br>哈希索引适合等值查询，但是无法进行范围查询<br>哈希索引没办法利用索引完成排序<br>哈希索引不支持多列联合索引的最左匹配规则<br>如果有大量重复键值的情况下，哈希索引的效率会很低，因为存在哈希碰撞问题</p><p>2、从物理存储角度：</p><ul><li>聚簇索引（clustered index）</li><li>非聚簇索引（non-clustered index）</li></ul><p>3、从逻辑角度：</p><ul><li><p>主键索引：主键索引是一种特殊的唯一索引，不允许有空值<br>在 MYSQL 中，当你建立主键时，主键索引同时也已经建立起来了，不必重复设置。</p></li><li><p>普通索引或者单列索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 直接创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> 索引名 <span class="keyword">ON</span> 表名(列名[(<span class="keyword">length</span>)]…); </span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改表结构时添加普通索引，索引值可出现多</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> <span class="keyword">INDEX</span> index_name (column_list)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看索引</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> 表名</span><br><span class="line"></span><br><span class="line"><span class="comment">## 删除索引</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> 索引名称 <span class="keyword">ON</span> 表名</span><br></pre></td></tr></table></figure></li><li><p>多列索引（复合索引）：复合索引指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用，使用复合索引时遵循最左前缀集合。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> <span class="keyword">index</span> sy(<span class="keyword">name</span>，age，score); </span><br><span class="line"><span class="comment">## 最左前缀匹配</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">&#x27;jia&#x27;</span> <span class="keyword">and</span> age&gt;=<span class="number">12</span> //<span class="keyword">where</span>条件中含有索引的首列字段和第二个字段 </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">&#x27;jia&#x27;</span> //<span class="keyword">where</span>条件中只含有首列字段 </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">&#x27;jia&#x27;</span> <span class="keyword">and</span> age=<span class="number">12</span> <span class="keyword">and</span> score &gt; <span class="number">60</span></span><br></pre></td></tr></table></figure></li><li><p>唯一索引或者非唯一索引<br>创建方式和上方的普通索引类似，即将普通索引的’index’改为’unique index’。</p></li><li><p>空间索引：空间索引是对空间数据类型的字段建立的索引，MYSQL中的空间数据类型有4种，分别是GEOMETRY、POINT、LINESTRING、POLYGON。MYSQL使用SPATIAL关键字进行扩展，使得能够用于创建正规索引类型的语法创建空间索引。创建空间索引的列，必须将其声明为NOT NULL，空间索引只能在存储引擎为MYISAM的表中创建</p></li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>1、四大特性(ACID)<br>原子性（Atomicity）<br>一致性（Consistency）<br>隔离性（lsolation）<br>持久性（Durability）</p><p>2、自动提交<br>MySQL 默认开启事务自动提交模式，即除非显式的开启事务（BEGIN 或 START TRANSACTION），否则每条 SOL 语句都会被当做一个单独的事务自动执行。</p><p>3、事务隔离级别<br>如果事务没有隔离性，就容易出现脏读、不可重复读和幻读等情况。<br><strong>脏读</strong><br>脏读是指一个事务正在访问数据，并且对数据进行了修改，但是这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。<br><strong>不可重复读</strong><br>不可重复读是指在一个事务内，多次读取同一个数据。<br>在这个事务还没有结束时，另外一个事务也访问了该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。<br><strong>幻读</strong><br>幻读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。<br>为了解决以上这些问题，标准 SQL 定义了 4 类事务隔离级别，用来指定事务中的哪些数据改变是可见的，哪些数据改变是不可见的。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">如何查看事务隔离级别：</span><br><span class="line"></span><br><span class="line">mysql&gt; show variables  like <span class="emphasis">&#x27;%iso%&#x27;</span>;</span><br><span class="line"><span class="code">+---------------+</span>-----------------+</span><br><span class="line">| Variable<span class="emphasis">_name | Value           |</span></span><br><span class="line"><span class="emphasis">+---------------+-----------------+</span></span><br><span class="line"><span class="emphasis">| tx_</span>isolation  | REPEATABLE-READ |</span><br><span class="line"><span class="code">+---------------+</span>-----------------+</span><br><span class="line">1 row in set, 1 warning (0.40 sec)</span><br><span class="line">如何设置事务隔离级别：</span><br><span class="line"></span><br><span class="line">mysql&gt; set session tx<span class="emphasis">_isolation=&#x27;REPEATABLE-READ&#x27;;</span></span><br><span class="line"><span class="emphasis">Query OK, 0 rows affected (0.32 sec)</span></span><br></pre></td></tr></table></figure><p><img src="/images/20-database/04-shiwu.png"></p><p>4、事务开启与提交</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span> 或者 <span class="keyword">start</span>  <span class="keyword">transaction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span> 将缓存的数据变更到物理表钟</span><br><span class="line"></span><br><span class="line"><span class="keyword">rollback</span> 放弃缓存的变更数据</span><br></pre></td></tr></table></figure><p>5、大事务<br>定义：运行时间长比较长，操作的数据比较多的事务<br>风险：<br>锁定太多的数据，造成大量的阻塞和锁超时<br>回滚时间所需时间长，回滚的时候，数据同样是处于锁定状态<br>执行时间长，容易造成主从延迟（需要先在主服务器进行）</p><p>如何处理大事务？<br>避免一次处理太多的数据（分批处理）<br>移除不必要在事务中的SELECT操作（只有必要的写操作）</p><h2 id="查询优化神器-explain"><a href="#查询优化神器-explain" class="headerlink" title="查询优化神器-explain"></a>查询优化神器-explain</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * <span class="keyword">FROM</span> cnarea_2018 WHERE id = 1;</span><br><span class="line">1<span class="built_in">SIMPLE</span>cnarea_2018const(走索引)PRIMARYPRIMARY3const1</span><br><span class="line"></span><br><span class="line">EXPLAIN SELECT * <span class="keyword">FROM</span> cnarea_2018 WHERE <span class="attribute">pinyin</span>=<span class="string">&quot;KangYingJiaYuanSiSheQu&quot;</span></span><br><span class="line">1<span class="built_in">SIMPLE</span>cnarea_2018ALL(全表扫描)778092Using where</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql基础查询数据更新</title>
      <link href="/2020/05/05/Mysql%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0/"/>
      <url>/2020/05/05/Mysql%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>1、约束类型：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、primary <span class="type">key</span>：主键约束，主键这一行的数据不能重复且不能为空</span><br><span class="line"><span class="number">2</span>、not null：非空约束，表示不可空</span><br><span class="line"><span class="number">3</span>、unique：唯一约束，此字段的值不允许重复</span><br><span class="line"><span class="number">4</span>、<span class="section">default</span>：默认值约束，设置默认值</span><br><span class="line"><span class="number">5</span>、foreign <span class="type">key</span>：当为关系字段填写值时，会关联到表中查询值是否存在，若存在则填写成功。</span><br></pre></td></tr></table></figure><p>2、外键：是另一表的主键，外键可以有重复，可以是空值，用来和其他表建立联系。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取外键名</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> employee;</span><br><span class="line"><span class="comment">-- 添加外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(dept_id) <span class="keyword">REFERENCES</span> department(<span class="keyword">id</span>); </span><br></pre></td></tr></table></figure><p>on delete/on update默认规则是RESTRICT。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CASCADE</span>(级联)：父表<span class="keyword">delete</span>、<span class="keyword">update</span>的时候，子表会<span class="keyword">delete</span>、<span class="keyword">update</span>掉关联记录；</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">NULL</span>：父表<span class="keyword">delete</span>、<span class="keyword">update</span>的时候，子表会将关联记录的外键字段所在列设为<span class="keyword">null</span>，所以注意在设计子表时外键不能设为<span class="keyword">not</span> <span class="keyword">null</span>；</span><br><span class="line"><span class="keyword">RESTRICT</span>(约束)：如果想要删除父表的记录时，而在子表中有关联该父表的记录，则不允许删除父表中的记录；</span><br><span class="line"><span class="keyword">NO ACTION</span>：同 <span class="keyword">RESTRICT</span>，但<span class="keyword">NO ACTION</span>是在其他约束的动作之后执行</span><br></pre></td></tr></table></figure><p><img src="/images/20-databse/03-sql-key.png"></p><p>3、写法顺序：select–from–where–group by–having–order by </p><p>4、执行顺序：其中每一个操作都会产生一张虚拟表，作为一个处理的输入，这些虚拟表对用户来说是透明的，只有最后一个虚拟表会被作为结果返回。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FORM：对<span class="keyword">FROM</span>的左边的表和右边的表计算笛卡尔积。产生虚表VT1</span><br><span class="line"><span class="keyword">ON</span>：对虚表VT1进行<span class="keyword">ON</span>筛选，只有那些符合&lt;<span class="keyword">join</span>-condition&gt;的行才会被记录在虚表VT2中。</span><br><span class="line"><span class="keyword">JOIN</span>：如果指定了<span class="keyword">OUTER</span> <span class="keyword">JOIN</span>（比如<span class="keyword">left join</span>、 <span class="keyword">right join</span>），那么保留表中未匹配的行就会作为外部行添加到虚拟表VT2中产生虚拟表VT3,rug <span class="keyword">from</span>子句中包含两个以上的表的话，那么就会对上一个<span class="keyword">join</span>连接产生的结果VT3和下一个表重复执行步骤<span class="number">1</span>~<span class="number">3</span>这三个步骤，一直到处理完所有的表为止。</span><br><span class="line"><span class="keyword">WHERE</span>：对虚拟表VT3进行<span class="keyword">WHERE</span>条件过滤，只有符合&lt;<span class="keyword">where</span>-condition&gt;的记录才会被插入到虚拟表VT4中。</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>：根据<span class="keyword">group</span> <span class="keyword">by</span>子句中的列，对VT4中的记录进行分组操作，产生VT5。</span><br><span class="line"><span class="keyword">HAVING</span>：对虚拟表VT5应用<span class="keyword">having</span>过滤，只有符合&lt;havingcondition&gt;的记录才会被插入到虚拟表VT6中。</span><br><span class="line"><span class="keyword">SELECT</span>：执行操作，选择指定的列，插入到虚拟表中。</span><br><span class="line"><span class="keyword">DISTINCT</span>： 对中的记录进行去重。产生虚拟表VT8。</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>： VT8中的记录按照&lt;order_by_list&gt;进行排序操作，产生虚拟表VT9。</span><br><span class="line"><span class="keyword">LIMIT</span>：取出指定行的记录，产生虚拟表，并将结果返回。</span><br></pre></td></tr></table></figure><p>5、数据库引擎<br>MyISAM：不支持外键约束。不支持事务。对数据大批量导入时，它会边插入数据边建索引，所以为了提高执行效率，应该先禁用索引，在完全导入后再开启索引。<br>InnoDB：支持外键约束，支持事务。对索引都是单独处理的，无需引用索引。</p><p>6、下列查询语句所用表结构示意图：<br><img src="/images/20-databse/02-sql-table.png"></p><h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><p>一个子句通常由一个关键字加上所提供的数据组成。<br>1、 带in关键字的查询<br>in操作符用来查询满足指定范围内的条件记录</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s_id,f_name <span class="keyword">FROM</span> fruits <span class="keyword">WHERE</span> s_id(<span class="number">101</span>,<span class="number">102</span>)</span><br></pre></td></tr></table></figure><p>2、带between…and的范围查询<br>between and用来查询某个范围内的值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">SELECT</span> f_name,f_price FROM fruits WHERE f_price between <span class="number">2</span>.<span class="number">00</span> and <span class="number">10</span>.<span class="number">20</span>ss</span><br></pre></td></tr></table></figure><p>3、带like字符匹配(模糊查询)<br>SQL中可以和like一起使用的通配符有%和_，%可代表任意长度的字符(包括零字符)，下划线只匹配任意单个字符。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询以b开头y结尾的选项</span></span><br><span class="line"><span class="keyword">SELECT</span> f_name <span class="keyword">FROM</span> fruits <span class="keyword">WHERE</span> f_name <span class="keyword">like</span> <span class="string">&#x27;b%y&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> suppliers <span class="keyword">WHERE</span> s_city <span class="keyword">like</span> <span class="string">&#x27;__市&#x27;</span></span><br></pre></td></tr></table></figure><p>4、空值：is null<br>null不同于空字符串。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> suppliers <span class="keyword">WHERE</span> s_city <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>5、多条件查询<br>and，or连接多个查询条件，and优先级高于or。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> f_name,f_price <span class="keyword">FROM</span> fruits <span class="keyword">WHERE</span> s_id=<span class="number">101</span> <span class="keyword">and</span> f_price &gt;= <span class="number">5</span></span><br></pre></td></tr></table></figure><p>6、查询结果不重复<br>关键字distinct，放在去重的字段前</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询s_id字段的值，返回s_id字段值且不重复</span></span><br><span class="line"><span class="keyword">SELECT</span> count(<span class="keyword">distinct</span> s_id) <span class="keyword">from</span> fruits</span><br></pre></td></tr></table></figure><p>7、查询结果排序<br>order by子句对查询结果排序，永远是最后一个子句。</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> fruits <span class="keyword">ORDER</span> <span class="keyword">BY</span> s_id <span class="keyword">desc</span> <span class="comment">// 降序</span></span><br></pre></td></tr></table></figure><p>8、分组查询<br>按照某个或多个字段进行分组，group by关键字常和聚合函数（AVG、COUNT、MAX、MIN、SUM）一起使用。<br>过滤：group by可以和having一起限定显示记录所需满足的条件。<br>with rollup：在查询出的分组后增加一条统计记录，与order by互斥。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">s_id,</span><br><span class="line"><span class="keyword">count</span>( * ) <span class="string">&#x27;商品种类&#x27;</span>,</span><br><span class="line"><span class="keyword">GROUP_CONCAT</span>( f_name ) <span class="string">&#x27;商品名称&#x27;</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">fruits </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">s_id </span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">ROLLUP</span></span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">商品种类 &gt; <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line"><span class="keyword">count</span>( * )</span><br></pre></td></tr></table></figure><p><strong>小提示：</strong><br>count(*) 计算表中总行数，不管某列是非空值还是空值（NULL）。<br>count(字段名) 计算指定列的总行数，计算时将忽略指定列的值为NULL的行。<br>WHERE 不能放在GROUP BY 后，且条件中不能有聚集函数如SUM()，AVG()等。</p><p>9、限制查询结果数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用limit实现top n问题，limit 偏移量，行数量</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> fruits <span class="keyword">ORDER</span> <span class="keyword">BY</span> f_price <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>10、limit实现分页</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- page：请求的第几页，pageSize：每页条数</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> fruits limits (page<span class="number">-1</span>)*pagesize，pagesize</span><br></pre></td></tr></table></figure><p>11、DISTINCT<br>指示数据库只返回不同的值，若DISTINCT后跟多个字段，则作用于多个字段。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> f_name <span class="keyword">from</span> fruits</span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h3><p>1、内连接([inner] join)<br>只列出连接表中与连接条件相匹配的数据行</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> f_name,f_price,fruits.s_id,s_name,s_city</span><br><span class="line"><span class="keyword">from</span> fruits <span class="keyword">inner</span> <span class="keyword">join</span> suppliers</span><br><span class="line"><span class="keyword">on</span> fruits.s_id = suppliers.s_id</span><br><span class="line"><span class="keyword">where</span> f_name = <span class="string">&#x27;apple&#x27;</span></span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> f_name,f_price,f.s_id,s_name,s_city</span><br><span class="line"><span class="keyword">FROM</span> fruits <span class="keyword">as</span> f,suppliers <span class="keyword">as</span> s</span><br><span class="line"><span class="keyword">WHERE</span> f_name=<span class="string">&#x27;apple&#x27;</span> <span class="keyword">and</span> f.s_id = s.s_id</span><br></pre></td></tr></table></figure><p>2、左/右外连接(LEFT/RIGHT [OUTER] JOIN)<br>不仅列出与连接条件（on）相匹配的行，还列出左表table1(左外连接)、或右表table2(右外连接)所有符合WHERE过滤条件的数据行。<br>左外连接：左表列出全部，右表只列出匹配的记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有商品及其供应商，包括为供应商品的供应商信息</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">f_name,</span><br><span class="line">f_price,</span><br><span class="line">f.s_id,</span><br><span class="line">s_name,</span><br><span class="line">s_city </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">fruits <span class="keyword">AS</span> f</span><br><span class="line"><span class="keyword">JOIN</span> suppliers <span class="keyword">AS</span> s <span class="keyword">ON</span> f.s_id = s.s_id</span><br></pre></td></tr></table></figure><p>3、全连接(FULL [OUTER] JOIN)<br>在内连接的基础上增加，左右两边没有显示的数据。<br>注意: mysql并不支持全连接 full JOIN 关键字，但是mysql 提供了 UNION 关键字 可以间接实现 full JOIN 功能。<br>UNION 用于合并多张表的查询结果，字段名以第一个为准，字段数量必须相同，union all 用于结果不去重的场景。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tname <span class="keyword">FROM</span> person <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> person.did = dept.did</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> tname <span class="keyword">FROM</span> person <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> person.did = dept.did;</span><br></pre></td></tr></table></figure><p><img src="/images/20-databse/01-sql-join.png"></p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>作用：某些情况下，当进行查询的时候，需要的条件是另外一个select 语句的结果，这个时候，就要用到子查询。<br>定义：为了给主查询（外部查询）提供数据而首先执行的查询（内部查询）被叫做子查询。也就是说，先执行子查询，根据子查询的结果，再执行主查询。<br>关键字：用于子查询的关键字主要包括 IN、NOT IN、EXIST、NOT EXIST、=、&lt;&gt;等（符号“&lt;&gt;”的意思是：不等于）。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询fruits表中最贵的水果</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">f_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">fruits </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">f_price = ( <span class="keyword">SELECT</span> MAX( f_price ) <span class="keyword">FROM</span> fruits )</span><br></pre></td></tr></table></figure><h3 id="正则表达式查询"><a href="#正则表达式查询" class="headerlink" title="正则表达式查询"></a>正则表达式查询</h3><p>使用正则关键字regexp，正则语法与Python中类似，示例如下</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在fruits表中查询以x开头y结尾，中间至少包含一次ab</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> fruits <span class="keyword">WHERE</span> f_name <span class="string">&#x27;^x(ab)+y$&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>1、简单case函数<br>在 SELECT 语句中，简单 CASE 函数仅检查是否相等，而不进行其它比较。<br>格式：CASE [col_name] WHEN [value1] THEN [result1]…ELSE [default] END</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">f_name,</span><br><span class="line">f_price,</span><br><span class="line"><span class="keyword">CASE</span> f_price</span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">1000</span> <span class="keyword">THEN</span> <span class="string">&#x27;贵&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;正常&#x27;</span> </span><br><span class="line"><span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">&#x27;info&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">fruits;</span><br></pre></td></tr></table></figure><p>2、case搜索函数<br>在 SELECT 语句中，CASE 搜索函数允许根据比较值在结果集内对值进行替换。<br>格式：CASE WHEN [expr] THEN [result1]…ELSE [default] END</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">f_name,</span><br><span class="line">f_price,</span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> f_price &lt; <span class="number">10</span> <span class="keyword">THEN</span> <span class="string">&#x27;便宜&#x27;</span> <span class="keyword">WHEN</span> f_price &gt; <span class="number">20</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="string">&#x27;贵&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;正常&#x27;</span> </span><br><span class="line"><span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">&#x27;info&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">fruits;</span><br></pre></td></tr></table></figure><p>3、IF函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">f_name,</span><br><span class="line"><span class="keyword">IF</span></span><br><span class="line">( f_price &gt; <span class="number">10</span>, <span class="keyword">IF</span>(f_price&lt;<span class="number">20</span>,<span class="string">&#x27;正常&#x27;</span>,<span class="string">&#x27;贵&#x27;</span>), <span class="string">&#x27;便宜&#x27;</span> ) <span class="keyword">as</span> info</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">fruits</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 系统用户、组以及文件权限简介</title>
      <link href="/2020/05/02/Linux%20%E7%B3%BB%E7%BB%9F%E7%94%A8%E6%88%B7%E3%80%81%E7%BB%84%E4%BB%A5%E5%8F%8A%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E7%AE%80%E4%BB%8B/"/>
      <url>/2020/05/02/Linux%20%E7%B3%BB%E7%BB%9F%E7%94%A8%E6%88%B7%E3%80%81%E7%BB%84%E4%BB%A5%E5%8F%8A%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-安全性模型概述"><a href="#Linux-安全性模型概述" class="headerlink" title="Linux 安全性模型概述"></a>Linux 安全性模型概述</h2><p>Linux使用User（用户）和Group（组）控制使用者对文件的存取权限，在Linux系统中被创建的用户，可以使用账号和口令登录Linux。Linux系统将一切视为文件，每个文件都有owner,并且owner属于某个Group。</p><h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><p>Linux 系统的每个用户都有一个唯一的 User ID，Use r的信息存储在 /etc/passwd 中，该文件的格式示例如下：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span>0<span class="symbol">:</span>0<span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br></pre></td></tr></table></figure><p>每一位对应的含义为：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名:密码:用户ID:组ID:用户全名:主目录:登录<span class="keyword">shell</span></span><br></pre></td></tr></table></figure><p>在旧的系统中，直接将用户的密码存在第二位。由于 /etc/passwd 文件所有用户都有读权限，出于安全性考虑，后来的系统将密码单独拿出来存放在了 /etc/shadow 文件中， 而 /etc/passwd 文件的第二位只用于存储用户是否需要密码，如果用户存在密码，这该位用 ‘x’ 标记，如果是 “!” 或者为空则说明此用户不能用密码登录。</p><p>一般情况下只有拥有 HOME 目录和指定 shell 的用户才能登录系统。User 未经授权将禁止读写或执行其他 User 的文件。Linux 的 root 用户拥有至高无上的权限，可以无条件的对系统中的所有文件进行访问、修改和删除。一般不要随便用 root 登录并操作系统。</p><p>有两个命令可以用于添加新的用户，即 useradd 和 adduser。useradd 是系统原生命令，而 adduser 则是一个 perl 脚本，是对 useradd 的封装，已提供更好的创建用户的接口。adduser 命令的参数选项如下：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-b, <span class="params">--base-dir</span> BASE_DIR       指定主目录的基目录，一般默认为 <span class="string">/home</span></span><br><span class="line">-c, <span class="params">--comment</span> COMMENT         用户注释，即用户的详细信息（如姓名，年龄，电话等）</span><br><span class="line">-d, <span class="params">--home-dir</span> HOME_DIR       为用户指定一个 HOME 目录</span><br><span class="line">-D, <span class="params">--defaults</span>                查看或者改变创建用户时的配置，默认配置在 <span class="string">/etc/default/useradd</span> 中</span><br><span class="line">-e, <span class="params">--expiredate</span> EXPIRE_DATE  指定账户失效日期，格式为 YYYY-MM-DD</span><br><span class="line">-f, <span class="params">--inactive</span> INACTIVE       缓冲时间，指定在密码过期后多少天即关闭该帐号</span><br><span class="line">-g, <span class="params">--gid</span> GROUP               为用户指定一个组或者组 ID</span><br><span class="line">-G, <span class="params">--groups</span> GROUPS           将用户添加到其它的组，多个组时用逗号分隔</span><br><span class="line">-k, <span class="params">--skel</span> SKEL_DIR           指定创建 HOME 目录的模板目录，一般默认为 <span class="string">/etc/skel</span></span><br><span class="line">-K, <span class="params">--key</span> KEY=VALUE           覆盖 <span class="string">/etc/login.defs</span> 中的缺省配置</span><br><span class="line">-l, <span class="params">--no-log-init</span>             不要将此用户添加到最近登录和登录失败数据库</span><br><span class="line">-m, <span class="params">--create-home</span>             创建用户时一并创建用户的主目录</span><br><span class="line">-M, <span class="params">--no-create-home</span>          不要创建用户主目录</span><br><span class="line">-N, <span class="params">--no-user-group</span>           不创建与用户同名的组</span><br><span class="line">-o, <span class="params">--non-unique</span>              允许 UID 与其他用户相同</span><br><span class="line">-p, <span class="params">--password</span> PASSWORD       指定用户密码</span><br><span class="line">-r, <span class="params">--system</span>                  创建为一个系统账户</span><br><span class="line">-s, <span class="params">--shell</span> SHELL             指定用户的登录 Shell</span><br><span class="line">-u, <span class="params">--uid</span> UID                 为用户指定一个 UID</span><br><span class="line">-U, <span class="params">--user-group</span>              创建一个与用户同名的组</span><br></pre></td></tr></table></figure><p><code>userdel</code> 命令用于删除用户，常用的选项是-r，它的作用是把用户的主目录一起删除。</p><p><code>usermod</code>命令用于修改账户信息，常用的选项包括 -c, -d, -m, -g, -G, -s, -u 以及 -o 等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。</p><p>管理用户相关的命令工具汇总：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">useradd   ：添加用户</span><br><span class="line">adduser   ：添加用户</span><br><span class="line">passwd    ：为用户设置密码</span><br><span class="line">usermod   ：修改用户命令，可以通过 usermod 来修改登录名、用户的家目录等等</span><br><span class="line">pwcov     ：同步用户从 <span class="regexp">/etc/</span>passwd 到 <span class="regexp">/etc/</span>shadow</span><br><span class="line">pwck      ：pwck是校验用户配置文件 <span class="regexp">/etc/</span>passwd 和<span class="regexp">/etc/</span>shadow 文件内容是否合法或完整</span><br><span class="line">pwunconv  ：是 pwcov 的立逆向操作，是从 <span class="regexp">/etc/</span>shadow 和 <span class="regexp">/etc/</span>passwd 创建 <span class="regexp">/etc/</span>passwd ，然后会删除 <span class="regexp">/etc/</span>shadow 文件</span><br><span class="line">finger    ：查看用户信息工具</span><br><span class="line">id        ：查看用户的 UID、GID 及所归属的用户组</span><br><span class="line">chfn      ：更改用户信息工具</span><br><span class="line">su        ：用户切换工具</span><br><span class="line">sudo      ：sudo 是通过另一个用户来执行命令（execute a command as another user）</span><br><span class="line">visudo    ：visodo 是编辑 <span class="regexp">/etc/</span>sudoers 的命令；也可以不用这个命令，直接用vi 来编辑 <span class="regexp">/etc/</span>sudoers 的效果是一样的</span><br><span class="line">sudoedit  ：和 sudo 功能差不多</span><br></pre></td></tr></table></figure><h2 id="用户群组概述"><a href="#用户群组概述" class="headerlink" title="用户群组概述"></a>用户群组概述</h2><p>Linux 系统的每个 User 都属于一个 Group，具有唯一的标识符 GID。Group 信息存储于 /etc/group 中，且可以为 group 创建密码，密码存放在 /etc/gshadow 文件中，但是一般情况下不需要为用户组创建密码。系统默认会为每个 User 关联一个和 User 同名的 Group，每个 User 也至少存在于自己同名的 Group 中，同时 User 也可以加入其他的 Group。在同一个 Group 中的成员可以共享其他成员的文件。增加一个新的用户组使用 groupadd 命令。 其格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用法：<span class="selector-tag">groupadd</span> <span class="selector-attr">[选项]</span> 组</span><br></pre></td></tr></table></figure><p>可以使用的选项有：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-f, <span class="params">--force</span>                如果组已经存在则成功退出，并且如果 GID 已经存在则取消 -g</span><br><span class="line">-g, <span class="params">--gid</span> GID              为新组使用 GID</span><br><span class="line">-h, <span class="params">--help</span>                 显示此帮助信息并推出</span><br><span class="line">-K, <span class="params">--key</span> KEY=VALUE        不使用 <span class="string">/etc/login.defs</span> 中的默认值</span><br><span class="line">-o, <span class="params">--non-unique</span>           允许创建有重复 GID 的组</span><br><span class="line">-p, <span class="params">--password</span> PASSWORD    为新组使用此加密过的密码</span><br><span class="line">-r, <span class="params">--system</span>               创建一个系统账户</span><br><span class="line">-R, <span class="params">--root</span> CHROOT_DIR      chroot 到的目录</span><br></pre></td></tr></table></figure><p>如果要删除一个已有的用户组，使用groupdel命令，其格式为：<code>groupdel 用户组</code>。修改用户组的属性使用groupmod命令，其语法为：groupmod 选项 用户组</p><p>如果需要将一个用户添加到某个用户组中，可以采用如下命令：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -<span class="keyword">a</span> -G 用户组 用户名</span><br></pre></td></tr></table></figure><p>参数 -a 代表 append， 也就是将用户添加到新用户组中而不必离开原有的其他用户组，不过需要与 -G 选项配合使用， -G 表示指定用户组。如果仅仅只改变一个用户原有的用户组，则采用如下命令：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">useradd</span> -g 用户组</span><br></pre></td></tr></table></figure><p>管理用户组相关的命令工具汇总：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">groupadd   ：添加用户组；</span><br><span class="line">groupdel   ：删除用户组；</span><br><span class="line">groupmod   ：修改用户组信息</span><br><span class="line">groups     ：显示用户所属的用户组</span><br><span class="line">grpck</span><br><span class="line">grpconv    ：通过/etc/group和/etc/gshadow 的文件内容来同步或创建/etc/gshadow ，如果/etc/gshadow 不存在则创建；</span><br><span class="line">grpunconv  ：通过/etc<span class="built_in">/group </span>和/etc/gshadow 文件内容来同步或创建/etc<span class="built_in">/group </span>，然后删除gshadow文件；</span><br></pre></td></tr></table></figure><h2 id="Linux-文件和目录权限解读"><a href="#Linux-文件和目录权限解读" class="headerlink" title="Linux 文件和目录权限解读"></a>Linux 文件和目录权限解读</h2><h3 id="1、三种基本权限"><a href="#1、三种基本权限" class="headerlink" title="1、三种基本权限"></a>1、三种基本权限</h3><p>（1）r (read) 读</p><p>针对目录，有读（r）权限就代表能对此目录有列表功能，就是可以执行ls命令进行查看，另外还有cp的功能。 针对文件，有读（r）权限就代表能对此文件有阅读功能，可以通过cat等命令查看文件内容。</p><p>（2）w (write) 写</p><p>针对目录，有写（w）权限就代表着在此目录下创建文件和目录，可以通过touch，mkdir等命令创建文件和目录，另外还可以删除此目录下的文件。 针对文件，有写（w）权限就代表着对此文件可以写入新的内容和修改文件内容。</p><p>（3）x (execute) 执行</p><p>针对目录，有执行（x）权限就代表能进入此目录，利用cd等命令进入此目录 针对文件，有执行（x）权限就代表可以执行此文件。</p><p>在 Linux 下每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；和属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。当用ls -l命令显示文件或目录的周详信息时，最左边的一列为文件的访问权限。最左边的一位为文件的类型，例如“-”表示普通文件，“d”表示目录等。ls -l所列出的信息各栏含义如下：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一个栏位，表示文件的属性。</span><br><span class="line">第二个栏位，表示文件个数，即硬链接数。</span><br><span class="line">第三个栏位，表示该文件或目录的拥有者。</span><br><span class="line">第四个栏位，表示所属的组（<span class="keyword">group</span>）。</span><br><span class="line">第五栏位，表示文件大小。</span><br><span class="line">第六个栏位，表示创建日期。</span><br><span class="line">第七个栏位，表示文件名。</span><br></pre></td></tr></table></figure><h3 id="2、特殊位导致权限变化一般有以下两种"><a href="#2、特殊位导致权限变化一般有以下两种" class="headerlink" title="2、特殊位导致权限变化一般有以下两种"></a>2、特殊位导致权限变化一般有以下两种</h3><p>（1）特权位（s）<br>特权位只针对文件有效，并且只能添加在权限位的前三位和中间三位。一个可执行文件拥有 s 位并且在前三位时，即有 SUID 特殊权限(SETUID)时，当别的用户来执行此文件，使用的权限是此可执行文件属主权限；如果一个可执行文件拥有 s 位并且在中间三位时，即有 SGID 特殊权限(SETGID) 当别的用户来执行此文件，使用的权限是此可执行文件属组的权限。</p><p>例如，有普通用户 user1，当 user1 修改密码时，执行 passwd 命令时，passwd 文件权限为：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ll /usr/bin/passwd</span><br><span class="line">-rwsr-xr-x <span class="number">1</span> root root <span class="number">54256</span> May <span class="number">17</span>  <span class="number">2017</span> /usr/bin/passwd</span><br></pre></td></tr></table></figure><p>那么：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> user1 对于 /usr/bin/passwd 这个程序具有 x 权限，表示 user1 能执行 passwd</span><br><span class="line"><span class="number">2.</span> passwd 文件的所有者是 root </span><br><span class="line"><span class="number">3.</span> user1 执行 passwd 的过程中，会暂时获得 root 的权限</span><br><span class="line"><span class="number">4.</span> /etc/shadow 就可以被  user1 所执行的 passwd 所修改</span><br></pre></td></tr></table></figure><p>（2）粘帖位（t）<br>粘帖位只针对目录有效。有 t 位的目录，任何用户在有权限的情况下是可以创建文件和目录，就算是有权限删除别人的文件或目录也不能删除，同时互相也不能强制保存修改，自己只能删除自己创建的目录，用于一些共享上传的文件服务器场合。粘滞位只能占用后三位权限位。</p><p>例如 <code>/tmp</code> 目录，它的权限为：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ll /tmp -d</span><br><span class="line">drwxrwxrwt <span class="number">8</span> root root <span class="number">4096</span> Apr  <span class="number">6</span> <span class="number">15</span>:<span class="number">29</span> /tmp</span><br></pre></td></tr></table></figure><p>这表示任何人都可以在 /tmp 目录内新增、修改文件，但是只有该文件或目录的创建者与 root 用户能够删除自己的文件或目录。</p><p>注： s 位和 t 位都是占用 x 位，那么是否有 x 位，主要是看 s 或 t 的大小写来判别：大写，表示没有执行权限 x 位；小写，表示有执行权限 x 位。对于不可执行文件来说，SETUID 和 SETGID 没有任何意义。</p><h3 id="3、隐藏属性权限"><a href="#3、隐藏属性权限" class="headerlink" title="3、隐藏属性权限"></a>3、隐藏属性权限</h3><p>Linux 除了 9 个权限外，还有些隐藏属性，使用 lsattr 和 chattr 命令来查看和设置这些隐藏属性。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsattr -- listfile attributes on a Linux second extended file system</span><br><span class="line">chattr -- change file attributeson a Linux second extended file system</span><br></pre></td></tr></table></figure><p>chattr命令语法格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">chattr</span> <span class="selector-attr">[-RVf]</span> <span class="selector-attr">[-+=aAcCdDeijsStTu]</span> <span class="selector-attr">[-v version]</span> <span class="selector-tag">files</span>…</span><br></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-R :  递归处理所有的文件及子目录</span><br><span class="line">-V :  详细显示修改内容，并打印输出</span><br><span class="line"><span class="bullet">- </span>:  失效属性</span><br><span class="line">+ :  激活属性</span><br><span class="line"><span class="section">= :  指定属性</span></span><br></pre></td></tr></table></figure><p>属性:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">A</span>    <span class="string">no atime update, 不允许修改 atime</span></span><br><span class="line"><span class="attr">S</span>    <span class="string">synchronous updates, 实时写入文件，不使用缓冲区</span></span><br><span class="line"><span class="attr">D</span>    <span class="string">synchoronous directory updates, 实时同步到磁盘，针对目录设置</span></span><br><span class="line"><span class="attr">T</span>    <span class="string">top of directory hierarchy, Orlov 块分配器会将该目录视为目录层次结构的顶部</span></span><br><span class="line"><span class="attr">a</span>    <span class="string">append only, 只允许以 append 模式打开文件</span></span><br><span class="line"><span class="attr">c</span>    <span class="string">compressed, 自动压缩文件，读取时自动解压缩</span></span><br><span class="line"><span class="attr">d</span>    <span class="string">no dump, 当 dump 时，具有 d 属性的文件不加入 dump</span></span><br><span class="line"><span class="attr">e</span>    <span class="string">extent format, 在 ext 文件系统中，表示该文件使用区段(extents)映射磁盘上的块</span></span><br><span class="line"><span class="attr">i</span>    <span class="string">immuttbale, 不允许对文件执行删除，改名，增加软硬链接等操作，且无法写入</span></span><br><span class="line"><span class="attr">j</span>    <span class="string">data journalling, 写入记录 journal</span></span><br><span class="line"><span class="attr">s</span>    <span class="string">secure deletion, 可以安全删除，即硬盘空间被全部收回，不留痕迹</span></span><br><span class="line"><span class="attr">t</span>    <span class="string">no tail-merging, 与其它文件合并时末端不会存在局部块碎片</span></span><br><span class="line"><span class="attr">u</span>    <span class="string">undeletable, 与 s 相反，删除时数据还会存在磁盘中，可恢复</span></span><br></pre></td></tr></table></figure><h3 id="4、chmod-命令"><a href="#4、chmod-命令" class="headerlink" title="4、chmod 命令"></a>4、chmod 命令</h3><p>chmod 命令是非常重要的，用于改动文件或目录的访问权限。用户用他控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。</p><p>文字设定法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">chmod</span> <span class="selector-attr">[who]</span> <span class="selector-attr">[+-=]</span> <span class="selector-attr">[mode]</span> <span class="selector-tag">file</span>…</span><br></pre></td></tr></table></figure><p>命令中各选项的含义为：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">操作对象who可是下述字母中的任一个或他们的组合：</span></span><br><span class="line"><span class="attr">u</span> <span class="string">表示 “用户（user）”，即文件或目录的所有者</span></span><br><span class="line"><span class="attr">g</span> <span class="string">表示 “同组（group）用户”，即和文件属主有相同组 ID 的所有用户</span></span><br><span class="line"><span class="attr">o</span> <span class="string">表示 “其他（others）用户”</span></span><br><span class="line"><span class="attr">a</span> <span class="string">表示 “所有（all）用户”。此为系统默认值</span></span><br></pre></td></tr></table></figure><p>操作符号可以是：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ 添加某个权限。</span><br><span class="line"><span class="bullet">- </span>取消某个权限。</span><br><span class="line"><span class="section">= 赋予给定权限并取消其他所有权限（如果有的话）。</span></span><br></pre></td></tr></table></figure><p>设置 mode 所表示的权限可用下述字母的任意组合：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">r</span> <span class="string">可读</span></span><br><span class="line"><span class="attr">w</span> <span class="string">可写</span></span><br><span class="line"><span class="attr">x</span> <span class="string">可执行</span></span><br></pre></td></tr></table></figure><p>x 只有目标文件对某些用户是可执行的或该目标文件是目录时才追加 x 属性。</p><p>s 在文件执行时把进程的属主或组 ID 置为该文件的文件属主。方式<code>u+s</code>设置文件的用户 ID 位，g+s 设置组 ID 位。</p><p>文件可以是以空格分开的要改动权限的文件列表，支持通配符。在一个命令行中可给出多个权限方式，其间用逗号隔开。例如：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使同组和其他用户对文件有读权限</span></span><br><span class="line">chmod g+r, o+r <span class="built_in">file</span></span><br><span class="line">chmod go+r <span class="built_in">file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给文件加上 SETUID，并去掉同组和其他人的读权限</span></span><br><span class="line">chmod u+s, go-r <span class="built_in">file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给目录加上粘滞位（粘滞位只占用 others 权限位）</span></span><br><span class="line">chmod o+t <span class="built_in">directory</span></span><br></pre></td></tr></table></figure><h3 id="数字设定法"><a href="#数字设定法" class="headerlink" title="数字设定法"></a>数字设定法</h3><p>数字表示的属性的含义：0表示没有权限，1表示可执行权限，2表示可写权限，4表示可读权限。通过将三个值相加来得到要设置的权限。所以数字属性的格式应为3 个从0到7的八进制数，其顺序是（u）（g）（o）。例如，如果想让某个文件的属主有“读/写”二种权限，需要把4（可读）+2（可写）=6（读/写）。数字设定法的一般形式为：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [<span class="keyword">mode</span>] <span class="keyword">file</span>…</span><br></pre></td></tr></table></figure><p>例如，将一个文件的权限设置为属主可读可写，同组用户可读可写，其他用户可读，则命令为：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">664</span> file</span><br></pre></td></tr></table></figure><h3 id="5、chgrp和chown命令"><a href="#5、chgrp和chown命令" class="headerlink" title="5、chgrp和chown命令"></a>5、chgrp和chown命令</h3><p>chgrp 命令用于改动文件或目录所属的组。语法格式如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp [-R]<span class="built_in"> group </span>file…</span><br></pre></td></tr></table></figure><p>该命令改动指定文件所属的用户组。其中 group 可以是用户组 ID，也可以是 /etc/group 文件中用户组的组名。文件名是以空格分开的要改动属组的文件列表，支持通配符。如果用户不是该文件的属主或终极用户，则不能改动该文件的组。-R 参数递归式地改动指定目录及其下的所有子目录和文件的属组。例如改动 /opt/local /book/ 及其子目录下的所有文件的属组为 book：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp –R book <span class="regexp">/opt/</span>local/book</span><br></pre></td></tr></table></figure><p><code>chown</code> 命令用于更改某个文件或目录的属主和属组。这个命令也非常常用。例如 root 用户把自己的一个文件拷贝给用户 huoty，为了让用户 huoty 能够存取这个文件，root 用户应该把这个文件的属主设为 huoty，否则，用户 huoty 无法存取这个文件。语法格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">chown</span> <span class="selector-attr">[选项]</span> 用户或组 文件</span><br></pre></td></tr></table></figure><p>chown 将指定文件的拥有者改为指定的用户或组。用户能是用户名或用户ID。组能是组名或组ID。文件是以空格分开的要改动权限的文件列表，支持通配符。该命令的各选项含义如下：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-</span><span class="comment">c</span><span class="string">,</span> --<span class="comment">changes</span>          <span class="comment">显示更改的部分的信息</span></span><br><span class="line"><span class="comment"></span><span class="literal">-</span><span class="comment">f</span><span class="string">,</span> --<span class="comment">silent</span><span class="string">,</span> --<span class="comment">quiet</span>  <span class="comment">忽略错误信息</span></span><br><span class="line"><span class="comment"></span><span class="literal">-</span><span class="comment">R</span><span class="string">,</span> --<span class="comment">recursive</span>        <span class="comment">递归处理指定目录以及其子目录下的所有文件</span></span><br><span class="line"><span class="comment"></span>--<span class="comment">reference</span>            <span class="comment">参考指定文件或目录的用户和组</span></span><br><span class="line"><span class="comment"></span><span class="literal">-</span><span class="comment">h</span><span class="string">,</span> --<span class="comment">no</span><span class="literal">-</span><span class="comment">dereference</span>   <span class="comment">只对符号链接的文件本身做修改，而不更改其他任何相关文件</span></span><br><span class="line"><span class="comment"></span>--<span class="comment">dereference</span>          <span class="comment">作用于符号链接的指向，而不是链接文件本身，与</span> <span class="literal">-</span><span class="comment">h</span> <span class="comment">参数相反</span></span><br><span class="line"><span class="comment"></span><span class="literal">-</span><span class="comment">v</span><span class="string">,</span> --<span class="comment">verbose</span>          <span class="comment">显示详细的处理信息</span></span><br></pre></td></tr></table></figure><p>使用例示：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 改变文件的所有者：</span></span><br><span class="line"><span class="title">chown</span> www-<span class="class"><span class="keyword">data</span> test</span></span><br><span class="line"><span class="title">chown</span> www-<span class="class"><span class="keyword">data</span>: test</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 改变文件的所属组：</span></span><br><span class="line"><span class="title">chown</span> :www-<span class="class"><span class="keyword">data</span> test</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 同时改变文件的所有者和所属组：</span></span><br><span class="line"><span class="title">chown</span> huoty:huoty test</span><br></pre></td></tr></table></figure><h3 id="getfacl和setfacl命令"><a href="#getfacl和setfacl命令" class="headerlink" title="getfacl和setfacl命令"></a>getfacl和setfacl命令</h3><p><code>setfacl</code>命令可以用来细分 Linux 下的文件权限。chmod 命令可以把文件权限分为 u,g,o 三个组，而 setfacl 可以对每一个文件或目录设置更精确的文件权限。 即 setfacl 可以更精确的控制权限的分配，如，让某一个用户对某一个文件具有某种权限。这种独立于传统的 u,g,o 的 rwx 权限之外的具体权限设置叫 ACL（Access Control List）。ACL 可以针对单一用户、单一文件或目录来进行 r,w,x 的权限控制，对于需要特殊权限控制的情况是有用的。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">setfacl [-bkndRLP] &#123; -m|-M|-x|-X ... &#125; <span class="keyword">file</span> ...</span><br><span class="line">-m, --modify-acl        更改文件的访问控制列表</span><br><span class="line">-M, --modify-<span class="keyword">file</span>=<span class="keyword">file</span>  从文件读取访问控制列表条目更改</span><br><span class="line">-x, --remove=acl        根据文件中访问控制列表移除条目</span><br><span class="line">-X, --remove-<span class="keyword">file</span>=<span class="keyword">file</span>  从文件读取访问控制列表条目并删除</span><br><span class="line">-b, --remove-<span class="keyword">all</span>        删除所有扩展访问控制列表条目</span><br><span class="line">-k, --remove-default    移除默认访问控制列表</span><br><span class="line">    --<span class="keyword">set</span>=acl           设定替换当前的文件访问控制列表</span><br><span class="line">    --<span class="keyword">set</span>-file=file     从文件中读取访问控制列表条目设定</span><br><span class="line">    --mask              重新计算有效权限掩码</span><br><span class="line">-n, --no-mask           不重新计算有效权限掩码</span><br><span class="line">-d, --default           应用到默认访问控制列表的操作</span><br><span class="line">-R, --recursive         递归操作子目录</span><br><span class="line">-L, --logical           依照系统逻辑，跟随符号链接</span><br><span class="line">-P, --physical          依照自然逻辑，不跟随符号链接</span><br><span class="line">    --restore=file      恢复访问控制列表，和<span class="comment"> getfacl -R</span> 作用相反</span><br><span class="line">    --test              测试模式，并不真正修改访问控制列表属性</span><br><span class="line">-v, --version           显示版本并退出</span><br><span class="line">-h, --help              显示本帮助信息</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置用户 user1 对 test 文件的访问权限</span></span><br><span class="line"><span class="attribute">setfacl</span> -m u:user<span class="number">1</span>:r-x test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置用户组 group1 对 test/ 目录的访问权限</span></span><br><span class="line"><span class="attribute">setfacl</span> -m u:user<span class="number">1</span>:rwx test/</span><br></pre></td></tr></table></figure><p><code>getfacl</code> 用于获取文件的 acl 权限控制：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">getfacl [-aceEsRLPtpndvh] <span class="built_in">file</span> ...</span><br><span class="line">-<span class="keyword">a</span>, <span class="comment">--access            仅显示文件访问控制列表</span></span><br><span class="line">-d, <span class="comment">--default           仅显示默认的访问控制列表</span></span><br><span class="line">-c, <span class="comment">--omit-header       不显示注释表头</span></span><br><span class="line">-e, <span class="comment">--all-effective     显示所有的有效权限</span></span><br><span class="line">-E, <span class="comment">--no-effective      显示无效权限</span></span><br><span class="line">-s, <span class="comment">--skip-base         跳过只有基条目(base entries)的文件</span></span><br><span class="line">-R, <span class="comment">--recursive         递归显示子目录</span></span><br><span class="line">-L, <span class="comment">--logical           逻辑遍历(跟随符号链接)</span></span><br><span class="line">-P, <span class="comment">--physical          物理遍历(不跟随符号链接)</span></span><br><span class="line">-t, <span class="comment">--tabular           使用制表符分隔的输出格式</span></span><br><span class="line">-n, <span class="comment">--numeric           显示数字的用户/组标识</span></span><br><span class="line">-p, <span class="comment">--absolute-names    不去除路径前的 &#x27;/&#x27; 符号</span></span><br><span class="line">-v, <span class="comment">--version           显示版本并退出</span></span><br><span class="line">-h, <span class="comment">--help              显示本帮助信息</span></span><br></pre></td></tr></table></figure><p>使用示例<br>（1）管理 opt 目录<br>创建 readers 组，表示该组中的用户对文件有只读权限</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">groupadd readers</span></span><br></pre></td></tr></table></figure><p>创建 writers 组，表示改该组中的用户对文件用写权限</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">groupadd writers</span></span><br></pre></td></tr></table></figure><p>让 writers 组的用户对 /opt 目录可读写:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -m <span class="attr">g:</span><span class="attr">writers:</span>rwx /opt</span><br></pre></td></tr></table></figure><p>给 /opt 目录添加 粘帖权限位（t）:</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">chmod</span> o+t /<span class="meta">opt</span></span><br></pre></td></tr></table></figure><p>把需要的用户添加到 writers 组：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">usermod</span> -a -G writers user<span class="number">1</span></span><br></pre></td></tr></table></figure><p>把需要的用户添加到 readers 组：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">usermod</span> -a -G readers user<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue 插槽、具名插槽、作用域插槽</title>
      <link href="/2020/05/02/Vue%20%E6%8F%92%E6%A7%BD%E3%80%81%E5%85%B7%E5%90%8D%E6%8F%92%E6%A7%BD%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD/"/>
      <url>/2020/05/02/Vue%20%E6%8F%92%E6%A7%BD%E3%80%81%E5%85%B7%E5%90%8D%E6%8F%92%E6%A7%BD%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 2.6.0 中，我们为具名插槽和作用域插槽引入了一个新的统一的语法 (即 v-slot 指令)。<br>它取代了 slot 和 slot-scope 这两个目前已被废弃但未被移除且仍在文档中的特性。</p><p>1、编译的作用域</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">child-component</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-variable">&#123;&#123; <span class="name">message</span> &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里的message就是一个slot，它绑定的是父组件的数据，而不是child-component数据。<br>父子组件的模板内容分别在其相应的作用域内编译，因此slot分发的内容作用域是在父组件上的，但子组件内默认内容它的作用域是子组件本身。</p><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>在父组件里，插入在子组件标签内的所有内容将替代子组件的slot标签及它的内容，<code>&lt;slot&gt;&lt;/slot&gt;</code>里也可以设置默认值。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">alert-box</span>&gt;</span>有Bug发生<span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;alert-box&#x27;</span>,&#123;</span><br><span class="line">template:`</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Error:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">`</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">data:&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Vue单文件模块示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># SlotDemo.vue</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>这是默认值<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>子页面组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&#x27;SlotDemo&#x27;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># APP.vue(父组件)</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>引用testSlot组件的页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot-demo</span>&gt;</span>过渡...<span class="tag">&lt;/<span class="name">slot-demo</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> SlotDemo <span class="keyword">from</span> <span class="string">&#x27;./SlotDemo&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&#x27;APP&#x27;</span>,</span></span><br><span class="line">    components: &#123; SlotDemo &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/19-vue/01-slot.png"></p><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p>vue 2.6.0 以后的具名插槽相比 template上的 slot=’xxx’只需要改成v-slot : xxx 即可(值没有引号)。<br>给slot元素指定name后可以分发多个内容，书写v-slot:one 的形式时，可以简写为 #one。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;base-layout&#x27;</span>,&#123;</span><br><span class="line">template:`</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">`</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Vue单文件模块示例</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># SlotDemo.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="keyword">class</span>= &#x27;<span class="symbol">button</span>&#x27;&gt;</span><br><span class="line">      &lt;<span class="symbol">button</span>&gt; 默认按钮 &lt;/<span class="symbol">button</span>&gt;</span><br><span class="line">      &lt;<span class="symbol">slot</span> <span class="symbol">name</span>= &#x27;<span class="symbol">one</span>&#x27;&gt; 这就是默认值<span class="symbol">1</span>&lt;/<span class="symbol">slot</span>&gt;</span><br><span class="line">      &lt;<span class="symbol">slot</span> <span class="symbol">name</span>=&#x27;<span class="symbol">two</span>&#x27;&gt; 这就是默认值<span class="symbol">2</span> &lt;/<span class="symbol">slot</span>&gt;</span><br><span class="line">      &lt;<span class="symbol">slot</span> <span class="symbol">name</span>=&#x27;<span class="symbol">three</span>&#x27;&gt; 这就是默认值<span class="symbol">3</span> &lt;/<span class="symbol">slot</span>&gt;</span><br><span class="line">    &lt;/<span class="symbol">div</span>&gt;</span><br><span class="line">&lt;/<span class="symbol">template</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="symbol">script</span>&gt;</span><br><span class="line">  <span class="symbol">export</span> <span class="symbol">default</span> &#123;</span><br><span class="line">    name: <span class="string">&#x27;SlotDemo&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># APP.vue(父组件)</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SlotDemo</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:one</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是插入到one插槽的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:two</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是插入到two插槽的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SlotDemo</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> SlotDemo <span class="keyword">from</span> <span class="string">&#x27;./SlotDemo&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&#x27;APP&#x27;</span>,</span></span><br><span class="line">    components: &#123; SlotDemo &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>可以访问使用<code>子组件的数据</code>和<code>父组件传递的props值</code>，常用于当子组件循环或某一部分的DOM结构应该由外部传递进来的场景。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-for</span>=<span class="string">&quot;item of list&quot;</span> <span class="attr">:item</span>=<span class="string">item</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">这段代码的意思是child组件去做一个列表的循环，但是列表项中的每一项怎么显示，我并不关心，具体怎么显示，外部你来告诉我.</span><br></pre></td></tr></table></figure><p>1、slot-scope<br>绑定在 <code>&lt;slot&gt; </code>元素上的 attribute 被称为插槽 prop（此处info属性），slot-scope 声明了被接收的 prop 对象会作为 slotProps 变量存在于<code>&lt;template&gt;</code>作用域中。<br>slot-scope attribute 也可以直接用于非 <code>&lt;template&gt;</code> 元素 (包括组件)。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">fruit-list</span> <span class="attr">:list</span>=<span class="string">&#x27;list&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&#x27;slotProps&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">strong</span> <span class="attr">v-if</span>=<span class="string">&#x27;slotProps.info.id==3&#x27;</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          </span><span class="xquery">&#123;&#123;slotProps.info<span class="built_in">.name</span>&#125;</span><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">fruit-list</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> Vue.component(<span class="string">&#x27;fruit-list&#x27;</span>, &#123;</span><br><span class="line">      props: [<span class="string">&#x27;list&#x27;</span>],</span><br><span class="line">      template: `</span><br><span class="line">     <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&#x27;item.id&#x27;</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in list&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          </span><span class="xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">:info</span>=<span class="string">&#x27;item&#x27;</span>&gt;</span></span><span class="xquery">&#123;&#123;<span class="type">item</span><span class="built_in">.name</span>&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      `</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        list: [&#123;</span><br><span class="line">           <span class="built_in"> id</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">           <span class="built_in"> name</span>: <span class="string">&#x27;apple&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">           <span class="built_in"> id</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">           <span class="built_in"> name</span>: <span class="string">&#x27;orange&#x27;</span></span><br><span class="line">          &#125;, &#123;</span><br><span class="line">           <span class="built_in"> id</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">           <span class="built_in"> name</span>: <span class="string">&#x27;banana&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>Vue单文件模块示例</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># App.Vue(父组件)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这里是父组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--第一次使用：用flex展示数据--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tmpl&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;item in user.data&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--第二次使用：不使用其提供的数据, 作用域插槽退变成匿名插槽--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="xml">      我就是模板</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;child&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;这里是子组件&lt;/h3&gt;</span><br><span class="line">    <span class="comment">// 作用域插槽</span></span><br><span class="line">    &lt;slot :data=<span class="string">&quot;data&quot;</span>&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        data: [<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;wanwu&#x27;</span>,<span class="string">&#x27;zhaoliu&#x27;</span>,<span class="string">&#x27;tianqi&#x27;</span>,<span class="string">&#x27;xiaoba&#x27;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、v-slot</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># 父组件</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">current-user</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; <span class="name">slotProps.user.firstName</span> &#125;&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span></span><br><span class="line"><span class="xml">或者直接作用在 <span class="tag">&lt;<span class="name">current-user</span>&gt;</span> 上的写法：</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 显示调用默认插槽名字 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProp&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-variable">&#123;&#123; <span class="name">slotProp.user.firstName</span> &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"># 子组件</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-bind:user</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; <span class="name">user.lastName</span> &#125;&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">//定义内容</span></span><br><span class="line"><span class="xml">data()&#123;</span></span><br><span class="line"><span class="xml">  return&#123;</span></span><br><span class="line"><span class="xml">user:&#123;</span></span><br><span class="line"><span class="xml">  firstName:&quot;Fan&quot;,</span></span><br><span class="line"><span class="xml">  lastName:&quot;Jun&quot;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>Vue单文件模块示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;todo.id&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;todo&#x27;</span> <span class="attr">:todo</span>=<span class="string">&quot;todo&quot;</span>&gt;</span>默认值1<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;one&#x27;</span> <span class="attr">:value</span>=<span class="string">&quot;child1&quot;</span>&gt;</span>默认值2<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&#x27;SlotDemo&#x27;</span>,</span></span><br><span class="line">    data () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        child1: <span class="string">&#x27;data1&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      todos: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Array</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># APP.vue（父组件）</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">todo-list</span> <span class="attr">:todos</span>=<span class="string">&quot;todos&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:todo</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;slotProps.todo.isComplete&quot;</span>&gt;</span>✓<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">slotProps.todo.text</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:one</span>=<span class="string">&quot;slotone&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="template-variable">&#123;&#123; <span class="name">slotone.value</span> &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  import todoList from &#x27;./SlotDemo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">  export default &#123;</span></span><br><span class="line"><span class="xml">    data () &#123;</span></span><br><span class="line"><span class="xml">      return &#123;</span></span><br><span class="line"><span class="xml">        todos: [</span></span><br><span class="line"><span class="xml">          &#123;</span></span><br><span class="line"><span class="xml">            id: 0,</span></span><br><span class="line"><span class="xml">            text: &#x27;ziwei0&#x27;,</span></span><br><span class="line"><span class="xml">            isComplete: false</span></span><br><span class="line"><span class="xml">          &#125;,</span></span><br><span class="line"><span class="xml">          &#123;</span></span><br><span class="line"><span class="xml">            text: &#x27;ziwei1&#x27;,</span></span><br><span class="line"><span class="xml">            id: 1,</span></span><br><span class="line"><span class="xml">            isComplete: true</span></span><br><span class="line"><span class="xml">          &#125;,</span></span><br><span class="line"><span class="xml">          &#123;</span></span><br><span class="line"><span class="xml">            text: &#x27;ziwei2&#x27;,</span></span><br><span class="line"><span class="xml">            id: 2,</span></span><br><span class="line"><span class="xml">            isComplete: false</span></span><br><span class="line"><span class="xml">          &#125;,</span></span><br><span class="line"><span class="xml">          &#123;</span></span><br><span class="line"><span class="xml">            text: &#x27;ziwei3&#x27;,</span></span><br><span class="line"><span class="xml">            id: 3,</span></span><br><span class="line"><span class="xml">            isComplete: false</span></span><br><span class="line"><span class="xml">          &#125;</span></span><br><span class="line"><span class="xml">        ]</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    components: &#123;</span></span><br><span class="line"><span class="xml">      todoList</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.父组件传递todos数组给子组件<br>2.子组件通过props接受了数组数据<br>3.子组件拿到数组后v-for渲染列表，并且通过<code>&lt;slot :todo=&quot;todo&quot;&gt;</code>的方式，把数组内的每一个todo对象，传递给父组件<br>4.父组件通过<code>slot-scope=&quot;slotProps&quot;/v-slot:todo=&quot;slotProps&quot;</code>的方式，接收todo对象后可以通过slotProps.todo.xxx的方式来使用</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在用上v-slot之后，只需要考虑好下列2点<br>1.是否需要命名(匿名插槽、具名插槽)<br>2.父页面是否需要取存在子页面的数据(作用域插槽)</p>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 磁盘相关命令简介：df、du、hdparm</title>
      <link href="/2020/05/01/Linux%20%E7%A3%81%E7%9B%98%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E7%AE%80%E4%BB%8B%EF%BC%9Adf%E3%80%81du%E3%80%81hdparm/"/>
      <url>/2020/05/01/Linux%20%E7%A3%81%E7%9B%98%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E7%AE%80%E4%BB%8B%EF%BC%9Adf%E3%80%81du%E3%80%81hdparm/</url>
      
        <content type="html"><![CDATA[<h2 id="检查文件系统的磁盘受用情况：df"><a href="#检查文件系统的磁盘受用情况：df" class="headerlink" title="检查文件系统的磁盘受用情况：df"></a>检查文件系统的磁盘受用情况：df</h2><p>-a 显示所有文件系统的磁盘使用情况<br>-k 以k字节为单位显示。<br>-m 以M字节为单位显示。<br>-T 显示文件系统类型<br>-h 以K、M、G为单位显示，换算单位为1024<br>-h 以K、M、G为单位显示，换算单位为1000<br>例：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>df -TH</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">文件系统       <span class="number">1</span>K-blocks     已用     可用 已用% 挂载点</span><br><span class="line">/dev/sda8      <span class="number">100658932</span> <span class="number">11934424</span> <span class="number">83588212</span>   <span class="number">13</span>% /</span><br><span class="line">none                   <span class="number">4</span>        <span class="number">0</span>        <span class="number">4</span>    <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">udev             <span class="number">2026148</span>        <span class="number">4</span>  <span class="number">2026144</span>    <span class="number">1</span>% /dev</span><br><span class="line">tmpfs             <span class="number">407168</span>     <span class="number">1132</span>   <span class="number">406036</span>    <span class="number">1</span>% /run</span><br><span class="line">none                <span class="number">5120</span>        <span class="number">0</span>     <span class="number">5120</span>    <span class="number">0</span>% /run/lock</span><br><span class="line">none             <span class="number">2035828</span>     <span class="number">2528</span>  <span class="number">2033300</span>    <span class="number">1</span>% /run/shm</span><br><span class="line">none              <span class="number">102400</span>       <span class="number">24</span>   <span class="number">102376</span>    <span class="number">1</span>% /run/user</span><br></pre></td></tr></table></figure><h2 id="统计目录或者文件所占磁盘空间大小：du"><a href="#统计目录或者文件所占磁盘空间大小：du" class="headerlink" title="统计目录或者文件所占磁盘空间大小：du"></a>统计目录或者文件所占磁盘空间大小：du</h2><p>-a 显示所有指定目录<br>-b 以byte为单位显示<br>-m 以MB为单位显示<br>-s 仅显示总计，即当前目录或者文件实际所占用的空间<br>-h 以 K、M、G 为单位显示、提高可读性<br>例：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>du -hs temp 图片 下载 音乐 桌面</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.6</span>Gtemp</span><br><span class="line"><span class="number">980</span>K图片</span><br><span class="line"><span class="number">764</span>M下载</span><br><span class="line"><span class="number">75</span>M音乐</span><br><span class="line"><span class="number">80</span>K桌面</span><br></pre></td></tr></table></figure><h2 id="磁盘维护：hdparm"><a href="#磁盘维护：hdparm" class="headerlink" title="磁盘维护：hdparm"></a>磁盘维护：hdparm</h2><p>-a&lt;快取分区&gt; 设定读取文件时，预先存入块区的分区数，若不加上&lt;快取分区&gt;选项，则显示目前的设定。<br>-A&lt;0或1&gt; 启动或关闭读取文件时的快取功能。<br>-c&lt;I/O模式&gt; 设定IDE32位I/O模式。<br>-C 检测IDE硬盘的电源管理模式。<br>-d&lt;0或1&gt; 设定磁盘的DMA模式。<br>-f 将内存缓冲区的数据写入硬盘，并清楚缓冲区。<br>-g 显示硬盘的磁轨，磁头，磁区等参数。<br>-h 显示帮助。<br>-i 显示硬盘的硬件规格信息，这些信息是在开机时由硬盘本身所提供。<br>-I 直接读取硬盘所提供的硬件规格信息。<br>-k&lt;0或1&gt; 重设硬盘时，保留-dmu参数的设定。<br>-K&lt;0或1&gt; 重设硬盘时，保留-APSWXZ参数的设定。<br>-m&lt;磁区数&gt; 设定硬盘多重分区存取的分区数。<br>-n&lt;0或1&gt; 忽略硬盘写入时所发生的错误。<br>-p 设定硬盘的PIO模式。<br>-P&lt;磁区数&gt; 设定硬盘内部快取的分区数。<br>-q 在执行后续的参数时，不在屏幕上显示任何信息。<br>-r&lt;0或1&gt; 设定硬盘的读写模式。<br>-S&lt;时间&gt; 设定硬盘进入省电模式前的等待时间。<br>-t 评估硬盘的读取效率。<br>-T 评估硬盘快取的读取效率。<br>-u&lt;0或1&gt; 在硬盘存取时，允许其他中断要求同时执行。<br>-v 显示硬盘的相关设定。<br>-W&lt;0或1&gt; 设定硬盘的写入快取。<br>-X&lt;传输模式&gt; 设定硬盘的传输模式。<br>-y 使IDE硬盘进入省电模式。<br>-Y 使IDE硬盘进入睡眠模式。<br>-Z 关闭某些Seagate硬盘的自动省电功能。<br>例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo hdparm -T <span class="regexp">/dev/</span>sda8</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/dev/sda8:</span></span><br><span class="line"> <span class="attr">Timing cached reads:</span>   <span class="number">8466 </span><span class="string">MB</span> <span class="string">in</span>  <span class="number">2.00</span> <span class="string">seconds</span> <span class="string">=</span> <span class="number">4236.29 </span><span class="string">MB/sec</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql安装基于Centos7</title>
      <link href="/2020/05/01/Mysql%E5%AE%89%E8%A3%85%E5%9F%BA%E4%BA%8ECentos7/"/>
      <url>/2020/05/01/Mysql%E5%AE%89%E8%A3%85%E5%9F%BA%E4%BA%8ECentos7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>1、准备:安装MySQL Yum Repository，下载地址<a href="https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a><br>2、查看当前Linux(red hat)版本号:cat /proc/version<br>3、查看CentOs版本号: cat /etc/redhat-release<br>4、glibc升级:yum update glibc</p><h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><p>1、新开的云服务器，需要检测系统是否自带安装mysql</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">list</span> installed | <span class="keyword">grep</span> mysql</span><br></pre></td></tr></table></figure><p>2、如果发现有系统自带mysql，果断这么干</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yum</span> -y remove mysql-libs.x<span class="number">86</span>_<span class="number">64</span></span><br></pre></td></tr></table></figure><p>3、接着执行这句，这个rpm还不是mysql的安装文件，只是两个yum源文件，执行后，在/etc/yum.repos.d/ 目录下多出mysql-community-source.repo和mysql-community.repo</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rpm</span> -ivh mysql-community-release-el<span class="number">6</span>-<span class="number">5</span>.noarch.rpm</span><br></pre></td></tr></table></figure><p>4、查看是否已经有mysql可安装文件</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#yum repolist <span class="literal">all</span> | grep mysql</span><br></pre></td></tr></table></figure><p>5、选择要安装版本，比如mysql 5.7，修改/etc/yum.repos.d/mysql-community.repo文件，设置mysql 5.7下的enabled=1</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vim</span> /etc/yum.repos.d/mysql-community.repo(装哪个版本启用哪个,例:mysql<span class="number">5</span>.<span class="number">7</span>--enable=<span class="number">1</span>,其他设置成<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>6、再次查看可安装的版本</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist enabled <span class="string">| grep mysql</span></span><br></pre></td></tr></table></figure><p>7、安装过程可能出现镜像服务器连接失败, 重新执行安装命令即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> mysql-community-<span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>8、查看安装版本以及是否安装成功</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">list</span> installed | <span class="keyword">grep</span> mysql</span><br></pre></td></tr></table></figure><h2 id="启动配置"><a href="#启动配置" class="headerlink" title="启动配置"></a>启动配置</h2><p>1、修改mysql的配置文件（默认为/etc/my.cnf），在[mysqld]下添加一行 skip-grant-tables(跳过权限验证)<br>2、启动mysql: systemctl start mysqld<br>3、查看mysql版本: mysql -V<br>4、登录mysql: mysql<br>5、修改root密码: </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql 5.7 user表里的password字段改成了authentication_string,antspeed为本人所设密码</span></span><br><span class="line">update mysql.user <span class="builtin-name">set</span> authentication_string = password(<span class="string">&#x27;antspeed&#x27;</span>) where<span class="built_in"> user </span>= <span class="string">&#x27;root&#x27;</span><span class="keyword">and</span> host = <span class="string">&#x27;%&#x27;</span>; --修改对应的用户远程访问权限下的密码 mysql 5.7</span><br><span class="line">update mysql.user <span class="builtin-name">set</span> authentication_string = password(<span class="string">&#x27;antspeed&#x27;</span>) where<span class="built_in"> user </span>= <span class="string">&#x27;root&#x27;</span>; -- 修改指定用户下所有访问路径的密码 mysql 5.7</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">推荐方式：</span><br><span class="line">alter<span class="built_in"> user </span><span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;antspeed&#x27;</span>;</span><br><span class="line"><span class="builtin-name">ERROR</span> 1819 (HY000): Your password does <span class="keyword">not</span> satisfy the current<span class="built_in"> policy </span>requirements 出现如上错误，是因为密码太简单了。</span><br></pre></td></tr></table></figure><p>6、编辑/etc/my.cnf 将[mysqld]下的skip-grant-tables 调整为：<br>    # skip-grant-tables<br>    添加一行（mysql数据库忽略表名大小写）：<br>    lower_case_table_names=1<br>7、重启mysql: systemctl restart mysqld</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>1、创建用户<br>新创建的用户，默认情况下是没有任何权限的。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create<span class="built_in"> user </span><span class="string">&#x27;ant1@localhost&#x27;</span> identified by <span class="string">&#x27;Bnm,./321&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建可远程连接的用户</span></span><br><span class="line">create<span class="built_in"> user </span><span class="string">&#x27;ant1&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;Bnm,./321&#x27;</span>;</span><br></pre></td></tr></table></figure><p>2、分配权限<br>格式：grant 权限 on 数据库.* to 用户名@登录主机 identified by “密码”;　<br>all privileges：表示将所有权限授予给用户。也可指定具体的权限，如：SELECT、CREATE、DROP等。<br>on：表示这些权限对哪些数据库和表生效，格式：数据库名.表名，这里写“*”表示所有数据库，所有表。如果我要指定将权限应用到test库的user表中，可以这么写：test.user<br>to：将权限授予哪个用户。格式：”用户名”@”登录IP或域名”。%表示没有限制，在任何主机都可以登录。比如：”yangxin”@”192.168.0.%”，表示yangxin这个用户只能在192.168.0IP段登录<br>identified by：指定用户的登录密码<br>with grant option：表示允许用户将自己的权限授权给其它用户</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">create</span> <span class="keyword">on</span> antspeed.* <span class="keyword">to</span> pig@&quot;%&quot; identified <span class="keyword">by</span> <span class="string">&#x27;Antspeed1/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 带有<span class="keyword">WITH</span> <span class="keyword">ADMIN</span> <span class="keyword">OPTION</span>的权限授予方式，可传递授权。</span><br><span class="line">mysql&gt;  <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.*(数据库) <span class="keyword">TO</span> 用户@&quot;特定ip&quot;（示例：root@%） IDENTIFIED <span class="keyword">BY</span> &quot;youpassword&quot; <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line">mysql&gt;  flush <span class="keyword">privileges</span>;</span><br><span class="line">mysql&gt;  <span class="keyword">exit</span>;</span><br></pre></td></tr></table></figure><p>3、权限查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>(); <span class="comment"># 查看当前用户 如&#x27;pig&#x27;@&#x27;%&#x27;</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">grants</span> <span class="keyword">for</span> <span class="string">&#x27;pig&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>4、用户权限列表</p><table><thead><tr><th>Privilege</th><th>Grant Table Column</th><th>Context</th></tr></thead><tbody><tr><td>ALL [PRIVILEGES]</td><td>Synonym for “all privileges”</td><td>Server administration</td></tr><tr><td>ALTER</td><td>Alter_priv</td><td>Tables</td></tr><tr><td>ALTER ROUTINE</td><td>Alter_routine_priv</td><td>Stored routines</td></tr><tr><td>CREATE</td><td>Create_priv</td><td>Databases, tables, or indexes</td></tr><tr><td>CREATE ROUTINE</td><td>Create_routine_priv</td><td>Stored routines</td></tr><tr><td>CREATE TABLESPACE</td><td>Create_tablespace_priv</td><td>Server administration</td></tr><tr><td>CREATE TEMPORARY TABLES</td><td>Create_tmp_table_priv</td><td>Tables</td></tr><tr><td>CREATE USER</td><td>Create_user_priv</td><td>Server administration</td></tr><tr><td>CREATE VIEW</td><td>Create_view_priv</td><td>Views</td></tr><tr><td>DELETE</td><td>Delete_priv</td><td>Tables</td></tr><tr><td>DROP</td><td>Drop_priv</td><td>Databases, tables, or views</td></tr><tr><td>EVENT</td><td>Event_priv</td><td>Databases</td></tr><tr><td>EXECUTE</td><td>Execute_priv</td><td>Stored routines</td></tr><tr><td>FILE</td><td>File_priv</td><td>File access on server host</td></tr><tr><td>GRANT OPTION</td><td>Grant_priv</td><td>Databases, tables, or stored routines</td></tr><tr><td>INDEX</td><td>Index_priv</td><td>Tables</td></tr><tr><td>INSERT</td><td>Insert_priv</td><td>Tables or columns</td></tr><tr><td>LOCK TABLES</td><td>Lock_tables_priv</td><td>Databases</td></tr><tr><td>PROCESS</td><td>Process_priv</td><td>Server administration</td></tr><tr><td>PROXY</td><td>See proxies_priv table</td><td>Server administration</td></tr><tr><td>REFERENCES</td><td>References_priv</td><td>Databases or tables</td></tr><tr><td>RELOAD</td><td>Reload_priv</td><td>Server administration</td></tr><tr><td>REPLICATION CLIENT</td><td>Repl_client_priv</td><td>Server administration</td></tr><tr><td>REPLICATION SLAVE</td><td>Repl_slave_priv</td><td>Server administration</td></tr><tr><td>SELECT</td><td>Select_priv</td><td>Tables or columns</td></tr><tr><td>SHOW DATABASES</td><td>Show_db_priv</td><td>Server administration</td></tr><tr><td>SHOW VIEW</td><td>Show_view_priv</td><td>Views</td></tr><tr><td>SHUTDOWN</td><td>Shutdown_priv</td><td>Server administration</td></tr><tr><td>SUPER</td><td>Super_priv</td><td>Server administration</td></tr><tr><td>TRIGGER</td><td>Trigger_priv</td><td>Tables</td></tr><tr><td>UPDATE</td><td>Update_priv</td><td>Tables or columns</td></tr><tr><td>USAGE</td><td>Synonym for “no privileges”</td><td>Server administration</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab私服基于centos7搭建</title>
      <link href="/2020/03/18/Gitlab%20%E7%A7%81%E6%9C%8D%E5%9F%BA%E4%BA%8Ecentos7%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/03/18/Gitlab%20%E7%A7%81%E6%9C%8D%E5%9F%BA%E4%BA%8Ecentos7%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>腾讯云服务器：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">操作系统CentOS <span class="number">7.6</span> <span class="number">64</span>位</span><br><span class="line">CPU<span class="number">1</span>核</span><br><span class="line">内存<span class="number">2</span>GB</span><br><span class="line">公网带宽<span class="number">1</span>Mbps</span><br></pre></td></tr></table></figure><p>gitlab安装包:<br><a href="https://mirror.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/">https://mirror.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/</a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1、安装基础依赖</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装技术依赖</span></span><br><span class="line">sudo yum <span class="keyword">install</span> -y curl policycoreutils-python openssh-<span class="keyword">server</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动ssh服务&amp;设置为开机启动</span></span><br><span class="line">sudo systemctl <span class="keyword">enable</span> sshd</span><br><span class="line">sudo systemctl <span class="keyword">start</span> sshd</span><br></pre></td></tr></table></figure><p>2、配置邮件服务器<br>详见Google【Gitlab配置SMTP方式发送邮件】</p><p>3、安装GitLab社区版</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rpm</span> -ivh gitlab-ce-<span class="number">10</span>.<span class="number">0</span>.<span class="number">0</span>-ce.<span class="number">0</span>.el<span class="number">7</span>.x<span class="number">86</span>_<span class="number">64</span>.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line"><span class="attribute">sudo</span> vi /etc/gitlab/gitlab.rb</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置首页地址（大约在第15行）</span></span><br><span class="line"><span class="attribute">external_url</span> &#x27;http://localhost:<span class="number">8888</span>&#x27;</span><br></pre></td></tr></table></figure><p>4、启动并访问GitLab</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 初始化gitlab</span></span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line"><span class="meta"># 停止命令：</span></span><br><span class="line">gitlab-ctl stop</span><br><span class="line"></span><br><span class="line"><span class="meta"># 重启命令：</span></span><br><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure><p>5、目录结构</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/opt/gi</span>tlab/ 　　<span class="comment">## 主目录 </span></span><br><span class="line"><span class="regexp">/etc/gi</span>tlab/ 　　<span class="comment">## 放置配置文件 </span></span><br><span class="line"><span class="regexp">/var/</span>opt<span class="regexp">/gitlab/</span> 　　<span class="comment">## 各个组件 </span></span><br><span class="line"><span class="regexp">/var/</span>log<span class="regexp">/gitlab/</span> 　　<span class="comment">## 放置日志文件</span></span><br><span class="line"><span class="regexp">/var/</span>opt<span class="regexp">/gitlab/gi</span>t-data/repositories 　　<span class="comment">##数据库的地址　　</span></span><br><span class="line"><span class="regexp">/var/</span>opt<span class="regexp">/gitlab/</span>postgresql/data 　　<span class="comment">#gitlab组和项目的地址</span></span><br></pre></td></tr></table></figure><h2 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h2><p>注意：启动后访问若出现502，可能是内存的原因，Gitlab非常消耗内存（本例内存2g）<br><a href="https://fishmoon.xyz/2020/03/17/Linux%E6%96%B0%E5%BB%BA%E5%92%8C%E5%A2%9E%E5%8A%A0swap%E5%88%86%E5%8C%BA/">解决方案</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux新建和增加swap分区</title>
      <link href="/2020/03/17/Linux%20%E6%96%B0%E5%BB%BA%E5%92%8C%E5%A2%9E%E5%8A%A0swap%E5%88%86%E5%8C%BA/"/>
      <url>/2020/03/17/Linux%20%E6%96%B0%E5%BB%BA%E5%92%8C%E5%A2%9E%E5%8A%A0swap%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>swap分区在系统物理内存不够用的时候，把物理内存中的一部分空间释放出来，以供当前运行的程序使用。<br>被释放的空间来自一些很长时间无操作的程序，这些被释放的空间被临时保存到swap分区中，等到那些程序要运行时，再从swap分区中恢复保存的数据到内存中。</p><h2 id="文件作为swap分区"><a href="#文件作为swap分区" class="headerlink" title="文件作为swap分区"></a>文件作为swap分区</h2><p>1、查看当前系统swap分区</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/proc/</span>swaps</span><br><span class="line">或</span><br><span class="line">free -m</span><br></pre></td></tr></table></figure><p>2、创建要作为swap分区的文件<br>bs*count=文件大小，如下即是4GB</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="attribute">if</span>=/dev/zero <span class="attribute">of</span>=/mnt/swap <span class="attribute">bs</span>=512 <span class="attribute">count</span>=8388616</span><br></pre></td></tr></table></figure><p>3、将新建的文件做成swap分区</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkswap <span class="regexp">/data/</span>swap</span><br></pre></td></tr></table></figure><p>4、查看内核参数</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vm.swappiness中的数值是否为<span class="number">0</span>，如果为<span class="number">0</span>则根据实际需要调整成<span class="number">60</span></span><br><span class="line">查看参数：cat /proc/sys/vm/swappiness</span><br><span class="line">设置参数：sysctl -w vm.swappiness=<span class="number">60</span></span><br></pre></td></tr></table></figure><p>5、启用 swap 分区</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swapon <span class="regexp">/data/</span>swap</span><br><span class="line">echo “<span class="regexp">/data/</span>swap swap swap defaults <span class="number">0</span> <span class="number">0</span>” &gt;&gt; <span class="regexp">/etc/</span>fstab</span><br></pre></td></tr></table></figure><p>6、关闭swap分区</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swapoff <span class="regexp">/data/</span>swap</span><br><span class="line">swapoff -a &gt;<span class="regexp">/dev/</span><span class="keyword">null</span></span><br></pre></td></tr></table></figure><h2 id="磁盘分区作为swap分区"><a href="#磁盘分区作为swap分区" class="headerlink" title="磁盘分区作为swap分区"></a>磁盘分区作为swap分区</h2><ol><li><p>以root身份进入控制台（登录系统），输入 swapoff -a  #停止所有的swap分区</p></li><li><p>用fdisk命令（例：#fdisk /dev/sdb）对磁盘进行分区，添加swap分区，新建分区，在fdisk中用“t”命令将新添的分区id改为82（Linux swap类型），最后用w将操作实际写入硬盘（没用w之前的操作是无效的）。</p></li><li><p>mkswap /dev/sdb2 #格式化swap分区，这里的sdb2要看您加完后p命令显示的实际分区设备名</p></li><li><p>swapon /dev/sdb2 #启动新的swap分区</p></li><li><p>系统启动时自动启用交换分区，可以编辑/etc/fstab，加入下面一行</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/sdb2 swap swap defaults <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab与Gitflow规范</title>
      <link href="/2020/03/17/Gitlab%20%E4%B8%8EGitflow%E8%A7%84%E8%8C%83/"/>
      <url>/2020/03/17/Gitlab%20%E4%B8%8EGitflow%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h2 id="Git-flow工作流"><a href="#Git-flow工作流" class="headerlink" title="Git flow工作流"></a>Git flow工作流</h2><p>GitHub工作流十分简单，只有两个分支master 和 feature。<br>提交方式：<br>1、直接在feature分支开发，每个人在commit之前pull（git fetch + git merge）一下新的feature的代码。<br>2、有冲突一次性解决后 add. commit  push。</p><hr><p>Gitflow工作流定义了一个围绕项目发布的严格分支模型。<br>SourceTree天然支持该功能，点击Git-flow会自动化进行相关操作，最明显的变化是自动增加了一个dev分支，将新创建的develop分支推送到远端仓库。<br>开启后项目就回到了develop分支，当需要新增加功能，发布版本时，创建补丁修复bug时，分别有对应的feature,release,hotfix前缀这样的分支；当开发完成一些模块时，就可以回去master分支合并。<br><img src="/images/4-git/9-sourceTree.png"></p><hr><p>1、历史分支<br>master分支存储了正式发布的历史，而develop分支作为功能的集成分支。</p><p>2、功能分支（feature）<br>派生于develop用于承接具体需求开发，每个新功能位于一个自己的分支。当新功能完成时，合并回develop分支。</p><p>3、发布分支（release）<br>派生于develop用于完成发布准备，用于Bug修复、文档生成和其他面向发布的任务。发布完成后，应该合并到develop和master分支并打Tag。</p><p>4、维护分支（hotfix）<br>直接从master分支fork出来的分支，修复完成后，马上合并回master分支和develop分支。</p><p>跟历史分支相反，这三类分支都是短期分支，针对他们的工作内容完成后，一般都要进行删除。<br><img src="/images/4-git/10-gitflow.png"></p><h2 id="GitLab规范简介"><a href="#GitLab规范简介" class="headerlink" title="GitLab规范简介"></a>GitLab规范简介</h2><p>1、Gitlab定义了以下几个角色:<br>Guest - 访客<br>Reporter - 报告者; 可以理解为测试员、产品经理等，一般负责提交issue等<br>Developer - 开发者; 负责开发<br>Master - 主人; 一般是组长，负责对Master分支进行维护<br>Owner - 拥有者; 一般是项目经理</p><p>下表完整的列出了Guest,Reporter,Developer,Master,Owner对应的权限。<br><img src="/images/4-git/11-gitlabRights.png"></p><p>2、分支使用</p><ul><li>每个Git项目固定含有上述所有分支类型。主分支master和develop是保护分支，只能进行合并请求，均不可直接提交代码。</li><li>功能需求或常规Bug修复，请从develop拉取feature分支；线上紧急问题修复，请从master拉取hotfix分支。</li></ul><p>3、多人协作</p><ul><li>使用fork<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、项目负责人在gitlab上新建一个项目，并分享URL给开发人员</span><br><span class="line"><span class="number">2</span>、开发人员在负责人的gitlab项目页面上点击“fork”按钮，将此项目fork到自己的gitlab上，这相当于是从负责人那拷贝了一份项目副本，无论开发人员如何修改代码都不会影响负责人那master分支上的代码</span><br><span class="line"><span class="number">3</span>、然后开发人员可以根据自己的项目分工，像对待普通项目一样做clone、add、commit、push等操作</span><br><span class="line"><span class="number">4</span>、如果开发人员人为一个小模块做好了，可以点击“pull request”按钮，向负责人发送代码合并请求，要合并的代码文件也会以列表的形式同时发送给负责人，此时负责人会看到开发人员的请求，经审核如果代码没问题则会合并模块，并向开发人员发送确认合并的通知</span><br></pre></td></tr></table></figure></li><li>不用fork<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 关闭注册功能（管理员权限）</span><br><span class="line"><span class="number">2.</span> 管理员添加用户(给项目负责人创建组的权限)， 并给每个用户添加一个 ssh 密钥(密钥可以管理员这边生成，也可以用户自己生成发给管理员)。每个用户一个密钥对（不同的密钥在 push 等操作的时候权限是不同的,你用的哪个用户的密钥连接，你就有哪个用户的权限, ssh密钥会默认添加到 git用户的authorized_keys文件中.</span><br><span class="line"><span class="number">3.</span> 项目负责人 创建项目,  初始化项目，使项目拥有master分支，开启分支保护(master分支是没人开启的，只有项目管理人可以直接操作master分支)。给该项目添加成员分配权限(一般是开发者权限)，并且给每个成员创建一个分支。 也可以不给项目添加成员而是在创建项目的时候选择组。</span><br><span class="line"><span class="number">4.</span> 开发者克隆版本库，在自己的分支上开发，提交等操作。开发者想要将自己的分支合并到master分支，需要登录gitlab发起合并请求，负责人审核后处理合并请求. </span><br></pre></td></tr></table></figure></li></ul><p>4、如何更新已经fork的代码</p><ul><li>首先要先确定一下是否建立了主repo的远程源：<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git remote -v</span></span><br></pre></td></tr></table></figure></li><li>如果里面只能看到你自己的两个源(fetch 和 push)，那就需要添加主repo的源：<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream https:<span class="regexp">//gi</span>thub.com/被fork的仓库.git</span><br><span class="line">git remote -v <span class="regexp">//</span>能看到upstream了</span><br></pre></td></tr></table></figure></li><li>fetch源分支的新版本到本地<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git fetch upstream</span></span><br></pre></td></tr></table></figure></li><li>合并本地两个版本的代码：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">merge</span> upstream/<span class="keyword">master</span></span><br></pre></td></tr></table></figure></li><li>将在本地合并后的代码push到自己的github上去，以更新github上fork的仓库<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> git fetch origin namedev_branch:namedev_branch</span><br><span class="line"><span class="regexp">//</span> 拉取远程的一个叫namedev_branch的分支，并在本地创建一个叫namedev_branch的分支和远程的分支匹配</span><br></pre></td></tr></table></figure></li></ul><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><h3 id="合并场景"><a href="#合并场景" class="headerlink" title="合并场景"></a>合并场景</h3><ul><li><p>手动合并：<br>1、文件合并（修改同一文件的同一区域）<br>2、树冲突(不同成员对同一文件重命名)</p></li><li><p>智能合并：<br>1、多成员修改不同文件<br>2、多成员修改相同文件不同区域</p></li></ul><h3 id="远程与本地冲突解决"><a href="#远程与本地冲突解决" class="headerlink" title="远程与本地冲突解决"></a>远程与本地冲突解决</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="keyword">master</span>   <span class="title">--&gt;双击本地master</span>分支，切换过程需要等一小会</span><br><span class="line">git fetch origin   --&gt;点击获取（fetch）按钮，这时候拉取（pull）按钮就会提示有多少更新</span><br><span class="line">git merge origin/<span class="keyword">master</span>  <span class="title">--&gt;这一步换成（pull</span>）按钮操作，拉取更新到本地，此时需保证本地dev的更新都已经提交</span><br><span class="line">git checkout dev  --&gt;双击本地dev开发分支</span><br><span class="line">git merge <span class="keyword">master</span>  <span class="title">--&gt;在本地dev</span>分支单击右键，选择将本地<span class="literal">master</span>分支合并到当前分支</span><br></pre></td></tr></table></figure><h3 id="误在主分支开发"><a href="#误在主分支开发" class="headerlink" title="误在主分支开发"></a>误在主分支开发</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash  <span class="regexp">//</span>在主分支使用该命令，保存正在进行的操作，恢复master分支的状态</span><br><span class="line">git checkout dev  <span class="regexp">//</span>切换到自己的本地开发分支</span><br><span class="line">git stash pop  <span class="regexp">//</span>释放暂存的工作到当前分支</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/d46da933c180">推荐文章</a>()</p>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 界面化操作-sourceTree</title>
      <link href="/2020/03/16/Git%20%E7%95%8C%E9%9D%A2%E5%8C%96%E6%93%8D%E4%BD%9C-sourceTree/"/>
      <url>/2020/03/16/Git%20%E7%95%8C%E9%9D%A2%E5%8C%96%E6%93%8D%E4%BD%9C-sourceTree/</url>
      
        <content type="html"><![CDATA[<h2 id="sourceTree实例演示"><a href="#sourceTree实例演示" class="headerlink" title="sourceTree实例演示"></a>sourceTree实例演示</h2><p>1、构造冲突<br>（1）修改了某文件某行内容并且提交推送到远程库上；<br>（2）另一个工作目录下也修改该文件该行内容，并且也要推送到远程库上去。<br>推送的时候出现如下问题：提示远程已经有更新了，本地版本太低，让我们先pull拉取最新的代码然后再次推送。</p><p>2、解决冲突<br> (1)在本地副本的已暂存文件 —-&gt; 右键 —-&gt; 解决冲突 —-&gt; 打开外部合并工具。<br> (2)接着关闭Beynod Compare工具，冲突感叹号没有了，并且会有一个 .orig 的文件生成。<br> (3)接着选中.orig文件，单击右键 —-&gt; 移除。</p><p><img src="/images/4-git/5-solveconflict.png"></p><p><strong>补充说明</strong>：<br>当清理文件并得到最终代码后，剩下的工作就是将这个结果保存起来，并且马上退出这个合并工具，Git 会在后台对那个文件自动地执行 “git add” 命令，这也标志着冲突已经解决了。<br>如果你不使用合并工具，而是手动在文本编辑器中清理这些冲突，你必须手动地将文件标记为已解决状态（通过执行命令 “git add filename”）。<br>最终，当所有的冲突被解决后，你必须通过一个正常的提交操作来完成这个清理合并冲突的工作。</p><h2 id="Beyond-Compare"><a href="#Beyond-Compare" class="headerlink" title="Beyond Compare"></a>Beyond Compare</h2><p>1、注册码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">w4G</span>-in<span class="number">5</span>u<span class="number">3</span>SH<span class="number">75</span>RoB<span class="number">3</span>VZIX<span class="number">8</span>htiZgw<span class="number">4</span>ELilwvPcHAIQWfwfXv<span class="number">5</span>n<span class="number">0</span>IHDp<span class="number">5</span>hv</span><br><span class="line"><span class="attribute">1BM3</span>+H<span class="number">1</span>XygMtiE<span class="number">0</span>-JBgacjE<span class="number">9</span>tz<span class="number">33</span>sIh<span class="number">542</span>EmsGs<span class="number">1</span>yg<span class="number">638</span>UxVfmWqNLqu-</span><br><span class="line"><span class="attribute">Zw91XxNEiZF7DC7</span>-iV<span class="number">1</span>XbSfsgxI<span class="number">8</span>Tvqr-ZMTxlGCJU+<span class="number">2</span>YLveAc-YXs<span class="number">8</span>ci</span><br><span class="line"><span class="attribute">RTtssts7leEbJ979H5v</span>+G<span class="number">0</span>sw-FwP<span class="number">9</span>bjvE<span class="number">4</span>GCJ<span class="number">8</span>oj+jtlp<span class="number">7</span>wFmpVdzovEh</span><br><span class="line"><span class="attribute">v5Vg3dMqhqTiQHKfmHjYbb0o5OUxq0jOWxg5NKim9dhCVF</span>+avO<span class="number">6</span>mDeRNc</span><br><span class="line"><span class="attribute">OYpl7BatIcd6tsiwdhHKRnyGshyVEjSgRCRY11IgyvdRPnbW8UOVULuTE</span></span><br></pre></td></tr></table></figure><p>2、永久使用需删除该目录文件</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="tag">\<span class="name">Users</span></span><span class="tag">\<span class="name">*</span></span>**<span class="tag">\<span class="name">AppData</span></span><span class="tag">\<span class="name">Roaming</span></span><span class="tag">\<span class="name">Scooter</span></span> Software<span class="tag">\<span class="name">Beyond</span></span> Compare 4</span><br></pre></td></tr></table></figure><h2 id="Git配置difftool和mergetool"><a href="#Git配置difftool和mergetool" class="headerlink" title="Git配置difftool和mergetool"></a>Git配置difftool和mergetool</h2><p>1、命令行配置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#difftool 配置</span></span><br><span class="line">git<span class="built_in"> config </span>--global diff.tool bc4</span><br><span class="line">git<span class="built_in"> config </span>--global difftool.bc4.cmd <span class="string">&quot;\&quot;c:/program files (x86)/beyond compare 4/bcomp.exe\&quot; \&quot;<span class="variable">$LOCAL</span>\&quot; \&quot;<span class="variable">$REMOTE</span>\&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mergeftool 配置</span></span><br><span class="line">git<span class="built_in"> config </span>--global merge.tool bc4</span><br><span class="line">git<span class="built_in"> config </span>--global mergetool.bc4.cmd  <span class="string">&quot;\&quot;c:/program files (x86)/beyond compare 4/bcomp.exe\&quot; \&quot;<span class="variable">$LOCAL</span>\&quot; \&quot;<span class="variable">$REMOTE</span>\&quot; \&quot;<span class="variable">$BASE</span>\&quot; \&quot;<span class="variable">$MERGED</span>\&quot;&quot;</span></span><br><span class="line">git<span class="built_in"> config </span>--global mergetool.bc4.trustExitCode <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#让git mergetool不再生成备份文件（*.orig）</span></span><br><span class="line">git<span class="built_in"> config </span>--global mergetool.keepBackup <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>2、文件配置<br><img src="/images/4-git/6-gitconfig.png"></p>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-Rebase彻底搞懂</title>
      <link href="/2020/03/16/Git-Rebase%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82%20/"/>
      <url>/2020/03/16/Git-Rebase%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82%20/</url>
      
        <content type="html"><![CDATA[<h2 id="rebase原理"><a href="#rebase原理" class="headerlink" title="rebase原理"></a>rebase原理</h2><p>先找到两个分支最近的共同祖先，根据当前分支的提交历史生成一系列补丁文件，然后以基底分支最后一个提交为新的提交起始点，应用之前生成的补丁文件，最后形成一个新的合并提交。</p><h2 id="Merge和Rebase"><a href="#Merge和Rebase" class="headerlink" title="Merge和Rebase"></a>Merge和Rebase</h2><p>1、把A分支基于B分支做rebase，以便把B分支合入到A分支</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase B分支 <span class="keyword">A</span>分支</span><br></pre></td></tr></table></figure><p>2、图解<br><img src="/images/4-git/7-Merge&Rebase.png" alt="对比图"></p><p>3、区别</p><ul><li>git merge是将两个分支做一个三方合并(如果不是直接上游分支)</li><li>git rebase则会将当前分支相对于基底分支的所有提交生成一系列补丁，然后放到基底分支的顶端，从而使得提交记录变成一条直线</li></ul><p>4、git rebase –continue/abort/skip分别表示:继续执行变基操作、终止变基、跳过某一文件继续进行。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p><strong>一、分支合并</strong><br>假设当前本地仓库提交历史如下，且处于topic分支:</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">A</span> <span class="comment">topic</span></span><br><span class="line"><span class="comment"></span>    <span class="comment">/</span></span><br><span class="line"><span class="comment">D</span>--<span class="literal">-</span><span class="comment">E</span>--<span class="literal">-</span><span class="comment">F</span> <span class="comment">master</span></span><br></pre></td></tr></table></figure><p>1、git rebase将两个分支的提交合并到master分支的顶端</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase <span class="literal">master</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ git rebase <span class="keyword">master</span> <span class="title">topic</span></span><br></pre></td></tr></table></figure><p>此时，提交历史将变为：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">A&#x27;</span> <span class="comment">topic</span></span><br><span class="line"><span class="comment">/</span></span><br><span class="line"><span class="comment">D</span>--<span class="literal">-</span><span class="comment">E</span>--<span class="literal">-</span><span class="comment">F</span> <span class="comment">master</span></span><br></pre></td></tr></table></figure><p>2、原理解析</p><ul><li>git 会把 topic 分支里面的每个 commit 取消掉，把上面的操作临时保存成 patch 文件，存在 .git/rebase 目录下；</li><li>然后，把 topic 分支更新到最新的 master 分支；</li><li>最后，把上面保存的 patch 文件应用到 topic 分支上；</li></ul><p>3、在 rebase 的过程中，也许会出现冲突 conflict，在这种情况，git 会停止 rebase 并会让你去解决冲突。在解决完冲突后，用 git add 命令去更新这些内容。</p><p>4、git rebase –continue 继续应用余下的 patch 补丁文件。</p><p><strong>二、合并提交纪录</strong><br><code>git rebase -i &lt;commitid&gt;</code>可以进行交互式变基，<br>git会将<code>&lt;commitid&gt;-HEAD</code>之间的提交列在一个变基脚本中，<br>每笔提交根据用户设置的命令，会进行不同的操作，如修改提交信息、移除指定提交、合并两个提交为一个(压缩提交)、拆分提交等。</p><p>1、合并最近的2次提交记录</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> rebase -i HEAD~<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">commit</span> <span class="number">2</span>d<span class="number">7</span>b<span class="number">923</span>ab<span class="number">1</span>d<span class="number">86</span>b<span class="number">1</span>fa<span class="number">26</span>ae<span class="number">6495</span>c<span class="number">35</span>f<span class="number">8</span>d<span class="number">2</span>ecdfff<span class="number">76</span> (HEAD -&gt; dev)</span><br><span class="line"><span class="attribute">Author</span>: “leolin<span class="number">9527</span> &lt;“<span class="number">963522074</span>@qq.com&gt;</span><br><span class="line"><span class="attribute">Date</span>:   Wed Apr <span class="number">8</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">09</span> <span class="number">2020</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">modify</span> bbb</span><br><span class="line"></span><br><span class="line"><span class="attribute">commit</span> <span class="number">090</span>d<span class="number">87337</span>cf<span class="number">59</span>a<span class="number">4</span>b<span class="number">185241</span>f<span class="number">71</span>d<span class="number">7</span>d<span class="number">69</span>f<span class="number">2</span>f<span class="number">26</span>ee<span class="number">443</span></span><br><span class="line"><span class="attribute">Author</span>: “leolin<span class="number">9527</span> &lt;“<span class="number">963522074</span>@qq.com&gt;</span><br><span class="line"><span class="attribute">Date</span>:   Wed Apr <span class="number">8</span> <span class="number">21</span>:<span class="number">24</span>:<span class="number">59</span> <span class="number">2020</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">create</span> aaa</span><br></pre></td></tr></table></figure><p>2、会自动进入 vim 编辑模式</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pick 090d873 create aaa</span><br><span class="line">pick 2d7b923 modify bbb</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase 510aed3..2d7b923 onto 510aed3 (2 commands)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment"># p, pick &lt;commit&gt; = use commit</span></span><br><span class="line"><span class="comment"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span></span><br><span class="line"><span class="comment"># e, edit &lt;commit&gt; = use commit, but stop for amending</span></span><br><span class="line"><span class="comment"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span></span><br><span class="line"><span class="comment"># f, fixup &lt;commit&gt; = like &quot;squash&quot;, but discard this commit&#x27;s log message</span></span><br><span class="line"><span class="comment"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span></span><br><span class="line"><span class="comment"># d, drop &lt;commit&gt; = remove commit</span></span><br><span class="line"><span class="comment"># l, label &lt;label&gt; = label current HEAD with a name</span></span><br><span class="line"><span class="comment"># t, reset &lt;label&gt; = reset HEAD to a label</span></span><br><span class="line"><span class="comment"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span></span><br></pre></td></tr></table></figure><p>3、进行如下修改，保留第一行的 pick，剩余提交替换为 squash 或 s，保存退出编辑</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pick 090d873 create aaa</span><br><span class="line">s 2d7b923 modify bbb</span><br></pre></td></tr></table></figure><p>4、若意外退出编辑，执行下列命令</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rebase <span class="comment">--edit-todo</span></span><br><span class="line">git rebase <span class="comment">--continue</span></span><br></pre></td></tr></table></figure><p>5、git log进行日志查看</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">commit</span> <span class="number">81025</span>adc<span class="number">715</span>f<span class="number">1</span>ac<span class="number">26</span>e<span class="number">17145840</span>a<span class="number">2</span>ba<span class="number">02</span>a<span class="number">74</span>d<span class="number">129</span>c (HEAD -&gt; dev)</span><br><span class="line"><span class="attribute">Author</span>: “leolin<span class="number">9527</span> &lt;“<span class="number">963522074</span>@qq.com&gt;</span><br><span class="line"><span class="attribute">Date</span>:   Wed Apr <span class="number">8</span> <span class="number">21</span>:<span class="number">24</span>:<span class="number">59</span> <span class="number">2020</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">create</span> aaa</span><br><span class="line"></span><br><span class="line">    <span class="attribute">modify</span> bbb</span><br></pre></td></tr></table></figure><h2 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h2><p>本地提交前，最好把基准点设为需要合并的分支，这样提交 PR/MR 的时侯就不会冲突(本地来解决冲突)，不要在公共分支上变基！</p>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git fetch和Git pull区别</title>
      <link href="/2020/03/16/Git%20fetch%20%E5%92%8C%20Git%20pull%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/03/16/Git%20fetch%20%E5%92%8C%20Git%20pull%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>远程版本库</strong>：<br>与本地仓库概念基本一致，不同之处在于一个存在远程，可用于远程协作，一个却是存在于本地。通过push/pull可实现本地与远程的交互；<br><strong>远程仓库副本</strong>：<br>可以理解为存在于本地的远程仓库缓存，如需更新，可通过git fetch/pull命令获取远程仓库内容。<br>用fetch时，并未合并到本地仓库，此时可用git merge实现远程仓库副本与本地仓库的合并。<br>git pull 根据配置的不同，可为git fetch + git merge 或 git fetch + git rebase。<br><img src="/images/4-git/2-remote.png" alt="取自知乎"></p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>1、./.git/config文件，存储了本地库相关信息，如下图所示：<br><img src="/images/4-git/3-config.png" alt="配置"><br>2、./.git/refs 里面有三个文件夹：heads、remotes、tags。<br>3、head则是本地仓库与分支信息。<br>4、remotes文件夹中的每一个文件夹代表一个远程库名称（git remote），其中的每个文件关联远程库的一个分支，其中保存该分支的最新commit id。</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>1、将代码提交到github，可查看本地仓库和远端仓库commitID都为f5e7f32dc234b1d423f29cc08cb5b0ba9c3784c3。<br>2、直接在github修改并提交，可发现远端的commitID变为26156c341215c2c1fbf6af7689c73ab422ecc2c9。<br>3、同时在本地同一处做不同的修改并提交本地库，可见本地ID为11b61c9bf126efce2852e86a0969fbf02b8d7abd，远端副本仍是f5e7f32dc234b1d423f29cc08cb5b0ba9c3784c3。<br>4、此时采用<strong>git pull</strong>，远程仓库副本的ID更新为26156…，自动合并失败，手动解决冲突后，提交代码，新ID为3b46…<br>5、远端修改后用<strong>git pull</strong>，此时所有commitID皆为d36ecc5，同时文件得到更新。<br>6、远端修改后用<strong>git fetch</strong>，此时远端副本ID得到更新，但本地ID和文件并未更新。<br>7、git fetch更安全也更符合实际要求，可以在merge前查看更新情况，根据实际情况再决定是否合并。</p><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">$ git fetch origin <span class="keyword">master</span>                <span class="title">#从远程的origin</span>仓库的<span class="literal">master</span>分支下载代码到本地的origin maste</span><br><span class="line">$ git log -p <span class="literal">master</span>.. origin/<span class="keyword">master</span>      <span class="title">#比较本地的仓库和远程参考的区别</span></span><br><span class="line"><span class="title">$</span> git merge origin/<span class="keyword">master</span>                <span class="title">#把远程下载下来的代码合并到本地仓库，远程的和本地的合并</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="variable">$</span> git fetch origin master:temp           <span class="comment">#从远程的origin仓库的master分支下载到本地并新建一个分支temp</span></span><br><span class="line"><span class="variable">$</span> git <span class="built_in">diff</span> temp                          <span class="comment">#比较master分支和temp分支的不同</span></span><br><span class="line"><span class="variable">$</span> git merge temp                         <span class="comment">#合并temp分支到master分支</span></span><br><span class="line"><span class="variable">$</span> git branch <span class="literal">-d</span> temp                     <span class="comment">#删除temp</span></span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>由此可见，git pull看起来像git fetch+get merge，但是根据commit ID来看的话，实现原理是不一样的。<br><img src="/images/4-git/4-conclusion.png"></p>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令分类总结</title>
      <link href="/2020/03/15/Git%20%E5%91%BD%E4%BB%A4%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/"/>
      <url>/2020/03/15/Git%20%E5%91%BD%E4%BB%A4%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>1、什么是Git？<br>Workspace：工作区<br>Index / Stage：暂存区<br>Repository：仓库区（或本地仓库）<br>Remote：远程仓库<br><img src="/images/4-git/1-concept.png"></p><p>2、SVN与Git<br><strong>SVN</strong>是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。<br>集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。</p><p><strong>Git</strong>是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库。<br>既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？<br>比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><p>3、工作区、暂存区、本地仓库<br><strong>工作区</strong>：本地工作目录。工作区的内容会包含提交到暂存区和版本库(当前提交点)的内容，同时也包含自己的修改内容。<br><strong>版本库</strong>：执行git commit命令后，会将暂存区内容提交到仓库之中。在工作区下面有.git的目录，这个目录下的内容不属于工作区，里面便是仓库的数据信息，暂存区相关内容也在其中。这里也可以使用merge或rebase将远程仓库副本合并到本地仓库。<br><strong>暂存区</strong>：里面有个index文件，存储着关于暂存区的内容，同时Git为我们自动创建了第一个分支master，以及指向master的一个指针HEAD。</p><h2 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h2><p>1、配置全局账户，也就是该账户对所有的 Git 仓库都有效</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">&#x27;你的账户名称&#x27;</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">&#x27;你的 Email&#x27;</span></span><br></pre></td></tr></table></figure><p>2、配置局部账户，也就是该账户只对当前 Git 仓库有效</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--local user.name <span class="string">&#x27;你的账户名称&#x27;</span> </span><br><span class="line">git<span class="built_in"> config </span>--local user.email <span class="string">&#x27;你的 Email&#x27;</span></span><br></pre></td></tr></table></figure><p>3、配置查看</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global --list</span><br><span class="line">git<span class="built_in"> config </span>--local --list</span><br></pre></td></tr></table></figure><p>4、配置代理<br><strong>Https</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 配置</span></span><br><span class="line">git<span class="built_in"> config </span>--global http.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span> </span><br><span class="line">git<span class="built_in"> config </span>--global https.proxy <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 取消</span></span><br><span class="line">git<span class="built_in"> config </span>--global --unset http.proxy</span><br><span class="line">git<span class="built_in"> config </span>--global --unset https.proxy</span><br></pre></td></tr></table></figure><p><strong>SSH</strong><br>需要在~/.ssh目录中创建config文件，写入下述代码。</p><ul><li><p>win10</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User git</span><br><span class="line">ProxyCommand connect -S 127.0.0.1:1080 %h %p</span><br></pre></td></tr></table></figure></li><li><p>Linux</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User git</span><br><span class="line">ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p</span><br></pre></td></tr></table></figure></li></ul><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>1、创建版本库</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git init</span></span><br></pre></td></tr></table></figure><p>2、添加文件到暂存区</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> -A  提交所有变化</span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)</span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件</span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> &lt;file&gt; . 提交指定文件</span></span><br></pre></td></tr></table></figure><p>3、提交文件到仓库</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m <span class="string">&quot;内容&quot;</span></span><br></pre></td></tr></table></figure><p>4、查看当前仓库状态</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">git ls-<span class="built_in">files</span> <span class="comment">--others 查看哪些文件没有被 Git 管控</span></span><br></pre></td></tr></table></figure><p>5、文件差异比较</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">diff </span>&lt;file&gt;  比较某文件工作区和暂存区的差异</span><br><span class="line">git <span class="keyword">diff </span>--<span class="keyword">cache </span>&lt;file&gt;  比较某文件暂存区和 HEAD 的差异</span><br></pre></td></tr></table></figure><p>6、查看提交日志</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> </span><br><span class="line">git <span class="built_in">log</span> <span class="comment">--pretty=oneline  简要显示信息</span></span><br></pre></td></tr></table></figure><p>7、删除已添加到暂存区的文件</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rm</span> &lt;<span class="keyword">file</span>&gt; 在文件管理器中直接删除</span><br><span class="line">git <span class="keyword">rm</span> &lt;<span class="keyword">file</span>&gt; 到版本库中进行移除</span><br></pre></td></tr></table></figure><p>8、暂存区与工作区间回滚</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="comment">-- &lt;file&gt;  丢弃工作区的修改</span></span><br></pre></td></tr></table></figure><p>9、版本回退(暂存区和工作区所有文件恢复到某个版本)<br>HEAD表示当前版本，上个版本就是HEAD^，上上个就是HEAD^^，再上可以使用简便方法，比如上三个版本HEAD~3</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard HEAD^</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard 版本号</span></span><br></pre></td></tr></table></figure><p>10、查看历史版本号</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">ref</span>log</span><br></pre></td></tr></table></figure><p>11、打标签</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title">标签名 commit</span> 的id  </span><br></pre></td></tr></table></figure><h2 id="远端仓库"><a href="#远端仓库" class="headerlink" title="远端仓库"></a>远端仓库</h2><p>1、本地与远程库的关联和取消</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="builtin-name">add</span> url地址</span><br><span class="line">git remote <span class="builtin-name">remove</span> remote的名称</span><br></pre></td></tr></table></figure><p>2、列出所有remote</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git remote -v</span></span><br></pre></td></tr></table></figure><p>3、把远端所有分支和标签的变更都拉到本地</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git fetch remote</span></span><br></pre></td></tr></table></figure><p>4、把远端分支的变更拉倒本地且merge到本地分支</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull <span class="tag">&lt;<span class="name">远程主机名</span>&gt;</span> <span class="tag">&lt;<span class="name">远程分支名</span>&gt;</span>:<span class="tag">&lt;<span class="name">本地分支名</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：若将冒号和后面的本地分支名去掉，则表示将远程origin仓库的master分支拉取下来与本地当前分支合并。<br>5、把本地分支 push 到远端</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">push</span> remote名称 分支名</span><br></pre></td></tr></table></figure><h2 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h2><p>1、创建分支并且切换到该分支</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout -b 新分支</span></span><br><span class="line"></span><br><span class="line"><span class="attr">相当于：</span></span><br><span class="line"><span class="attr">git</span> <span class="string">branch 新分支</span></span><br><span class="line"><span class="attr">git</span> <span class="string">checkout 新分支</span></span><br></pre></td></tr></table></figure><p>2、列出本地分支</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git branch -v</span></span><br></pre></td></tr></table></figure><p>3、列出远端所有分支</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git branch -rv</span></span><br></pre></td></tr></table></figure><p>4、安全删除本地分支</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">branch </span>-d 要删除的分支</span><br></pre></td></tr></table></figure><p>5、合并分支，且为 merge 创建 commit</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">merge</span> A分支  <span class="comment">-- 把 A 分支合入到当前分支</span></span><br><span class="line">git <span class="keyword">merge</span> A分支 B分支  <span class="comment">--把A分支合入B分支</span></span><br></pre></td></tr></table></figure><h2 id="bug分支（临时任务）"><a href="#bug分支（临时任务）" class="headerlink" title="bug分支（临时任务）"></a>bug分支（临时任务）</h2><p>假设场景：在dev分支开发时，因任务未完成无法提交，又接到处理404的任务<br>1、把未处理完的变更先保存到 stash 中，保证工作区干净</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git stash</span></span><br></pre></td></tr></table></figure><p>2、在mater分支上创建临时分支404</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> checkout -b <span class="string">&#x27;404&#x27;</span></span><br></pre></td></tr></table></figure><p>3、处理完成后，切换到master分支，开始合并，再删除临时分支</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="literal">master</span></span><br><span class="line">git merge --no-ff -m <span class="string">&quot;fix 404&quot;</span> <span class="number">404</span></span><br><span class="line">git branch -d <span class="number">404</span></span><br></pre></td></tr></table></figure><p>4、切换到dev分支，查看工作现场</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout dev</span></span><br><span class="line"><span class="attr">git</span> <span class="string">stash list</span></span><br></pre></td></tr></table></figure><p>5、恢复工作现场</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash pop <span class="regexp">//</span> pop 相当于栈的出栈和入栈一样</span><br><span class="line">或者</span><br><span class="line">git stash apply <span class="regexp">//</span> apply 相当于从栈顶把任务取出来，但是不从栈中把任务移除</span><br></pre></td></tr></table></figure><p>6、代码回滚<br>一般用于master的代码回滚，因为多人在上面协作，revert 可以平稳的回滚代码，但却保留提交记录，不会让协作的人各种冲突</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert <span class="keyword">commit</span>-<span class="keyword">sha1</span></span><br></pre></td></tr></table></figure><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>1、本地分支合并冲突<br>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，其中&lt;&lt;&lt;HEAD是指主分支修改的内容，&gt;&gt;&gt;&gt;&gt;demo 是指demo分支上修改的内容。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">99999</span><br><span class="line">=======</span><br><span class="line">88888</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; demo</span><br></pre></td></tr></table></figure><p>解决：查看内容，修改为主干部分，进行提交。</p><h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><p>1、git bash修改默认编辑器nano为notepad++.exe</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global core.editor <span class="string">&quot;&#x27;D:\Notepad++\notepad++.exe&#x27; -multiInst -notabbar -nosession -noPlugin &#x27;$*&#x27;&quot;</span></span><br></pre></td></tr></table></figure><p>再输入命令git commit 便可成功开启Notepad++编辑器。<br>2、错误:Updates were rejected because the remote contains work that you do<br>其他地方向同一远端库推送了代码，导致本地不是最新的，需要先pull远端。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin <span class="literal">master</span></span><br></pre></td></tr></table></figure><p>3、错误:fatal: refusing to merge unrelated histories<br>Github新建仓库，添加了License等文件，然后上传本地仓库会发现github的仓库和本地没有一个共同的commit导致无法提交。<br>要把两个不同的项目合并，git需要添加–allow-unrelated-histories 允许不相关历史合并。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin <span class="keyword">master</span> <span class="title">--allow-unrelated-histories</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断回文数(Python)</title>
      <link href="/2020/03/10/%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97%E6%98%AF%E5%90%A6%E6%98%AF%E5%9B%9E%E6%96%87%E6%95%B0/"/>
      <url>/2020/03/10/%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97%E6%98%AF%E5%90%A6%E6%98%AF%E5%9B%9E%E6%96%87%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p>示例 1:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">输入:</span> <span class="number">121</span></span><br><span class="line"><span class="string">输出:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>代码实现:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge_num1</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    方法一</span></span><br><span class="line"><span class="string">    :param x:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    str_x = str(x)</span><br><span class="line">    <span class="keyword">return</span> str_x == str_x[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge_num2</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    方法二</span></span><br><span class="line"><span class="string">    :param x:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    temp_x = x</span><br><span class="line">    palindromeNum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> temp_x != <span class="number">0</span>:</span><br><span class="line">        palindromeNum = palindromeNum * <span class="number">10</span> + temp_x % <span class="number">10</span></span><br><span class="line">        temp_x //= <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> palindromeNum == x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    result = judge_num1(<span class="number">1221</span>)</span><br><span class="line">    print(result)</span><br><span class="line">    result2 = judge_num2(<span class="number">1221</span>)</span><br><span class="line">    print(result2)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020个人规划</title>
      <link href="/2020/03/02/2020%E4%B8%AA%E4%BA%BA%E8%A7%84%E5%88%92/"/>
      <url>/2020/03/02/2020%E4%B8%AA%E4%BA%BA%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2020是最差的一年，但也许更是未来最好的一年。<br>2019年末因上份工作处于公司的边缘部分，毅然辞职，打算2020重新开始，却不料碰上了疫情，真是人算不如天算。<br>由于地处三线城市，而本人做的爬虫及数据分析岗位稀少，难以求职，只能无奈寻求其他相关工作（运维、测试、前端）。<br>在其他文章中我明确劝退爬虫工作，也是有个人经验在里面的，也许你会说我能力不足，但岗位稀少是不容争辩的，在Boss直聘上调研过多个二三线城市的岗位数量，屈指可数。</p><h2 id="谈谈研究生扩招的影响"><a href="#谈谈研究生扩招的影响" class="headerlink" title="谈谈研究生扩招的影响"></a>谈谈研究生扩招的影响</h2><p>研究生计划增量向临床医学、公共卫生、集成电路、人工智能等专业倾斜，以专业学位培养为主，培养高层次的应用人才。<br>影响倒也是不大，不必太焦虑，只是学历上的贬值而已，TOP30的院校并没有扩招迹象。<br>而专业方面特别是人工智能，听说我的双非母校也开了这专业，据说大厂起码要985+海外背景，小厂无算法，毕业即转行。</p><h2 id="规划与反思"><a href="#规划与反思" class="headerlink" title="规划与反思"></a>规划与反思</h2><p>离职原因肯定不单是被边缘化，同事中不妨小人，要是遇上喜欢推卸责任直属领导那也是倒霉。俗话说人不可惹事，但也不可怕事，一味忍让只能是被得寸进尺，该干的时候就得干。<br>永远不要让同事知道你的规划及想做的事，没义务也没必要说，把事藏心里，表里不一是种能力，诚实可贵也许只存在于童话里。<br>求职时不必太讲仁义，毕竟企业不会对你仁义。见了太多被毁约的求职者，有些offer还未到手，拒绝了另一家，理由是怕耽误对方招人，请记住企业不会缺人。。。<br>创业方面，你不去做永远也不会知道，三线城市抢工程，抢生意有多黑暗，但再黑暗有机会也要去做，在保护好自己的前提下。。。<br>商业智能是一直想涉足的，也付出了一定的努力，毕竟最初的目标就是它，却被坑去做了爬虫，在未来会继续巩固excel、tableau。<br>近期目标就是结合家装领域做款小程序吧。</p>]]></content>
      
      
      <categories>
          
          <category> 心情日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次WIN10重装</title>
      <link href="/2020/03/02/%E8%AE%B0%E4%B8%80%E6%AC%A1WIN10%E9%87%8D%E8%A3%85/"/>
      <url>/2020/03/02/%E8%AE%B0%E4%B8%80%E6%AC%A1WIN10%E9%87%8D%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="微PE"><a href="#微PE" class="headerlink" title="微PE"></a>微PE</h2><p>没有在PE中植入一些强制性、商业性的软件和链接，更没有病毒及木马。<br>维护工具非常精良、简洁大方不花俏、全能的安装程序、完整并精简的内核、系统稳定。<br>PE维修工具该有的一个不缺，比如：BIOS/UEFI双启、CGI备份还原工具（特别推荐：支持GHO/ISO/WIM/SWM，支持UEFI+GPT，支持动态磁盘）、傲梅分区助手（特别推荐！）、DiskGenus（特别推荐！）、WinntSetup、DISM++、7zip、HDTunePro、账户密码破解、引导修复、数据恢复easyrecovery、一键理顺盘符等等。</p><h2 id="启动盘制作"><a href="#启动盘制作" class="headerlink" title="启动盘制作"></a>启动盘制作</h2><p>1.首先在<a href="http://www.wepe.com.cn/">官网</a>选择适合的版本下载<br>2.打开软件，插入U盘，看到如下界面，微PE支持安装到电脑、U盘、移动硬盘，还可以制作成ISO文件，直接点击上图中的图标选项即可。<br>3.进入安装PE到U盘选项，这里有七种安装方法，可以根据自己的需要选择，一般我们选择方案一即可，如果制作之后无法启动，再选择其他方案尝试。格式化旁边是U盘的分区格式，共三种，建议选择exFAT，这种格式是最适合U盘的，但是要注意exFAT格式在XP系统下是无法识别的。如果是新手，全部选择默认，不做改动即可。<br>4.安装完微PE后会把U盘分为两个盘符，300M大小的J盘放置PE系统的软件和工具，不建议改动，另外一个空间大的I盘就把你下载好的整个系统（MSDN原版下载）拷进去就OK了。</p><h2 id="重装WIN10"><a href="#重装WIN10" class="headerlink" title="重装WIN10"></a>重装WIN10</h2><p>1.本人笔记本按Fn+F2进入BIOS,修改BootManager的启动项顺序<br>2.如果没有报错则进入PE系统，下载的是原生ISO镜像进入CGI备份还原，如果你是GHO镜像进入Ghost备份还原。<br>3.执行写入后，拔出U盘或修改启动项重启电脑。</p><h2 id="装机常识"><a href="#装机常识" class="headerlink" title="装机常识"></a>装机常识</h2><p>1、WinPE说明书：<a href="http://www.wepe.com.cn/ubook/diskpartquick.html">http://www.wepe.com.cn/ubook/diskpartquick.html</a><br>2、exFAT(U盘，推荐)/NTFS(操作系统)/FAT32(旧)-文件系统格式。<br>现在超过4GB的U盘格式化时默认是NTFS分区，但是因为NTFS分区是采用“日志式”的文件系统，需要记录详细的读写操作，要不断读写，这种格式是很伤U盘的。exFAT是微软在Windows Embeded(嵌入式) 5.0以上中引入的一种适合于闪存的文件系统，为了解决FAT32等不支持4G及其更大的文件而推出。总之，FAT32与exFAT之间最大的差别在于能否支持4GB及以上容量单个文件的传输、查看与编辑；而FAT系列文件系统与NTFS之间最大的区分在于文件存取的方式，后者长期使用可能会让闪存类存储产品性能降低。<br>3、UEFI是一种更快捷快速的电脑启动配置，它被看做是BIOS的继任者，正在取代传统的BIOS启动。</p><h2 id="WIN10家庭版升级企业版"><a href="#WIN10家庭版升级企业版" class="headerlink" title="WIN10家庭版升级企业版"></a>WIN10家庭版升级企业版</h2><h3 id="升级："><a href="#升级：" class="headerlink" title="升级："></a>升级：</h3><p>1、购机完毕已预装win10家庭版<br>2、进入电脑属性更改密钥NPPR9-FWDCX-D2C8J-H872K-2YT43（截止日前可用）<br>3、静待升级</p><h3 id="激活："><a href="#激活：" class="headerlink" title="激活："></a>激活：</h3><p>1、<strong>管理员方式</strong>打开终端CMD<br>2、依次输入：<br>slmgr.vbs /upk<br>slmgr /ipk NPPR9-FWDCX-D2C8J-H872K-2YT43<br>slmgr /skms zh.us.to<br>slmgr /ato</p>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深度学习资料第一弹</title>
      <link href="/2020/03/01/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E7%AC%AC%E4%B8%80%E5%BC%B9/"/>
      <url>/2020/03/01/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E7%AC%AC%E4%B8%80%E5%BC%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>曾几何时，听着漫天遍地鼓吹人工智能，也萌生了做AI的念头，虽然没有名校经历，但也通过视频自学成为了一个优秀的调包侠，现分享收集来的资料。<br>所有资料皆为免费分享，若失效欢迎加我微信好友lxbryz。</p><h2 id="截图展示"><a href="#截图展示" class="headerlink" title="截图展示"></a>截图展示</h2><p><img src="/images/3-ziliao/ai/book1.png"><br><img src="/images/3-ziliao/ai/video.png"></p><h2 id="网盘分享"><a href="#网盘分享" class="headerlink" title="网盘分享"></a>网盘分享</h2><p>链接：<a href="https://pan.baidu.com/s/1rtB_2JNJMJkqWtS29zJ1UQ">https://pan.baidu.com/s/1rtB_2JNJMJkqWtS29zJ1UQ</a><br>提取码：av7j </p>]]></content>
      
      
      <categories>
          
          <category> 资料分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>经营公众号的18条黄金法则</title>
      <link href="/2020/03/01/%E7%BB%8F%E8%90%A5%E5%85%AC%E4%BC%97%E5%8F%B7%E7%9A%8418%E6%9D%A1%E9%BB%84%E9%87%91%E6%B3%95%E5%88%99/"/>
      <url>/2020/03/01/%E7%BB%8F%E8%90%A5%E5%85%AC%E4%BC%97%E5%8F%B7%E7%9A%8418%E6%9D%A1%E9%BB%84%E9%87%91%E6%B3%95%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>1、微信营销拼的是投入和执行力，想不投入就想获取大量粉丝是不可能的，不要只盯着3个月获取90万粉丝的案例。<br>2、新手开始学习玩微信，从关注优质的微信开始学习，记住那些优秀玩家的方法，最好每天都能拿笔记下来，自己对比一下哪些地方可以做的更好。<br>3、明确每一次沟通、互动、推送的对象是谁，读者对这个人越了解，信任度就越高。<br>4、简单就是力量，不要把自己的微信公众账号变成万能的功能应用，可以免费听音乐、机器人陪聊，这些功能只会淡化企业核心价值。<br>5、微信营运的目的是维护客户关系，用99%的时间培养顾客的信任感。请暂时忘记销售。<br>6、不要忙于每一天推送大量的内容给潜在客户，创造可以跟读者沟通的话题，要知道，所有的价值都来自沟通。<br>7、粉丝再多，如果不能转化为价值，依然毫无用处。粉丝的质量比粉丝的数量更重要。<br>8、发布文章不一定长篇大论，最好能引发读者的思考，一般篇幅在三五百字左右。<br>9、认真分析自己的行业，是否需要用微信公众平台。<br>10、做微信营销见效很慢，粉丝沉淀就要花很多时间，才能收到一些效果和利润。<br>11、要想在很短的时间里获取大量的粉丝，必须要靠媒体。<br>12、重视互动，可以吸引大量的人转发和评论。<br>13、在准备营销产品之前，做好整个产品营销策划，推送的内容最重要，会直接影响读者的购买。<br>14、做微信营销，最好结合腾讯的其他产品一起使用，因为未来的移动互联网营销将会是走向人脉关系链的营销。<br>15、做微信营销就等于在做一本行业精刊，关键在内容的质量。<br>16、微信的内容，选择合适的图片很重要，经常去和自己相关的而微博利获取一些行业里的图片。<br>17、推送内容，晚上推送内容最好，因为这些时间读者有足够的时间来阅读，白天推送内容，适合做产品的促销，当时顾客可以订购产品，带来产品真正的销售。<br>18、企业先学好服务500、1000个微信客户，用户多少不代表营销能力，仅仅是一个数量，用户的互动价值才是微信营销的核心，多创造和读者沟通的话题，让整个公众账号活跃起来。</p>]]></content>
      
      
      <categories>
          
          <category> 运营销售 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次奇葩面试</title>
      <link href="/2020/03/01/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A5%87%E8%91%A9%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/03/01/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A5%87%E8%91%A9%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自上次被坑去劳务派遣，然后又被其外包发配到其他公司进行打杂，自此得出结论千万不要以劳务派遣的身份去国企，现处于努力脱坑中的状态。<br>虽然开年又碰到疫情，更是雪上加霜，但我还是开始投递简历了，在这个三线小城市找个靠谱的工作还真是挺难的。<br>本身是网络爬虫出身的我，投递了一份产品经理岗，很快就收到了一面的通知，采用Zoom视频面试。</p><h2 id="一面："><a href="#一面：" class="headerlink" title="一面："></a>一面：</h2><p>流程很简单，主要进行了自我介绍，了解我在上家公司的工作内容，然后我提到应聘岗位的是产品经理，总经理发话你会怎么领导一个产品团队，随便吹吹牛就过去了。</p><h2 id="二面（有点奇葩）："><a href="#二面（有点奇葩）：" class="headerlink" title="二面（有点奇葩）："></a>二面（有点奇葩）：</h2><p>时间约定在了礼拜天的晚上8.30进行视频面试，面试产品来的是一个技术主管，估计是连我的简历都没看吧，张口就问我会不会java，会不会storm，也许是技术人炫技的本性吧。<br>懵逼中，我要是会，我简历上早写上去了，然后就通过我不会hadoop，storm判断出我没有学习新技术的自觉性。<br>又是一阵懵逼，这是什么逻辑，那我Python、Docker、Vue是白学的么？<br>那我问他神经网络、NLP相关的，他也不见得会啊，我能推断出他技术不好么，这是什么神逻辑。。。<br>我的天，你面试产品经理好歹问几个产品相关的问题吧，比如axure或者流程设计，或者是对某款产品的看法吧。<br>被问懵逼后，我脱口而出我面的是<strong>产品经理</strong>，他一脸恍然大悟，我也是醉了HR不和面试官沟通面试的岗位的么。<br>马上问道，我会怎么去设计一款采集工具，说了之后，就问我爬虫的国际规范是啥?<br>我是孤陋寡闻了，爬虫还有国际规范的么？<br>关注我的兄弟很多是做爬虫的吧，知道的麻烦给我普及下吧。</p><h2 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h2><p>估计是没了，但即使有也不准备去了。<br>在我看来，作为一个面试官浏览简历是对应聘者应有的尊重，求职本身就是双向选择的事，何必高高在上呢。</p>]]></content>
      
      
      <categories>
          
          <category> 心情日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深度学习-卷积神经网络CNN</title>
      <link href="/2020/02/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9CCNN/"/>
      <url>/2020/02/09/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9CCNN/</url>
      
        <content type="html"><![CDATA[<h2 id="层级结构"><a href="#层级结构" class="headerlink" title="层级结构"></a>层级结构</h2><p>CONV：卷积计算层，线性乘积 求和。<br>RELU：激励层，ReLU是激活函数的一种。<br>POOL：池化层，简言之，即取区域平均或最大。<br>FC：全连接层<br><img src="/images/18-ml/11-struct.png"></p><h3 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h3><p><img src="/images/18-ml/12-conv.png"><br>如定义一个3X3的矩阵作为kernel，然后将kernel在原图上进行固定步长的滑动，滑动时对应原图的活动窗口区域，与这些区域内的点进行点乘运算，求和。<br>卷积核移动的大小称为ksize，步长称为stride，根据公式Wout = (W - k + 2P)/S + 1可计算输出结果的形状。</p><h3 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h3><p>进行下采样的操作，用以快速地减小输入的大小同时不至于丢失重要的信息，一般有最大值池化和均值池化。<br>如下图所示就是取区域最大，得到该值。<br><img src="/images/18-ml/13-maxpool.png"></p><h2 id="torcn-nn"><a href="#torcn-nn" class="headerlink" title="torcn.nn"></a>torcn.nn</h2><p>1、卷积层</p><ul><li>nn.Conv2d()</li></ul><table><thead><tr><th>参数·</th><th>含义</th></tr></thead><tbody><tr><td>in_channels</td><td>输入信号的通道数.</td></tr><tr><td>out_channels</td><td>卷积后输出结果的通道数.</td></tr><tr><td>kernel_size</td><td>卷积核的形状. 例如kernel_size=(3, 2)表示3X2的卷积核，如果宽和高相同，可以只用一个数字表示</td></tr><tr><td>stride</td><td>卷积每次移动的步长, 默认为1.</td></tr><tr><td>padding</td><td>处理边界时填充0的数量, 默认为0(不填充).</td></tr><tr><td>dilation</td><td>采样间隔数量, 默认为1, 无间隔采样.</td></tr><tr><td>groups</td><td>输入与输出通道的分组数量. 当不为1时, 默认为1(全连接).</td></tr><tr><td>bias</td><td>为 True 时, 添加偏置.</td></tr></tbody></table><p>2、池化层<br>最大值池化：</p><ul><li>nn.MaxPool2d()</li><li>torch.nn.function.max_pool2d)()</li></ul><p>3、线性层</p><ul><li>torch.nn.Linear()<br>用于设置网络中的全连接层的，需要注意的是全连接层的输入与输出都是二维张量，一般形状为[batch_size, size]，不同于卷积层要求输入输出是四维张量。</li></ul><h2 id="GPU-CPU切换"><a href="#GPU-CPU切换" class="headerlink" title="GPU/CPU切换"></a>GPU/CPU切换</h2><p>device属性用来指定使用的计算设备，之前要用cpu()，cuda()转换模型或数据，使用to方法可以轻松转换训练的网络(module)和数据到不同计算设备运行</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">device</span>=torch.device(<span class="string">&#x27;cuda:0&#x27;</span> if torch.cuda.is_available else <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"><span class="attr">input</span>=data.to(device)<span class="comment">#直接指定数据到哪个设备中</span></span><br><span class="line"><span class="attr">model</span>=MyModule().to(device)<span class="comment">#同样，网络模型转换到指定设备中</span></span><br></pre></td></tr></table></figure><h2 id="MNIST示例"><a href="#MNIST示例" class="headerlink" title="MNIST示例"></a>MNIST示例</h2><p>由上述简单理解卷积神经网络就是卷积层+池化层+卷积层+…，如LeNet网络具有2个卷积+池化层以及3个全连接层。<br>代码示例:<a href="https://github.com/LeoLin9527/PytorchMinst">点击跳转</a></p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期权和风险对冲</title>
      <link href="/2020/01/18/%E6%9C%9F%E6%9D%83%E5%92%8C%E9%A3%8E%E9%99%A9%E5%AF%B9%E5%86%B2/"/>
      <url>/2020/01/18/%E6%9C%9F%E6%9D%83%E5%92%8C%E9%A3%8E%E9%99%A9%E5%AF%B9%E5%86%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="期权"><a href="#期权" class="headerlink" title="期权"></a>期权</h2><p>期权（option）是一种金融衍生品。其英文 option 的意思就是「选择」，于是，顾名思义期权是一种选择交易与否的权利。期权分为两大类，买权（call option；又称：看涨期权、认购期权）和卖权（put option；又称：看空期权、认沽期权）。对期权的买卖分别称之为 long 和 short。例如，买入卖权称之为 long a put option；卖出买权称之为 short a call option。</p><p>期权的核心要素有以下一些：</p><p>标的物（underlying）：即选择是否交易的东西。通常是有价证券（security；例如：股票）。<br>行权价（exercise price / strike price）：即交易标的物时的价格。<br>履约日期（maturity date / expiration date）：即指定的交易日期（European Option）或指定的期权失效日期（American Option）。对于欧式期权来说，交易只能选择发生在履约日；对于美式期权来说，交易可以发生在不晚于履约日的任何一天。<br>以买权为例。假设你看好一只股票（现价 100），认为该股票在未来一段时间内会涨。那么你可以：</p><p>买入该股票，待涨后（比如涨到 110）卖出（净赚 10）；<br>买入该股票的期权（花费 3，行权价 110），当股票在履约日之前（针对美式期权）超过 break-even price（113）之后买入该股票（净赚 price - 103）。<br>那么现在问题来了。既然你看好一只股票，那为什么不直接买，还要多此一举先买期权再购入呢？最常见的就是为了对冲（hedge，接下来要讲）而不是为了拥有（exposure）。另外，对于资金有限制、有合规及避税方面的需求等情形，购买期权而非直接购买也是有利的。</p><p>对于资金有限制的情况，比如你手头只有 300 美元，立即买入只能买入 3 股；但能够买入 100 股的期权（行权价 110）。当股价涨到 120 时，立即买入的收益率是 20%；而买入期权的做法，只需再借入 10,000 美元（可能要为此承担借款利息）买入 100 股并立即卖出，收益率可达 230%。这时，long call 成为杠杆投机的工具。——当然，若股价没有超过 break-even price，则会产生亏损。</p><h2 id="对冲"><a href="#对冲" class="headerlink" title="对冲"></a>对冲</h2><p>对冲（hedge）的本质是损失一定利益或者付出一定成本，来控制风险的手段。英文 hedge 的原意是「栅栏」，相当于 barrier，引申义是保护或防御的手段。</p><p>举个例子：</p><p>如果一只股票现价 100，你看好这只股票将来的表现，因此买入股票。为了获取股票将来可能的涨幅带来的收益，你就必须承担股价下跌的风险。这种风险最大可以是 100% 的本金，即在极端情况下，股价跌至接近零。显然，你是不想承担这种风险的。于是你可以选择买入卖权。比如，你花费 3 元，买入在未来某一时间段内以 100 元卖出该股票的卖权（long a put option）。此时，你持有该股票的成本变成了 103 元。</p><p>如果股价未来上涨，超过 103 元，卖出股票你就能获利。但如果股价下跌，比如跌到了 90 元甚至 50 元、20 元，你可以选择行权，以 100 元的价格将股票卖出。在后一种情况下，你只亏损了 3 元，有效地控制了风险。</p><p>卖权的定价一般和以下一些因素有关：</p><ul><li>标的物当前价格和行权价。行权价相对标的物价格越高，卖权价格越高。</li><li>履约日期限。履约日距今时间越长，卖权价格越高。</li><li>标的物价格的波动幅度。波动幅度越大，卖权价格越高。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 金融经济 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Flex弹性布局</title>
      <link href="/2020/01/16/Flex%20%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/"/>
      <url>/2020/01/16/Flex%20%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="布局属性"><a href="#布局属性" class="headerlink" title="布局属性"></a>布局属性</h2><ol><li>display:block 块级元素默认占一行。</li><li>display:inline 内联元素，不能设置宽度高度。</li><li>display:inline-block 内联元素即排在同一行，还可设置宽度高度。</li><li>z-index: 当元素之间重叠的时候， z-index 较大的元素会覆盖较小的元素在上层进行显示。</li></ol><p><img src="/images/css/box-model.png" alt="盒子模型"></p><h2 id="浅谈Flexbox"><a href="#浅谈Flexbox" class="headerlink" title="浅谈Flexbox"></a>浅谈Flexbox</h2><p><strong>布局原理：</strong>通过给父盒子添加flex属性，来控制子盒子的位置和排列方式。<br>1、弹性布局用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为flex布局。<br>2、当父盒子设置为Flex布局后，子元素的float、clear和vertical-align属性将失效，自动成为容器成员称为Flex项目。<br>3、Flexbox 的盒子模型具有水平的起点与终点 ( main start、main end )，垂直的起点与终点 ( cross start、cross end )，水平轴与垂直轴 ( main axis、cross axis )，然后元素具有水平尺寸与垂直尺寸 ( main size、cross size )。</p><h2 id="Flex属性"><a href="#Flex属性" class="headerlink" title="Flex属性"></a>Flex属性</h2><h3 id="父项属性"><a href="#父项属性" class="headerlink" title="父项属性"></a>父项属性</h3><ul><li><p>flex-direction: 决定主轴的方向(默认值：row，主轴为水平方向，起点在左端)</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// <span class="symbol">:nt</span>h-child(<span class="built_in">n</span>) 选择器匹配属于其父元素的第 <span class="built_in">N</span> 个子元素，不论元素的类型。</span><br><span class="line"></span><br><span class="line">.container &#123;</span><br><span class="line">    flex-directi<span class="symbol">on:</span> <span class="built_in">row</span> | <span class="built_in">row</span>-reverse | <span class="built_in">column</span> | <span class="built_in">column</span>-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>justify-content：定义了项目在主轴的对齐方式<br>space-around：每个子项平分剩余空间，即两侧环绕互补干扰的等宽的空白间距，所以项目之间的间隔比项目与边缘的间隔大一倍。<br>space-between：两端对齐，项目之间的间隔相等，多余的空白间距只在元素中间区域分配。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">    justify-content: flex-start | flex-<span class="keyword">end</span> | center | <span class="literal">space</span>-<span class="keyword">between</span> | <span class="literal">space</span>-<span class="keyword">around</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/css/justify.png"></p></li><li><p>flex-wrap: 决定容器内项目是否可换行<br>默认值：nowrap 不换行，即当主轴尺寸固定时，当空间不足时，项目尺寸会随之调整而并不会挤到下一行。<br>wrap：项目主轴总尺寸超出容器时换行，第一行在上方。</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>flex-flow:row wrap<br>复合属性，相当于同时设置flex-direction和flex-wrap。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-flow</span>: row-reverse wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>align-items<br>align-items指的就是flex子项们相对于flex容器在垂直方向上（侧轴）的对齐方式。<br>默认值为stretch即如果项目未设置高度或者设为auto，尺寸将拉伸至占满整个容器的高度。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">align-items: stretch | <span class="type">flex</span>-start | <span class="type">flex</span>-<span class="keyword">end</span> | <span class="type">center</span> | <span class="type">baseline</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/css/align.png"></p></li><li><p>align-content<br>align-content则是指明垂直方向（侧轴）每一行flex元素的对齐和分布方式，如果所有flex子项只有一行，则align-content属性不起作用。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">align-content: stretch | <span class="type">flex</span>-start | <span class="type">flex</span>-<span class="keyword">end</span> | <span class="type">center</span> | <span class="type">space</span>-between | <span class="type">space</span>-around | <span class="type">space</span>-evenly</span><br></pre></td></tr></table></figure></li></ul><h3 id="子项属性"><a href="#子项属性" class="headerlink" title="子项属性"></a>子项属性</h3><ul><li><p>order<br>定义项目的排列顺序，数值越小，排列越靠前。</p></li><li><p>align-self<br>类似 align-items 属性，只不过 align-self 是对单个项目生效的(可覆盖align-items属性)，而 align-items 则是对容器下的所有项目生效的。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">     align-self: <span class="built_in">auto</span> | <span class="type">flex</span>-start | <span class="type">flex</span>-<span class="keyword">end</span> | <span class="type">center</span> | <span class="type">baseline</span> | <span class="type">stretch</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>flex<br>flex属性包含三个值：flex-grow、flex-shrink和flex-basis<br>flex-grow: 扩展比例，默认值为 0，即如果存在剩余空间，也不放大。<br>flex-shrink: 收缩比例，默认为1，即如果空间不足，该项目将缩小。<br>flex-basis: 伸缩基准值，默认auto，计算主轴是否有多余空间。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ul><p>特殊值：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;<span class="attribute">flex</span>: <span class="number">1</span>;&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快捷值：auto (1 1 auto) 和 none (0 0 auto)</p><p><strong>1个值</strong><br>如果flex的属性值只有一个值，则：<br>如果是数值，例如flex: 1，则这个1表示flex-grow，此时flex-shrink和flex-basis都使用默认值，分别是1和auto。<br>如果是长度值，例如flex: 100px，则这个100px显然指flex-basis，因为3个缩写CSS属性中只有flex-basis的属性值是长度值。此时flex-grow和flex-shrink都使用默认值，分别是0和1。</p><p><strong>2个值</strong><br>如果flex的属性值有两个值，则第1个值一定指flex-grow，第2个值根据值的类型不同表示不同的CSS属性，具体规则如下：<br>如果第2个值是数值，例如flex: 1 2，则这个2表示flex-shrink，此时flex-basis使用默认值auto。<br>如果第2个值是长度值，例如flex: 1 100px，则这个100px指flex-basis，此时flex-shrink都使用默认值0。</p><p><strong>3个值</strong><br>如果flex的属性值有三个值，则这3个值分别表示flex-grow，flex-shrink和flex-basis。</p><h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><p>element element(div p):选择<code>&lt;div&gt;</code>元素内的所有<code>&lt;p&gt;</code>元素<br>element&gt;element(div&gt;p):选择所有父级是<code>&lt;div&gt;</code>元素的<code>&lt;p&gt;</code>元素<br>1、html</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=&quot;<span class="symbol">demo</span>&quot;&gt;</span><br><span class="line">   &lt;<span class="symbol">div</span> <span class="symbol">class</span>=&quot;<span class="symbol">left</span>&quot;&gt;&lt;/<span class="symbol">div</span>&gt;</span><br><span class="line">   &lt;<span class="symbol">div</span> <span class="symbol">class</span>=&quot;<span class="symbol">right</span>&quot;&gt;</span><br><span class="line">      &lt;<span class="symbol">p</span>&gt;<span class="symbol">Iphone7</span> <span class="symbol">PLUS</span> <span class="symbol">XXXXXXXXXX</span>&lt;/<span class="symbol">p</span>&gt;</span><br><span class="line">      &lt;<span class="symbol">span</span>&gt;总人数<span class="symbol">99</span>&lt;/<span class="symbol">span</span>&gt;</span><br><span class="line">      &lt;<span class="symbol">span</span>&gt;剩余人数<span class="symbol">33</span>&lt;/<span class="symbol">span</span>&gt;</span><br><span class="line">      &lt;<span class="symbol">div</span> <span class="symbol">class</span>=&quot;<span class="symbol">btn</span>&quot;&gt;立即参与&lt;/<span class="symbol">div</span>&gt;</span><br><span class="line">   &lt;/<span class="symbol">div</span>&gt;</span><br><span class="line">&lt;/<span class="symbol">div</span>&gt;</span><br></pre></td></tr></table></figure><p>2、css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;                <span class="comment">/*设置为flex布局*/</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo</span> &gt; <span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">flex</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#d4cdcd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">380px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux screen</title>
      <link href="/2020/01/05/Linux%20screen/"/>
      <url>/2020/01/05/Linux%20screen/</url>
      
        <content type="html"><![CDATA[<h2 id="工具简介"><a href="#工具简介" class="headerlink" title="工具简介"></a>工具简介</h2><p>screen 是Linux下的SSH远程会话管理工具，在一些流行的发行版上已经预安装。<br>screen可以实现代码在后台运行时的可视化，能在开一个会话连接时创建多个窗口处理不同的任务，可以防止SSH中断连接使远程进程终止，使用screen管理每一条需要保持运行的命令例如scrapyd。</p><h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h2><p>1、安装screen工具</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> -y install screen</span><br></pre></td></tr></table></figure><p>2、查看screen版本</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">screen -v</span> </span><br></pre></td></tr></table></figure><p>3、查看screen相关命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man<span class="built_in"> screen </span> </span><br></pre></td></tr></table></figure><p>4、查看所有screen会话</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">screen -ls</span> </span><br></pre></td></tr></table></figure><p>5、创建名为xxx的会话</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">screen -S xxx</span> </span><br></pre></td></tr></table></figure><p>6、分离当前screen会话</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">ctrl+a+d</span></span><br></pre></td></tr></table></figure><p>7、恢复screen会话显示</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -r -S xxx  或<span class="built_in"> screen </span>-r sessionID </span><br></pre></td></tr></table></figure><p>8、中止screen会话</p><ul><li>exit </li><li>ctrl+d </li><li>screen -S xxx -X quit </li><li>kill sessionID </li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>KNN原理与实践</title>
      <link href="/2019/12/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-KNN%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
      <url>/2019/12/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-KNN%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="算法概览"><a href="#算法概览" class="headerlink" title="算法概览"></a>算法概览</h2><p><img src="/images/18-ml/1-algorithm.png"></p><h2 id="KNN原理"><a href="#KNN原理" class="headerlink" title="KNN原理"></a>KNN原理</h2><p>KNN属于监督学习，如果一个样本在特征空间中的k个最相似（即特征空间中最邻近的样本中的大多数属于某一个类别），则该样本也属于这个类别。<br><img src="/images/18-ml/2-knn.png"></p><h3 id="距离计算"><a href="#距离计算" class="headerlink" title="距离计算"></a>距离计算</h3><p>两个样本的距离可以通过如下公式计算欧式距离，如a(a1,a2,a3)，b(b1,b2,b3)<br><img src="/images/18-ml/3-EuclideanDistance.png"></p><h2 id="KNN-python示例"><a href="#KNN-python示例" class="headerlink" title="KNN python示例"></a>KNN python示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDataSet</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    给出训练数据以及对应的类别</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    group = array([[<span class="number">1.0</span>, <span class="number">1.1</span>], [<span class="number">1.0</span>, <span class="number">1.0</span>], [<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0.1</span>]])</span><br><span class="line"></span><br><span class="line">    labels = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> group, labels</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify0</span>(<span class="params">inX, dataSet, labels, k</span>):</span></span><br><span class="line">    <span class="comment"># (4,2)</span></span><br><span class="line">    dataSetSize = dataSet.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 1、距离计算 numpy tile 将原矩阵横向、纵向地复制</span></span><br><span class="line">    diffMat = tile(inX, (dataSetSize, <span class="number">1</span>)) - dataSet</span><br><span class="line"></span><br><span class="line">    sqDiffMat = diffMat ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    sqDistances = sqDiffMat.sum(axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    distances = sqDistances ** <span class="number">0.5</span></span><br><span class="line">    print(<span class="string">f&quot;distance:<span class="subst">&#123;distances&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># argsort函数返回的是数组值从小到大的索引值</span></span><br><span class="line">    sortedDistIndicies = distances.argsort()</span><br><span class="line">    print(sortedDistIndicies)</span><br><span class="line">    <span class="comment"># 2、选取距离最小的K个点</span></span><br><span class="line">    classCount = dict()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 统计A和B的个数，存在</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        voteIlabel = labels[sortedDistIndicies[i]]</span><br><span class="line"></span><br><span class="line">        classCount[voteIlabel] = classCount.get(voteIlabel, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 排序</span></span><br><span class="line">    sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(<span class="number">1</span>), reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sortedClassCount[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    group, labels = createDataSet()</span><br><span class="line">    print(classify0([<span class="number">0</span>, <span class="number">0</span>], group, labels, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><h2 id="sklearn-KNN-API"><a href="#sklearn-KNN-API" class="headerlink" title="sklearn KNN API"></a>sklearn KNN API</h2><p>1、分类器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">KNeighborsClassifier</span>(<span class="params">n_neighbors = <span class="number">5</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                       weights=<span class="string">&#x27;uniform&#x27;</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                       algorithm = <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                       leaf_size = <span class="string">&#x27;30&#x27;</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                       p = <span class="number">2</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                       metric = <span class="string">&#x27;minkowski&#x27;</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                       metric_params = None,</span></span></span><br><span class="line"><span class="function"><span class="params">                       n_jobs = None</span></span></span><br><span class="line"><span class="function"><span class="params">                       </span>)</span></span><br><span class="line"><span class="function">```       </span></span><br><span class="line"><span class="function">                        </span></span><br><span class="line"><span class="function">- <span class="title">n_neighbors</span>：这个值就是指 <span class="title">KNN</span> 中的 “<span class="title">K</span>”了。前面说到过，通过调整 <span class="title">K</span> 值，算法会有不同的效果。</span></span><br><span class="line"><span class="function">- <span class="title">weights</span>（权重）：最普遍的 <span class="title">KNN</span> 算法无论距离如何，权重都一样，但有时候我们想搞点特殊化，比如距离更近的点让它更加重要。这时候就需要 <span class="title">weight</span> 这个参数了，这个参数有三个可选参数的值，决定了如何分配权重。参数选项如下：</span></span><br><span class="line"><span class="function">        • &#x27;<span class="title">uniform</span>&#x27;：不管远近权重都一样，就是最普通的 <span class="title">KNN</span> 算法的形式。</span></span><br><span class="line"><span class="function">        • &#x27;<span class="title">distance</span>&#x27;：权重和距离成反比，距离预测目标越近具有越高的权重。</span></span><br><span class="line"><span class="function">        • 自定义函数：自定义一个函数，根据输入的坐标值返回对应的权重，达到自定义权重的目的。</span></span><br><span class="line"><span class="function">- <span class="title">algorithm</span>：在 <span class="title">sklearn</span> 中，要构建 <span class="title">KNN</span> 模型有三种构建方式，1. 暴力法，就是直接计算距离存储比较的那种放松。2. 使用 <span class="title">kd</span> 树构建 <span class="title">KNN</span> 模型 3. 使用球树构建。 其中暴力法适合数据较小的方式，否则效率会比较低。如果数据量比较大一般会选择用 <span class="title">KD</span> 树构建 <span class="title">KNN</span> 模型，而当 <span class="title">KD</span> 树也比较慢的时候，则可以试试球树来构建 <span class="title">KNN</span>。参数选项如下：</span></span><br><span class="line"><span class="function">        • &#x27;<span class="title">brute</span>&#x27; ：蛮力实现</span></span><br><span class="line"><span class="function">        • &#x27;<span class="title">kd_tree</span>&#x27;：<span class="title">KD</span> 树实现 <span class="title">KNN</span></span></span><br><span class="line"><span class="function">        • &#x27;<span class="title">ball_tree</span>&#x27;：球树实现 <span class="title">KNN</span> </span></span><br><span class="line"><span class="function">        • &#x27;<span class="title">auto</span>&#x27;： 默认参数，自动选择合适的方法构建模型</span></span><br><span class="line"><span class="function">不过当数据较小或比较稀疏时，无论选择哪个最后都会使用 &#x27;<span class="title">brute</span>&#x27;</span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">- <span class="title">leaf_size</span>：如果是选择蛮力实现，那么这个值是可以忽略的，当使用<span class="title">KD</span>树或球树，它就是是停止建子树的叶子节点数量的阈值。默认30，但如果数据量增多这个参数需要增大，否则速度过慢不说，还容易过拟合。</span></span><br><span class="line">- p：和metric结合使用的，当metric参数是&quot;minkowski&quot;的时候，p=1为曼哈顿距离， p=2为欧式距离。默认为p=2。</span><br><span class="line">- metric：指定距离度量方法，一般都是使用欧式距离。</span><br><span class="line">        • <span class="string">&#x27;euclidean&#x27;</span> ：欧式距离</span><br><span class="line">        • <span class="string">&#x27;manhattan&#x27;</span>：曼哈顿距离</span><br><span class="line">        • <span class="string">&#x27;chebyshev&#x27;</span>：切比雪夫距离</span><br><span class="line">        • <span class="string">&#x27;minkowski&#x27;</span>： 闵可夫斯基距离，默认参数</span><br><span class="line">- n_jobs：指定多少个CPU进行运算，默认是<span class="number">-1</span>，也就是全部都算</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、评估模型的预测性能</span><br><span class="line">```python</span><br><span class="line">sklearn.cross_validation.cross_val_score(estimator, X, y=<span class="literal">None</span>, scoring=<span class="literal">None</span>,</span><br><span class="line">cv=<span class="literal">None</span>, n_jobs=<span class="number">1</span>, verbose=<span class="number">0</span>, fit_params=<span class="literal">None</span>, pre_dispatch=<span class="string">&#x27;2*n_jobs&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>estimator：分类器即使用的算法</li><li>cv：cv参数决定数据集划分比例，当cv的取值为整数的时候，使用(Stratified)KFold方法。如cv=10则数据集划分为10折，每次用9折训练，1折测试，就会有10次结果，求十次的平均即可。</li><li>scoring：决定了其中的分数计算方法(包括accuracy和mean_squared_error等)</li></ul><p>3、划分测试集和训练集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_train,X_test, y_train, y_test =cross_validation.train_test_split(train_data,train_target,test_size=<span class="number">0.3</span>, random_state=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><ul><li>x           数据集的特征值</li><li>y        数据集的标签值</li><li>test_size      测试集的大小，一般为float，在0-1之间，表示样本占比；如果是整数的话就是样本的数量</li><li>random_state        随机数种子,不同的种子会造成不同的随机采样结果。相同的种子采样结果相同</li><li>return  训练集特征值，测试集特征值，训练标签，测试标签(默认随机取)</li></ul><p>4、归一化处理<br>如果一个特征值域范围非常大，那么距离计算就主要取决于这个特征，从而与实际情况相悖。Sklearn 均值方差归一化把所有数据归一到均值为0方差为1的分布中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line">standardScaler = StandardScaler()</span><br><span class="line"><span class="comment"># 存放了均值方差归一化所对应的信息</span></span><br><span class="line">standardScaler.fit(X_train)</span><br><span class="line">X_train = standardScaler.transform(X_train)</span><br><span class="line">X_test = standardScaler.transform(X_test)</span><br></pre></td></tr></table></figure><p>5、KNeighborsClassifier对象进行fit创建出模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sklearn_knn_clf.fit(X_train,y_train)</span><br></pre></td></tr></table></figure><h2 id="KNN-sklearn示例"><a href="#KNN-sklearn示例" class="headerlink" title="KNN sklearn示例"></a>KNN sklearn示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以鸢尾花的数据集为示例</span></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">X = iris.data</span><br><span class="line">y = iris.target</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">X_train, x_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">666</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler  <span class="comment"># sklearn中的相应的类</span></span><br><span class="line"></span><br><span class="line">standardScaler = StandardScaler()  <span class="comment"># 实例化这样的一个类</span></span><br><span class="line"></span><br><span class="line">standardScaler.fit(X_train)  <span class="comment"># 求出相应的均值和方差（根据训练集）</span></span><br><span class="line"></span><br><span class="line">standardScaler.mean_  <span class="comment"># 均值 array([5.83416667, 3.0825    , 3.70916667, 1.16916667])</span></span><br><span class="line"></span><br><span class="line">standardScaler.scale_  <span class="comment"># 标准差array([0.81019502, 0.44076874, 1.76295187, 0.75429833])</span></span><br><span class="line"></span><br><span class="line">X_train = standardScaler.transform(X_train)  <span class="comment"># 根据fit计算出来的值来进行相应的数据归一化</span></span><br><span class="line"></span><br><span class="line">x_test_transform = standardScaler.transform(x_test)  <span class="comment"># 对测试集也使用同样的方法进行相应的数据归一化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">knn_clf = KNeighborsClassifier(n_neighbors=<span class="number">3</span>)</span><br><span class="line">knn_clf.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line">score = knn_clf.score(x_test_transform, y_test)  <span class="comment"># 数据归一化后的精确度1.0</span></span><br></pre></td></tr></table></figure><h2 id="Kaggle验证手机号小记："><a href="#Kaggle验证手机号小记：" class="headerlink" title="Kaggle验证手机号小记："></a>Kaggle验证手机号小记：</h2><p>1、确保自己可以科学上网，手机前加+860，点击发送。<br>2、先前选择的是用Google账号登录,但是点击之后一直显示”sending…”。<br>3、最后更换邮箱重新注册，一次验证通过。</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sklearn 决策树介绍</title>
      <link href="/2019/12/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-sklearn%20%E5%86%B3%E7%AD%96%E6%A0%91/"/>
      <url>/2019/12/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-sklearn%20%E5%86%B3%E7%AD%96%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="机器学习导图"><a href="#机器学习导图" class="headerlink" title="机器学习导图"></a>机器学习导图</h2><p><img src="/images/18-ml/4-mlguide.png"></p><h2 id="决策树原理"><a href="#决策树原理" class="headerlink" title="决策树原理"></a>决策树原理</h2><p>每一层选择了指定的特征之后，我们就可以继续由该特征的不同属性值进行划分，依次一直到叶子结点。<br><strong>优点</strong>：计算复杂度不高，不用归一化，适用数据类型：数值型和标称型。<br><strong>缺点</strong>：过拟合-决策树学习者可以创建不能很好地推广数据的过于复杂的树。<br><strong>改进</strong>：1、减枝cart算法(决策树API当中已经实现) 2、随机森林</p><p>1、信息熵H(x)<br>信息熵是考虑该随机变量的所有可能取值，即所有可能发生事件带来的信息量的期望。<br>随机变量的取值个数越多，不确定性越大，则信息量越大，熵越大。当随机分布为均匀分布时，熵最大。<br>公式：H(x) = E[I(xi)] = E[ log(2,1/P(xi)) ] = -∑P(xi)log(2,P(xi)) (i=1,2,..n) 单位为bits。</p><p>2、条件熵H(Y|X)<br>条件熵 H(Y|X)表示在已知随机变量 X 的条件下随机变量 Y 的不确定性。<br>条件熵 H(Y|X)定义为 X 给定条件下 Y 的条件概率分布的熵对 X 的数学期望，相当于联合熵 H(X,Y)减去单独的熵 H(X)，即H(Y|X)=H(X,Y)−H(X)<br><img src="/images/18-ml/5-condition.png"></p><p>3、信息增益(ID3)<br>决策树分类依据之一。<br>信息增益 = 信息熵 - 条件熵，代表了在一个条件下，信息复杂度（不确定性）减少的程度。<br>特征A对训练数据集D的信息增益g(D,A)定义为集合D的信息熵H(D)与特征A给定条件下D的信息条件熵H(D|A)之差,g(D,A) = H(D) - H(D|A)。</p><p>4、计算示例<br><img src="/images/18-ml/6-calculate.png"></p><p>5、分类树gini系数，在sklearn中选择划分的默认原则。</p><h2 id="sklearn-API"><a href="#sklearn-API" class="headerlink" title="sklearn API"></a>sklearn API</h2><h3 id="1、特征抽取"><a href="#1、特征抽取" class="headerlink" title="1、特征抽取"></a>1、特征抽取</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> sklearn.feature_extraction.<span class="constructor">DictVectorizer(<span class="params">dtype</span>=&lt;<span class="params">class</span>‘<span class="params">numpy</span>.<span class="params">float64</span>’&gt;, <span class="params">separator</span>=’=’, <span class="params">sparse</span>=True, <span class="params">sort</span>=True)</span></span><br><span class="line"></span><br><span class="line">dtype：callable, 可选参数, 默认为<span class="built_in">float</span>。特征值的类型，传递给<span class="module-access"><span class="module"><span class="identifier">Numpy</span>.</span></span><span class="built_in">array</span>或者<span class="module-access"><span class="module"><span class="identifier">Scipy</span>.</span></span>sparse矩阵构造器作为dtype参数。</span><br><span class="line">separator: <span class="built_in">string</span>, 可选参数, 默认为<span class="string">&quot;=&quot;</span>。当构造One-hot编码的特征值时要使用的分割字符串。分割传入字典数据的键与值的字符串，生成的字符串会作为特征矩阵的列名。</span><br><span class="line">sparse: boolearn, 可选参数,默认为True。transform是否要使用scipy产生一个sparse矩阵。DictVectorizer的内部实现是将数据直接转换成sparse矩阵，如果sparse为False， 再把sparse矩阵转换成numpy.ndarray型数组。</span><br><span class="line">sort：boolearn,可选参数,默认为True。在拟合时是否要多feature_names和vocabulary_进行排序。</span><br></pre></td></tr></table></figure><p>方法:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">fit</span><span class="params">(X,y=None)</span></span>: 计算出转换结果中feature name与 列索引之间的对照字典vocabulary_，同时会计算出特征名称列表　feature_names_。这里的参数y没有任何作用。</span><br><span class="line"><span class="function"><span class="title">fit_transform</span><span class="params">(X,y=None)</span></span>: 包含fit函数的功能，并且会将X转换成矩阵。</span><br><span class="line"><span class="function"><span class="title">get_feature_names</span><span class="params">()</span></span>: 返回feature_names_</span><br><span class="line"><span class="function"><span class="title">get_params</span><span class="params">(deep=True)</span></span>: 返回当前DictVectorizer对象的构造参数。</span><br><span class="line"><span class="function"><span class="title">inverse_transform</span><span class="params">(X[,dict_type])</span></span>: 将矩阵还原成特征字典列表。还原出来的字典跟原数据并不是完全一样。传入的X必须是这个DictVectorizer经过<span class="attribute">transform</span>或者fit_transform产生的X。</span><br><span class="line"><span class="function"><span class="title">restrict</span><span class="params">(support, indicies=False)</span></span>: 根据传入的support参数，对特征矩阵进行筛选。</span><br><span class="line"><span class="function"><span class="title">set_params</span><span class="params">(**params)</span></span>: 设置DictVectorizer的参数</span><br><span class="line"><span class="function"><span class="title">transform</span><span class="params">(X)</span></span>: 将X转换为numpy.ndarray或者Scipy.sparse</span><br></pre></td></tr></table></figure><p>One-hot编码是将特征所有可能的字符串值构造成布尔型值。<br>DictVectorizer对非数字化的处理方式是，借助原特征的名称，组合成新的特征，并采用0/1的方式进行量化，而数值型的特征转化比较方便，一般情况维持原值即可。例如: 特征f有一个值ham，一个值spam，转换后会变成两个特征f=ham和f=spam。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#学习目标：使用DictVectorizer对使用字典存储的数据进行特征抽取和向量化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一组字典列表，用来表示多个数据样本（每个字典代表一个数据样本）</span></span><br><span class="line">measurements = [&#123;<span class="string">&#x27;city&#x27;</span>:<span class="string">&#x27;Beijing&#x27;</span>,<span class="string">&#x27;temperature&#x27;</span>:33.&#125;,&#123;<span class="string">&#x27;city&#x27;</span>:<span class="string">&#x27;London&#x27;</span>,<span class="string">&#x27;temperature&#x27;</span>:12.&#125;,&#123;<span class="string">&#x27;city&#x27;</span>:<span class="string">&#x27;San Fransisco&#x27;</span>,<span class="string">&#x27;temperature&#x27;</span>:18.&#125;]</span><br><span class="line"><span class="comment">#从sklearn.feature_extraction导入DictVectorizer</span></span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction import DictVectorizer</span><br><span class="line">vec = DictVectorizer()</span><br><span class="line"><span class="comment">#输出转化后的特征矩阵</span></span><br><span class="line"><span class="builtin-name">print</span> vec.fit_transform(measurements).toarray()</span><br><span class="line"><span class="comment">#输出各个维度的特征含义,即特征列名</span></span><br><span class="line"><span class="builtin-name">print</span> vec.get_feature_names()</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[[  <span class="number">1.</span>   <span class="number">0.</span>   <span class="number">0.</span>  <span class="number">33.</span>]</span><br><span class="line"> [  <span class="number">0.</span>   <span class="number">1.</span>   <span class="number">0.</span>  <span class="number">12.</span>]</span><br><span class="line"> [  <span class="number">0.</span>   <span class="number">0.</span>   <span class="number">1.</span>  <span class="number">18.</span>]]</span><br><span class="line"> </span><br><span class="line">[&#x27;city=Dubai&#x27;, &#x27;city=London&#x27;, &#x27;city=San Fransisco&#x27;, &#x27;temperature&#x27;]</span><br></pre></td></tr></table></figure><h3 id="2、分类决策树"><a href="#2、分类决策树" class="headerlink" title="2、分类决策树"></a>2、分类决策树</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class sklearn.tree.DecisionTreeClassifier(<span class="attribute">criterion</span>=<span class="string">&#x27;gini&#x27;</span>, <span class="attribute">splitter</span>=<span class="string">&#x27;best&#x27;</span>, <span class="attribute">max_depth</span>=None, <span class="attribute">min_samples_split</span>=2, <span class="attribute">min_samples_leaf</span>=1, <span class="attribute">min_weight_fraction_leaf</span>=0.0, <span class="attribute">max_features</span>=None, <span class="attribute">random_state</span>=None, <span class="attribute">max_leaf_nodes</span>=None, <span class="attribute">min_impurity_decrease</span>=0.0, <span class="attribute">min_impurity_split</span>=None, <span class="attribute">class_weight</span>=None, <span class="attribute">presort</span>=<span class="string">&#x27;deprecated&#x27;</span>, <span class="attribute">ccp_alpha</span>=0.0)</span><br><span class="line"></span><br><span class="line">criterion:选值&#123;“gini”, “entropy”&#125;，即基尼指数和信息熵，默认<span class="string">&#x27;gini&#x27;</span></span><br><span class="line"></span><br><span class="line">max_depth:树的最大深度，如果不给定则会用进所有特征构建树，或者满足参数minsamples_split时停止</span><br><span class="line"></span><br><span class="line">random_state: 随机种子，int或RandomState。</span><br><span class="line"></span><br><span class="line">class_weight ：样本权重</span><br></pre></td></tr></table></figure><h3 id="3、决策树结构和本地保存"><a href="#3、决策树结构和本地保存" class="headerlink" title="3、决策树结构和本地保存"></a>3、决策树结构和本地保存</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、sklearn.tree.export<span class="constructor">_graphviz()</span> 该函数能够导出DOT格式</span><br><span class="line">tree.export<span class="constructor">_graphviz(<span class="params">estimator</span>,<span class="params">out_file</span>=&#x27;<span class="params">tree</span>.<span class="params">dot</span>’,<span class="params">feature_names</span>=[‘’,’’])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、工具:(能够将dot文件转换为pdf、png)</span><br><span class="line">安装graphviz</span><br><span class="line">ubuntu:sudo apt-get install graphviz  </span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、运行命令</span><br><span class="line">然后我们运行这个命令</span><br><span class="line">$ dot -Tpng tree.dot -o tree.png</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scikit-Learn库的分类方法总览</title>
      <link href="/2019/12/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-Scikit-Learn%E5%BA%93%E7%9A%84%E5%88%86%E7%B1%BB%E6%96%B9%E6%B3%95%E6%80%BB%E8%A7%88/"/>
      <url>/2019/12/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-Scikit-Learn%E5%BA%93%E7%9A%84%E5%88%86%E7%B1%BB%E6%96%B9%E6%B3%95%E6%80%BB%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>你是一个正在进入机器学习领域的Python程序员吗? 掌握Scikit-Learn就是一个开启你的旅程的很好的方式。<br>使用Scikit-Learn进行一些分类是应用你所学到的知识的一种直接而简单的方法，通过使用一个用户友好的、文档良好且健壮的库来实现这些分类可以让机器学习概念更具体化。</p><h2 id="什么是Scikit-Learn"><a href="#什么是Scikit-Learn" class="headerlink" title="什么是Scikit-Learn?"></a>什么是Scikit-Learn?</h2><p>Scikit-Learn是一个Python库，由David Cournapeau在2007年首次开发。它包含一系列容易实现和调整的有用算法，可以用来实现分类和其他机器学习任务的目的。<br>Scikit-Learn使用SciPy作为基础，因此在使用Scikit-Learn之前必须安装这个库的基础堆栈。</p><h2 id="定义术语"><a href="#定义术语" class="headerlink" title="定义术语"></a>定义术语</h2><p>在我们进一步探索Scikit-Learn之前，让我们花一分钟来定义我们的术语。理解描述Scikit-Learn功能时使用的词汇是很重要的。<br>首先，机器学习系统或网络接受输入和输出。机器学习框架的输入通常被称为“特征”。<br>特征本质上与科学实验中的变量相同，它们是被观察现象的特点，可以用某种方式量化或测量。<br>当这些特性被输入到机器学习框架中时，该网络就会尝试识别这些特征之间的相关模式。然后使用这些模式生成框架/网络的输出。<br>框架的输出通常被称为“分类”，因为输出特征会具有一些网络给予它们的标签，它是一些关于输出属于哪个类别的假设。</p><p><img src="/images/18-ml/8-plants.png"></p><p>在机器学习上下文中，分类是一种监督学习。监督学习是指输入网络的数据已经被标记，重要的特征/属性已经预先被划分为不同的类别。</p><p>这意味着网络知道输入的哪些部分是重要的，并且还有一个目标或标准答案，网络可以根据它来检查自己。分类的一个例子是把一堆不同的植物分类成不同的种类，比如蕨类植物或被子植物。这个任务可以通过一个决策树(Scikit-Learn中的一种分类器)来完成。</p><p>相反，无监督学习是指输入网络的数据没有被标记，而网络必须自己学习哪些特性是最重要的。如前所述，分类是一种类型的监督学习，因此我们在本文中将不讨论非监督学习方法。</p><p>模型的训练过程是将数据输入神经网络，让神经网络学习数据的模式的过程。训练过程接收数据并提取数据集的特征。在一个监督分类任务的训练过程中，网络既要传递训练数据的特征，又要传递训练数据的分类。但是，在测试过程中，只给网络传入特征。</p><p>测试过程是对网络学习到的模式进行测试的地方。特征被提供给网络，并且网络必须预测其分类。提供给网络的数据被分为训练集和测试集，这是两个不同的输入集。你不能使用训练分类器的同一个数据集来测试该分类器，因为这个模型已经学习了这组数据的模式，所以结果可能会偏差很大。</p><p>相反，如果数据集被分割成训练集和测试集，那么这样一来，一个是用来训练分类器的数据集，而另一个则是分类器从未见过的数据集。</p><h2 id="不同类型的分类器"><a href="#不同类型的分类器" class="headerlink" title="不同类型的分类器"></a>不同类型的分类器</h2><p>Scikit-Learn提供了对多种不同分类算法的简单访问。这些分类器包括:</p><ul><li>K最近邻算法</li><li>支持向量机</li><li>决策树分类器/随机森林</li><li>朴素贝叶斯</li><li>线性判别分析</li><li>逻辑回归</li></ul><p>有很多关于这些分类器如何运行的文献，你也可以在Scikit-Learn的网站上找到它们的简要解释。</p><p>由于这个原因，我们不打算在这里深入研究它们是如何工作的，但是会对分类器的工作方式进行简要的说明。</p><h3 id="K最近邻分类算法"><a href="#K最近邻分类算法" class="headerlink" title="K最近邻分类算法"></a>K最近邻分类算法</h3><p>K最近邻分类算法通过检查某个测试示例到某个训练示例的已知值之间的距离来进行计算。能给出训练点与测试点之间最小距离的一组数据点/类就是该算法所选择的类。</p><h3 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h3><p>决策树分类器通过根据不同的标准将数据集分解为越来越小的子集来进行计算。它会使用不同的排序标准来划分数据集，每划分一次，示例的数量就会减少。</p><p>一旦网络将数据划分为一个示例，这个示例将被放入一个对应于一个键的类中。当多个随机的森林分类器链接在一起时，它们就被称为随机森林分类器。</p><h3 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h3><p>一个朴素贝叶斯分类器会确定一个例子属于某个类的概率，它会计算在某个输入事件已经发生的情况下，某个事件发生的概率。</p><p>当它进行这种计算时，它会假定一个类的所有预测器都对结果具有相同的影响，即预测器是相互独立的。</p><h3 id="线性判别分析"><a href="#线性判别分析" class="headerlink" title="线性判别分析"></a>线性判别分析</h3><p>线性判别分析的工作原理是通过降低数据集的维度，将所有数据点投影到一条直线上。然后根据这些点与所选点或矩心的距离将它们组合成类。</p><p>和你所猜想的一样，线性判别分析是一种线性分类算法，最好在数据具有线性关系时使用。</p><h3 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h3><p><img src="/images/18-ml/9-vectors.png"><br>支持向量机的工作原理是在不同的数据点集群之间画一条线，将它们分组到一些类中。线的一边的点是一类，另一边的点属于另一类。</p><p>分类器会尝试最大化它所绘制的线与它两边的点之间的距离，以增加它对哪个点属于哪类的置信度。当测试点被绘制出来时，它们在直线的哪边就是它们所属的类。</p><h3 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h3><p>逻辑回归以二元范围 (0或1)输出关于测试数据点的预测。如果某个东西的值为0.5或以上，则将其划分为第1类，如果值低于0.5就属于第0类。</p><p>每个特征也只有0或1的分类。逻辑回归是一种线性分类器，因此当数据之间存在某种线性关系时就会用到它。</p><h2 id="分类任务的例子"><a href="#分类任务的例子" class="headerlink" title="分类任务的例子"></a>分类任务的例子</h2><p>分类任务是将样本放入两个或多个类中的任何任务。确定一个图片是猫还是狗就是一项分类任务，就像根据酸度和酒精含量等特征确定一瓶酒的质量一样。<br>根据手头的分类任务，你可能希望使用不同的分类器。例如，逻辑回归模型最适合于二元分类任务，即使存在多变量逻辑回归模型。<br>随着你获得的分类器经验越多，你就会对何时使用哪个分类器有更好的感觉。但是，通常的做法是实例化多个分类器，并比较它们之间的性能，然后选择性能最好的分类器。</p><h2 id="实现一个分类器"><a href="#实现一个分类器" class="headerlink" title="实现一个分类器"></a>实现一个分类器</h2><p>现在我们已经讨论了Scikit-Learn为我们提供的各种分类器，我们来看看如何实现一个分类器。<br>实现分类器的第一步是将所需要的分类器导入到Python中。我们来看看逻辑回归的import语句:<br><code>from sklearn.liner_model import LogisticRegression</code></p><p>下面是本文讨论的其他分类器的import语句:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.discriminant_analysis <span class="keyword">import</span> LinearDiscriminantAnalysis</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNb</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br></pre></td></tr></table></figure><p>Scikit-Learn还有其他分类器，它们各自的文档页面会展示如何导入它们。</p><p>在导入之后，你就必须实例化分类器。实例化是在Python程序中将分类器转换成存在的实例的过程，也就是创建分类器/对象的实例。</p><p>这通常只需要创建一个变量并调用与分类器关联的函数来完成:</p><p><code>logreg_clf = LogisticRegression()</code></p><p>现在需要对分类器进行训练。要做到这一点，分类器必须与训练数据相匹配。</p><p>训练特征和训练分类通过fit命令传入分类器:</p><p><code>logreg_clf.fit(features,labels)</code></p><p>分类器模型在训练数据上进行训练后，可以对测试数据进行预测了。</p><p>这很容易做到，你可以调用分类器上的预测命令，并为其提供预测所需的参数，这些参数是你的测试数据集中的特征:</p><p><code>logreg_clf.predict(test_features)</code></p><p>实例化、拟合/训练和预测这些步骤是Scikit-Learn中分类器的基本工作流。</p><p>然而，分类器的处理只是使用Scikit-Learn进行分类的一部分。在Scikit-Learn中分类的另一部分是处理数据。</p><p>为了理解处理分类器和处理数据是怎样作为一个整体分类任务结合在一起的，我们花点时间来理解机器学习管道。</p><h2 id="机器学习管道"><a href="#机器学习管道" class="headerlink" title="机器学习管道"></a>机器学习管道</h2><p>机器学习管道包括以下步骤:准备数据、创建训练/测试集、实例化分类器、训练分类器、进行预测、评估性能、调整参数。</p><p>在数据集上训练分类器的第一步是准备数据集——将数据转换为分类器所需的正确形式，并处理数据中的任何异常。如果数据中有缺失值、异常值或任何其他异常，这些数据点都要被处理，因为它们会对分类器的性能产生负面影响。这一步称为数据预处理。</p><p>数据预处理完成后，必须将数据分解为训练集和测试集。我们之前已经讨论了创建训练和测试集的基本原理，这可以通过一个非常有用的名为traintestsplit的函数在Scikit-Learn中轻松实现。</p><p>如前所述，分类器必须进行实例化并在训练数据上进行训练。然后就可以利用分类器进行预测。通过将分类器的预测与测试数据中分类的实际已知值进行比较，你就可以测量该分类器的准确度。</p><p>将假定的分类与实际分类进行比较并评估分类器的方法有很多。我们稍后将讨论这些不同的评估指标。现在，要知道，在测量了分类器的准确的之后，你可能会回过头来调整你的模型的参数，直到达到你满意的准确度为止(因为你的分类器不太可能在第一次运行时就达到你的期望)。</p><p>让我们看一个机器学习管道的例子，从处理数据到进行评估。</p><h2 id="示例分类器实现"><a href="#示例分类器实现" class="headerlink" title="示例分类器实现"></a>示例分类器实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classificaction_report</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KneighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br></pre></td></tr></table></figure><p>由于iris数据集非常常见，Scikit-Learn实际上已经具有了，我们可以用以下命令进行加载:<br><code>sklearn.datasets.load_iris</code><br>不过，我们将在这里加载一个CSV文件，以便你了解如何加载和预处理数据。你可以在这里（<a href="https://www.kaggle.com/uciml/iris">https://www.kaggle.com/uciml/iris</a>  ）下载这个csv文件。</p><p>只需将数据文件放在与Python文件相同的目录中。Pandas库有一个简单的加载数据的方法，即read_csv():</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">&quot;iris.csv&quot;</span>)</span><br><span class="line">print(data.head(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>因为数据集准备得很好，所以我们不需要进行很多预处理。我们可能会想做的一件事是删除“ID”列，因为它只是对示例所在行的一个表示。</p><p>由于这一列并没有任何帮助，所以我们可以使用drop()函数从数据集中删除它:<br><code>data.drop(&#39;Id&#39;,axis=1,inplace=True)</code></p><p>现在我们需要定义特征和分类。我们可以使用Pandas库通过对数据表进行切片，并使用iloc()选择特定的行/列来轻松地实现这一点:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = data.iloc[:,:<span class="number">-1</span>].values</span><br><span class="line"></span><br><span class="line">y = data[<span class="string">&#x27;Species&#x27;</span>]</span><br></pre></td></tr></table></figure><p>上面的切片符号会选择除最后一列(这是我们的分类，物种)之外的每一行和每一列。<br>或者，你也可以通过使用括号符号和传递列标头来选择你感兴趣的某些数据集特性:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Alternate way of selecting columns:</span></span><br><span class="line">x = data.iloc[<span class="string">&#x27;SepalLengthCm&#x27;</span>,<span class="string">&#x27;SepalWidthCm&#x27;</span>,<span class="string">&#x27;PetalLengthCm&#x27;</span>]</span><br></pre></td></tr></table></figure><p>现在我们已经有了我们想要的特征和分类，我们可以使用sklearn的train_test_split()函数将数据分割为训练集和测试集:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Test size specifies how much of the data you want to set aside for the testing set.</span></span><br><span class="line"><span class="comment"># Random_state parameter is just a random seed we can use.</span></span><br><span class="line"><span class="comment"># You can use it if you&#x27;d like to reproduce these specific result.</span></span><br><span class="line">x-train,x_test,y_train,y_test = train_test_split(x,y,test_size=<span class="number">0.20</span>,random_state=<span class="number">27</span>)</span><br></pre></td></tr></table></figure><p>你可能想打印结果，以确保你的数据正在按照你所期望的方式被解析:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(x_train)</span><br><span class="line">print(y_train)</span><br></pre></td></tr></table></figure><p>现在我们可以实例化这个模型。我们尝试使用两个分类器，一个支持向量分类器和一个k最近邻分类器:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SVC_model = svm.SVC()</span><br><span class="line">KNN_model = KNeighborsClassifier(n_neighbors=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>现在我们来适应分类器:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SVC_model.fit(x_train,y_train)</span><br><span class="line">KNN_model.fit(x_train,y_train)</span><br></pre></td></tr></table></figure><p>以上调用已经训练了这个模型，现在我们可以进行预测并将预测结果存储在一个变量中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SVC_prediction = SVC_model.predict(x_test)</span><br><span class="line">KNN_prediction = KNN_model.predict(x_test)</span><br></pre></td></tr></table></figure><p>现在我们应该评估一下分类器的运行情况。有多种方法可以用来评估一个分类器的性能，你可以在下面阅读关于这些不同方法的更多信息。</p><p>在Scikit-Learn中，你只需要输入与你测试标签中存储的真实分类相对的预测结果即可:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(accuracy_score(SVC_prediction,y_test))</span><br><span class="line">print(accuracy_score(KNN_prediction,y_test))</span><br><span class="line"></span><br><span class="line">print(confusion_matrix(SVC_prediction,y_test))</span><br><span class="line">print(classification_report(KNN_prediction,y_test))</span><br></pre></td></tr></table></figure><p>作为参考，下面是我们得到的关于指标的输出:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">SVC</span> accuracy:<span class="number">0</span>.<span class="number">9333333333333</span></span><br><span class="line"><span class="attribute">KNN</span> accuracy:<span class="number">0</span>.<span class="number">9666666666667</span></span><br></pre></td></tr></table></figure><p>乍一看，KNN的表现似乎更好。这是SVC的混淆矩阵:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[ <span class="number">7</span> <span class="number">0</span> <span class="number">0</span> ]</span><br><span class="line"> [<span class="number">0</span> <span class="number">10</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">1</span> <span class="number">11</span>]]</span><br></pre></td></tr></table></figure><p>这可能有点难以解释，但是每个类的正确预测数都是从左上角到右下角的对角线上运行的。查看下面的更多信息。</p><p>最后，这是KNN分类报告的输出:<br><img src="/images/18-ml/10-knnoutput.png"></p><h2 id="评估分类器"><a href="#评估分类器" class="headerlink" title="评估分类器"></a>评估分类器</h2><p>在评估你的分类器时，有几种不同的方法可以用来测量它的性能。</p><h3 id="分类准确度"><a href="#分类准确度" class="headerlink" title="分类准确度"></a>分类准确度</h3><p>分类准确度是所有评估准确性的方法中最简单的，也是最常用的。分类准确度就是正确预测的数量除以所有预测或者正确预测与总预测的比例。<br>虽然它可以让你快速了解分类器的执行情况，但是最好在每个类中的观察值/示例数量大致相当时再使用它。因为这种情况不会经常发生，所以你最好使用另一种指标方法。</p><h2 id="对数损失"><a href="#对数损失" class="headerlink" title="对数损失"></a>对数损失</h2><p>对数损失,或LogLoss,本质上是评估分类器对其预测结果的自信程度。LogLoss会返回给定类中一个示例中成员的概率，将它们加起来表示分类器的总体信心。<br>针对预测的值取值为1到0,1表示完全自信，0表示不自信。损失，或者信心的总缺乏度，以负数的形式返回，0表示一个完美的分类器，所以值越小越好。</p><h2 id="ROC曲线下与坐标轴围成的面积-AUC"><a href="#ROC曲线下与坐标轴围成的面积-AUC" class="headerlink" title="ROC曲线下与坐标轴围成的面积(AUC)"></a>ROC曲线下与坐标轴围成的面积(AUC)</h2><p>这是一个仅用于二元分类问题的指标。曲线下的面积代表了模型正确区分正负样本的能力，以及区分一个类和另一个类的能力。<br>落在曲线下的面积总和为1.0，这代表一个完美的分类器。这意味着AUC为0.5基本上和随机猜测一样好。ROC曲线根据灵敏度(真阳率/召回率)和特异性(真阴率)计算。你可以在这篇ROC曲线文章中阅读更多关于这些计算的内容。</p><h2 id="混淆矩阵"><a href="#混淆矩阵" class="headerlink" title="混淆矩阵"></a>混淆矩阵</h2><p>混淆矩阵是一个表或图表，表示模型相对于两个或多个类的准确性。模型的预测用x轴表示，而结果/准确度用y轴表示。<br>这个单元格中被填入了模型做出的预测数量。正确的预测可以在从左上角到右下角的对角线上找到。你可以在这里阅读更多关于解释混淆矩阵的内容。</p><h2 id="分类报告"><a href="#分类报告" class="headerlink" title="分类报告"></a>分类报告</h2><p>分类报告是一种Scikit-Learn的内置指标，专门针对分类问题而创建。使用分类报告可以让你快速直观地了解模型的执行情况。召回率会将你的模型标记为类A(某些给定的类)的样本数量与类A的样本总数进行比较，这在报告中会表示出来。<br>该报告还返回预测和f1得分。精确度是您的模型被标记为类A的实例的百分比，它实际上属于类A(真阳性对假阳性)，而f1-score是精确度和召回率的平均值。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>为了进一步加深你对Scikit-Learn的理解，你最好多了解一些可用的不同分类算法。一旦你理解了这些算法，阅读更多关于如何评估分类器的内容。<br>分类的许多细微差别只是随着时间和实践而来的，但是如果你按照本指南中的步骤，那你将会在成为一个使用Scikit-Learn处理分类任务的专家的道路上走得很好。</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie Session Cookiejar</title>
      <link href="/2019/11/27/Cookie%20Session%20Cookiejar/"/>
      <url>/2019/11/27/Cookie%20Session%20Cookiejar/</url>
      
        <content type="html"><![CDATA[<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><ul><li>持久化: 保存到本地磁盘上，在设置的expire时间内关闭浏览器后依然有效。</li><li>非持久化: 储存在浏览器内存中，关闭则失效。<br>Cookie是服务器在本地机器上存储的小段文本，可以用于保存用户喜好、用户名密码、用户喜欢的网页背景色，并随每一个请求发送至同一个服务器。<br>Cookie的内容主要包括：名字，值，过期时间，路径和域，路径与域一起构成cookie的作用范围。<br>格式：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">客户端发送Cookie（键值对）：Cookie：<span class="attribute">key1</span>=value1; <span class="attribute">key2</span>=value2; <span class="attribute">key3</span>=value3</span><br><span class="line">服务器响应Cookie：Set-Cookie: <span class="attribute">name</span>=value；expires=date；path=path；domain=domain_name；secure</span><br></pre></td></tr></table></figure></li></ul><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>session机制借助于cookie机制在客户端保存标识达到在服务器端保持状态，用一个sessionID来区分是哪个用户session变量,这个值是通过用户的浏览器在访问的时候返回给服务器。<br>session是在服务端保存的一个数据结构，用来跟踪用户的状态，数据可以保存在集群、数据库、文件中，能够存取任何类型的数据，不限于String、Integer、List、Map。<br>sessionID是客户端第一次访问服务器的时候生成的，传递回服务器的方式除Cookie外还有URL重写、表单隐藏字段。</p><h2 id="application"><a href="#application" class="headerlink" title="application"></a>application</h2><p>Session保管在服务端，若并发访问的用户十分多，会耗费大量内存，因此对于大体量网站，Cookie是优先选择。<br>Cookie支持跨域名访问。</p><h2 id="Scrapy-CookieMiddle"><a href="#Scrapy-CookieMiddle" class="headerlink" title="Scrapy CookieMiddle"></a>Scrapy CookieMiddle</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> six</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> NotConfigured</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> scrapy.http.cookies <span class="keyword">import</span> CookieJar</span><br><span class="line"><span class="keyword">from</span> scrapy.utils.python <span class="keyword">import</span> to_native_str</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CookiesMiddleware</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;This middleware enables working with sites that need cookies&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 中间件在Scrapy启动时实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, debug=False</span>):</span></span><br><span class="line">    <span class="comment"># jars属性是一个默认值为CookieJar对象的dict.</span></span><br><span class="line">        self.jars = defaultdict(CookieJar)</span><br><span class="line">        self.debug = debug</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span>(<span class="params">cls, crawler</span>):</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> crawler.settings.getbool(<span class="string">&#x27;COOKIES_ENABLED&#x27;</span>):</span><br><span class="line">            <span class="keyword">raise</span> NotConfigured</span><br><span class="line">        <span class="keyword">return</span> cls(crawler.settings.getbool(<span class="string">&#x27;COOKIES_DEBUG&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.meta.get(<span class="string">&#x27;dont_merge_cookies&#x27;</span>, <span class="literal">False</span>):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"><span class="comment"># 每个cookiesjar的key都存储在 meta字典中，如果在request meta中使用了cookiejar, cookiejarkey为对应的标识，否则为None</span></span><br><span class="line">        cookiejarkey = request.meta.get(<span class="string">&quot;cookiejar&quot;</span>)</span><br><span class="line">        jar = self.jars[cookiejarkey]</span><br><span class="line">        <span class="comment"># 第一次执行jars会为每个key产生一个默认值cookiejar对象.默认为&#123;None: cookiejar&#125;</span></span><br><span class="line">        cookies = self._get_request_cookies(jar, request)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 把requests的cookies存储到cookiesjar中</span></span><br><span class="line">        <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies:</span><br><span class="line">            jar.set_cookie_if_ok(cookie, request)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># set Cookie header</span></span><br><span class="line">        request.headers.pop(<span class="string">&#x27;Cookie&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># 添加cookiesjar中的cookies到requests header</span></span><br><span class="line">        jar.add_cookie_header(request)</span><br><span class="line">        self._debug_cookie(request, spider)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self, request, response, spider</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.meta.get(<span class="string">&#x27;dont_merge_cookies&#x27;</span>, <span class="literal">False</span>):</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">        <span class="comment"># extract cookies from Set-Cookie and drop invalid/expired cookies</span></span><br><span class="line">        cookiejarkey = request.meta.get(<span class="string">&quot;cookiejar&quot;</span>)</span><br><span class="line">        jar = self.jars[cookiejarkey]</span><br><span class="line">        <span class="comment"># 在请求允许的情况下(?),从response中提取cookie并入当前的cookiejar</span></span><br><span class="line">        jar.extract_cookies(response, request)</span><br><span class="line">        self._debug_set_cookie(response, spider)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_debug_cookie</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.debug:</span><br><span class="line">            cl = [to_native_str(c, errors=<span class="string">&#x27;replace&#x27;</span>)</span><br><span class="line">                  <span class="keyword">for</span> c <span class="keyword">in</span> request.headers.getlist(<span class="string">&#x27;Cookie&#x27;</span>)]</span><br><span class="line">            <span class="keyword">if</span> cl:</span><br><span class="line">                cookies = <span class="string">&quot;\n&quot;</span>.join(<span class="string">&quot;Cookie: &#123;&#125;\n&quot;</span>.format(c) <span class="keyword">for</span> c <span class="keyword">in</span> cl)</span><br><span class="line">                msg = <span class="string">&quot;Sending cookies to: &#123;&#125;\n&#123;&#125;&quot;</span>.format(request, cookies)</span><br><span class="line">                logger.debug(msg, extra=&#123;<span class="string">&#x27;spider&#x27;</span>: spider&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_debug_set_cookie</span>(<span class="params">self, response, spider</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.debug:</span><br><span class="line">            cl = [to_native_str(c, errors=<span class="string">&#x27;replace&#x27;</span>)</span><br><span class="line">                  <span class="keyword">for</span> c <span class="keyword">in</span> response.headers.getlist(<span class="string">&#x27;Set-Cookie&#x27;</span>)]</span><br><span class="line">            <span class="keyword">if</span> cl:</span><br><span class="line">                cookies = <span class="string">&quot;\n&quot;</span>.join(<span class="string">&quot;Set-Cookie: &#123;&#125;\n&quot;</span>.format(c) <span class="keyword">for</span> c <span class="keyword">in</span> cl)</span><br><span class="line">                msg = <span class="string">&quot;Received cookies from: &#123;&#125;\n&#123;&#125;&quot;</span>.format(response, cookies)</span><br><span class="line">                logger.debug(msg, extra=&#123;<span class="string">&#x27;spider&#x27;</span>: spider&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_format_cookie</span>(<span class="params">self, cookie</span>):</span></span><br><span class="line">        <span class="comment"># build cookie string</span></span><br><span class="line">        <span class="comment"># 对以字典或字典的列表的形式传入的cookie进行格式化</span></span><br><span class="line">        cookie_str = <span class="string">&#x27;%s=%s&#x27;</span> % (cookie[<span class="string">&#x27;name&#x27;</span>], cookie[<span class="string">&#x27;value&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cookie.get(<span class="string">&#x27;path&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">            cookie_str += <span class="string">&#x27;; Path=%s&#x27;</span> % cookie[<span class="string">&#x27;path&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> cookie.get(<span class="string">&#x27;domain&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">            cookie_str += <span class="string">&#x27;; Domain=%s&#x27;</span> % cookie[<span class="string">&#x27;domain&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cookie_str</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_request_cookies</span>(<span class="params">self, jar, request</span>):</span></span><br><span class="line"><span class="comment"># 将request中cookies参数添加的cookie合并到当前的cookiejar中</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(request.cookies, dict):</span><br><span class="line">            cookie_list = [&#123;<span class="string">&#x27;name&#x27;</span>: k, <span class="string">&#x27;value&#x27;</span>: v&#125; <span class="keyword">for</span> k, v <span class="keyword">in</span> \</span><br><span class="line">                    six.iteritems(request.cookies)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cookie_list = request.cookies</span><br><span class="line"></span><br><span class="line">        cookies = [self._format_cookie(x) <span class="keyword">for</span> x <span class="keyword">in</span> cookie_list]</span><br><span class="line">        headers = &#123;<span class="string">&#x27;Set-Cookie&#x27;</span>: cookies&#125;</span><br><span class="line">        <span class="comment"># 使用刚才获取的cookie构造一个响应对象</span></span><br><span class="line">        response = Response(request.url, headers=headers)</span><br><span class="line"><span class="comment"># cookiejar.make_cookies方法从response中提取cookie放入当前cookiejar中.</span></span><br><span class="line">        <span class="keyword">return</span> jar.make_cookies(response, request)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 元类 工厂模式 单例模式</title>
      <link href="/2019/11/10/Python%20%E5%85%83%E7%B1%BB%20%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%20%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/11/10/Python%20%E5%85%83%E7%B1%BB%20%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%20%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h2><p>1、抽象类：主要定义了基本类和最基本的抽象方法，相当于Java中的接口。<br>2、抽象方法：基类中通过@abc.abstractmethod装饰器修饰的方法。<br>3、抽象基类不能被实例化(不能创建对象)，通常是作为基类供子类继承，子类中重写虚函数，实现具体的接口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cow</span>(<span class="params">metaclass=abc.ABCMeta</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;__init__ is called!&#x27;</span>)</span><br><span class="line"><span class="comment"># 抽象方法</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prt</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;1234&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 定义子类，若子类未实现prt方法实例化报错</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">son</span>(<span class="params">cow</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prt</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 在子类中可以通过super()来调用父类方法</span></span><br><span class="line">        super().prt()</span><br><span class="line">        print(<span class="string">&quot;5678&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h2><p>1、object类和type类的关系：Python 中的类是 type 类的实例，object 是 type 的实例，而 type 是 object 的子类，所有类都是 type 的实例，但是元类还是 type的子类。<br>2、type(类名, 父类的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）)<br>name: 生产的类名<br>bases：基类的tuple,无父类则为()<br>dict：字典形式类的所有属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpperAttrMetaclass</span>(<span class="params">type</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, name, bases, dct</span>):</span></span><br><span class="line">        attrs = ((name, value) <span class="keyword">for</span> name, value <span class="keyword">in</span> dct.items() <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">&#x27;__&#x27;</span>)</span><br><span class="line">        uppercase_attr  = dict((name.upper(), value) <span class="keyword">for</span> name, value <span class="keyword">in</span> attrs)</span><br><span class="line">        <span class="keyword">return</span> type.__new__(cls, name, bases, uppercase_attr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3的用法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params">object, metaclass = UpperAttrMetaClass</span>):</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><p>应用场景:具体的程序运行日志，网络日志，数据库日志等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Operation</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num1=<span class="number">0</span>, num2=<span class="number">0</span></span>):</span></span><br><span class="line">        self.num1 = num1</span><br><span class="line">        self.num2 = num2</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parsed_data</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetSum</span>(<span class="params">Operation</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parsed_data</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;num1+num2&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.num1 + self.num2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetReduce</span>(<span class="params">Operation</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parsed_data</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;num1-num2&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.num1 - self.num2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工厂方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose_factory</span>(<span class="params">classname</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    工厂模式接口函数</span></span><br><span class="line"><span class="string">    :param classname:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    run = dict(GetReduce=GetReduce, GetSum=GetSum)</span><br><span class="line">    <span class="keyword">return</span> run[classname]()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test1 = choose_factory(<span class="string">&#x27;GetSum&#x27;</span>)</span><br><span class="line">    test1.num1 = <span class="number">1</span></span><br><span class="line">    test1.num2 = <span class="number">3</span></span><br><span class="line">    test1.parsed_data()</span><br></pre></td></tr></table></figure><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>应用场景：软件系统界面中不同主题下不同的按钮、文本框、字体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mercedes</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;梅赛德斯&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Mercedes-Benz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMW</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;宝马&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BMW&quot;</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;抽象工厂&quot;&quot;&quot;</span></span><br><span class="line">    __metaclass__ = abc.ABCMeta</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">product_car</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MercedesFactory</span>(<span class="params">AbstractFactory</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;梅赛德斯工厂&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">product_car</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Mercedes()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BMWFactory</span>(<span class="params">AbstractFactory</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;宝马工厂&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">product_car</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> BMW()</span><br><span class="line">c1 = MercedesFactory().product_car()</span><br><span class="line">c2 = BMWFactory().product_car()</span><br></pre></td></tr></table></figure><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>理解：详细分析：在已打开回收站时，再打开一个新的回收站时，Windows系统并不会为你弹出一个新的回收站窗口，整个系统运行的过程中，系统只维护一个回收站的实例。<br>目的：每次执行类初始化返回的对象,内存地址都是相同的<br>场景：需要频繁实例化然后销毁的对象,方便资源相互通信的环境。<br>1、Python用以日志记录的logger就是一个单例模式<br>2、线程池，数据库连接池等资源池<br>3、配置文件读取<br>4、网站计数器</p><p><strong>优点：</strong></p><ul><li>在内存中只有一个对象，节省内存空间；</li><li>避免频繁地创建销毁对象，可以提高性能；</li><li>避免对共享资源的多重占用；</li><li>可以全局访问。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinglethonType</span>(<span class="params">type</span>):</span></span><br><span class="line">    _instance_lock = threading.Lock()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">cls,*args,**kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls,<span class="string">&quot;_instance&quot;</span>):</span><br><span class="line">            <span class="keyword">with</span> SingletonType._instance_lock:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls,<span class="string">&quot;_instance&quot;</span>):</span><br><span class="line">                    cls._instance = super(SingethonType,cls).__call__(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br></pre></td></tr></table></figure><p><strong>完整实例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MusicPlayer</span>:</span></span><br><span class="line">    <span class="comment"># 记录第一个被创建对象的引用</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 记录是否执行过初始化动作</span></span><br><span class="line">    init_flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        创建对象</span></span><br><span class="line"><span class="string">        :param args:</span></span><br><span class="line"><span class="string">        :param kwargs:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        print(<span class="string">&quot;创建对象 分配空间&quot;</span>)</span><br><span class="line">        <span class="comment"># 1.判断类属性是否为空对象</span></span><br><span class="line">        <span class="keyword">if</span> cls.instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 2.调用父类的方法，为第一个对象分配空间</span></span><br><span class="line">            cls.instance = super().__new__(cls)</span><br><span class="line">        <span class="comment"># 3.返回类属性保存的对象引用</span></span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 默认的init方法是不可控的</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        播放器初始化</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 1、判断是否执行过初始化动作</span></span><br><span class="line">        <span class="keyword">if</span> MusicPlayer.init_flag:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 2、执行初始化动作</span></span><br><span class="line">        print(<span class="string">&quot;播放器初始化&quot;</span>)</span><br><span class="line">        <span class="comment"># 3、修改类属性标记</span></span><br><span class="line">        MusicPlayer.init_flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_instance</span>(<span class="params">cls, name</span>):</span></span><br><span class="line">        <span class="keyword">if</span> cls.instance:</span><br><span class="line">            <span class="keyword">return</span> cls.instance</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            obj = cls(name)</span><br><span class="line">            cls.instance = obj</span><br><span class="line">            <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    player = MusicPlayer()</span><br><span class="line">    player2 = MusicPlayer()</span><br><span class="line">    <span class="comment"># 两次创建对象，结果返回的是同一个对象实例</span></span><br><span class="line">    print(player, player2)</span><br></pre></td></tr></table></figure><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">Customer = namedtuple(<span class="string">&#x27;Customer&#x27;</span>, <span class="string">&#x27;name fidelity&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, product, quantity, price</span>):</span></span><br><span class="line">        self.product = product</span><br><span class="line">        self.quantity = quantity</span><br><span class="line">        self.price = price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.price * self.quantity</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span>:</span>  <span class="comment"># the Context</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, customer, cart, promotion=None</span>):</span></span><br><span class="line">        self.customer = customer</span><br><span class="line">        self.cart = list(cart)</span><br><span class="line">        self.promotion = promotion</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">&#x27;__total&#x27;</span>):</span><br><span class="line">            self.__total = sum(item.total() <span class="keyword">for</span> item <span class="keyword">in</span> self.cart)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.__total</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">due</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.promotion <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            discount = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            discount = self.promotion(self)  <span class="comment"># &lt;1&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.total() - discount</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        fmt = <span class="string">&#x27;&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> fmt.format(self.total(), self.due())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;2&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fidelity_promo</span>(<span class="params">order</span>):</span>  <span class="comment"># &lt;3&gt;</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;5% discount for customers with 1000 or more fidelity points&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> order.total() * <span class="number">.05</span> <span class="keyword">if</span> order.customer.fidelity &gt;= <span class="number">1000</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bulk_item_promo</span>(<span class="params">order</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;10% discount for each LineItem with 20 or more units&quot;&quot;&quot;</span></span><br><span class="line">    discount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> order.cart:</span><br><span class="line">        <span class="keyword">if</span> item.quantity &gt;= <span class="number">20</span>:</span><br><span class="line">            discount += item.total() * <span class="number">.1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> discount</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">large_order_promo</span>(<span class="params">order</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;7% discount for orders with 10 or more distinct items&quot;&quot;&quot;</span></span><br><span class="line">    distinct_items = &#123;item.product <span class="keyword">for</span> item <span class="keyword">in</span> order.cart&#125;</span><br><span class="line">    <span class="keyword">if</span> len(distinct_items) &gt;= <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> order.total() * <span class="number">.07</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">promos = [fidelity_promo, bulk_item_promo, large_order_promo]  <span class="comment"># &lt;1&gt;promos 列出以函数实现的各个策略。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_promo</span>(<span class="params">order</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Select best discount available</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> max(promo(order) <span class="keyword">for</span> promo <span class="keyword">in</span> promos)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算折扣只需调用self.promotion()函数</span></span><br><span class="line"><span class="comment"># 没有抽象类 , 各个策略都是函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    joe = Customer(<span class="string">&#x27;John Doe&#x27;</span>, <span class="number">0.5</span>)</span><br><span class="line">    ann = Customer(<span class="string">&#x27;Ann Smith&#x27;</span>, <span class="number">1100</span>)</span><br><span class="line"></span><br><span class="line">    cart = [LineItem(<span class="string">&#x27;banana&#x27;</span>, <span class="number">4</span>, <span class="number">0.5</span>), LineItem(<span class="string">&#x27;apple&#x27;</span>, <span class="number">10</span>, <span class="number">1.5</span>), LineItem(<span class="string">&#x27;watermellon&#x27;</span>, <span class="number">5</span>, <span class="number">5.0</span>)]</span><br><span class="line">    print(Order(joe, cart, fidelity_promo))</span><br><span class="line">    print(Order(ann, cart, fidelity_promo))</span><br><span class="line"></span><br><span class="line">    banana_cart = [LineItem(<span class="string">&#x27;banana&#x27;</span>, <span class="number">30</span>, <span class="number">0.5</span>), LineItem(<span class="string">&#x27;apple&#x27;</span>, <span class="number">10</span>, <span class="number">1.5</span>)]</span><br><span class="line">    print(Order(joe, banana_cart, bulk_item_promo))</span><br><span class="line"></span><br><span class="line">    best_order = Order(ann, cart)</span><br><span class="line">    <span class="comment"># 返回折扣最大的</span></span><br><span class="line">    print(best_promo(best_order))</span><br><span class="line"></span><br><span class="line"><span class="comment"># import types</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class People:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def __init__(self, func=None):</span></span><br><span class="line"><span class="comment">#         if func:</span></span><br><span class="line"><span class="comment">#             # 动态绑定(模块方法在调用的时候自动传入被调用对象作为self参数)</span></span><br><span class="line"><span class="comment">#             self.speak = types.MethodType(func, self)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def speak(self):</span></span><br><span class="line"><span class="comment">#         print(&quot;说中文&quot;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def speak_english(self):</span></span><br><span class="line"><span class="comment">#     print(&#x27;说英语&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def speak_german(self):</span></span><br><span class="line"><span class="comment">#     print(&#x27;说德语&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="comment">#     test1 = People()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     test2 = People(speak_english)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     test3 = People(speak_german)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     [func.speak() for func in [test1, test2, test3]]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 多进程与多线程</title>
      <link href="/2019/11/09/Python%20%E5%A4%9A%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2019/11/09/Python%20%E5%A4%9A%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>1、线程标识<br><code>threading.currentThread().ident</code><br>2、线程名<br><code>threading.currentThread().name</code><br>3、返回一个包含正在运行的线程的list<br><code>threading.enumerate()</code></p><h3 id="threading"><a href="#threading" class="headerlink" title="threading"></a>threading</h3><p>方式一：函数实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;thread worker function&quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&#x27;Worker: %s&#x27;</span> % num)</span><br><span class="line">print(<span class="string">&quot;name:%s&quot;</span> % threading.current_thread().name)</span><br><span class="line">    print(<span class="string">&quot;ident:%s&quot;</span> % threading.current_thread().ident)</span><br><span class="line">    print(threading.enumerate())</span><br><span class="line"></span><br><span class="line">threads = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    t = threading.Thread(target=worker, args=(i,))</span><br><span class="line">    threads.append(t)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p>方式二:继承threading.Thread，然后重写__init__方法和run方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, thread_id</span>):</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.threadID = thread_id</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 把要执行的代码写到run函数里面,线程在创建后会直接运行run函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.login()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            print(<span class="string">f&quot;<span class="subst">&#123;self.threadID&#125;</span> sleep 1s&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">        print(<span class="string">&quot;这是登陆函数&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="concurrent-futures-ThreadPoolExecutor"><a href="#concurrent-futures-ThreadPoolExecutor" class="headerlink" title="concurrent.futures.ThreadPoolExecutor"></a>concurrent.futures.ThreadPoolExecutor</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 优点：主线程可以获取某一线程的状态或者某一任务的状态及返回值</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span>(<span class="params">times, url</span>):</span></span><br><span class="line">    time.sleep(times)</span><br><span class="line">    print(<span class="string">&quot;&#123;&#125; get page &#123;&#125; Finished&quot;</span>.format(url, times))</span><br><span class="line">    <span class="keyword">return</span> times</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> executor:</span><br><span class="line">    <span class="comment"># 通过submit函数提交执行的函数到线程池中，submit非阻塞</span></span><br><span class="line">    task1 = executor.submit(get_html, <span class="number">3</span>, <span class="number">444</span>)</span><br><span class="line">    task2 = executor.submit(get_html, <span class="number">2</span>, <span class="number">555</span>)</span><br><span class="line"></span><br><span class="line">    print(task1.done())  <span class="comment"># done方法用于判定某个任务是否完成</span></span><br><span class="line">    print(task2.done())</span><br><span class="line">    <span class="comment"># 提交任务后立即判断任务状态，显示2个任务都未完成</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(task1.done())</span><br><span class="line">    print(task2.done())</span><br><span class="line"></span><br><span class="line">    print(task1.result())  <span class="comment"># result方法获取task的执行结果</span></span><br></pre></td></tr></table></figure><p>1、 wait(fs, timeout=None, return_when=ALL_COMPLETED)<br>wait 接受三个参数： fs: 表示需要执行的序列 timeout: 等待的最大时间，如果超过这个时间即使线程未执行完成也将返回 return_when：表示wait返回结果的条件，默认为 ALL_COMPLETED 全部执行完成再返回<br>2、as_completed<br>当子线程中的任务执行完后，直接用 result() 获取返回结果，在没有任务完成的时候，会一直阻塞，除非设置了 timeout。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> t:</span><br><span class="line">obj_list = []</span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">obj = t.submit(spider, page)</span><br><span class="line">obj_list.append(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先完成则先输出结果</span></span><br><span class="line"><span class="keyword">for</span> future <span class="keyword">in</span> as_completed(obj_list):</span><br><span class="line">data = future.result()</span><br><span class="line">print(<span class="string">f&quot;main: <span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>3、map(fn, *iterables, timeout=None)<br>fn： 第一个参数 fn 是需要线程执行的函数；<br>iterables：第二个参数接受一个可迭代对象；<br>timeout： 第三个参数 timeout 跟 wait() 的 timeout 一样，但由于 map 是返回线程执行的结果，如果 timeout小于线程执行时间会抛异常 TimeoutError。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过executor获取已经完成的task，map返回结果的顺序和urls一致</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> executor.map(get_html, urls):</span><br><span class="line">print(<span class="string">f&#x27;<span class="subst">&#123;data&#125;</span> ok&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="多线程什么时候需要加锁？"><a href="#多线程什么时候需要加锁？" class="headerlink" title="多线程什么时候需要加锁？"></a>多线程什么时候需要加锁？</h3><p>一般可能“同时发生多个写操作”或“同时发生读写操作”时，必需要加Lock，多人读则不必加锁。</p><h2 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="constructor">Process([<span class="params">group</span> [, <span class="params">target</span> [, <span class="params">name</span> [, <span class="params">args</span> [, <span class="params">kwargs</span>]]]]])</span></span><br><span class="line">- authkey</span><br><span class="line">- daemon：和线程的 setDeamon 功能一样（将父进程设置为守护进程，当父进程结束时，子进程也结束）。</span><br><span class="line">- exitcode(进程在运行时为 None、如果为 –N，表示被信号 N 结束）。</span><br><span class="line">- name：进程名字。</span><br><span class="line">- pid：进程号。</span><br></pre></td></tr></table></figure><h3 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h3><p>1、apply_async(func[, args=()[, kwds={}[, callback=None]]])</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool, cpu_count</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span>(<span class="params">msg</span>):</span></span><br><span class="line">    name = multiprocessing.current_process().name</span><br><span class="line">    print(<span class="string">f&quot;process name:<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">    t_start = time.time()</span><br><span class="line">    print(<span class="string">&quot;%s开始执行,进程号为%d&quot;</span> % (msg, os.getpid()))</span><br><span class="line">    time.sleep(random.random() * <span class="number">2</span>)</span><br><span class="line">    t_stop = time.time()</span><br><span class="line">    print(msg, <span class="string">&quot;执行完毕,耗时%0.2f&quot;</span> % (t_stop - t_start))</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># cpu_count()获取核数</span></span><br><span class="line">    process_pool = Pool(cpu_count())</span><br><span class="line"></span><br><span class="line">    results = []</span><br><span class="line">    <span class="comment"># 每次循环会用空闲出来的子进程去调用目标</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">        result = process_pool.apply_async(worker, (i,))</span><br><span class="line">        results.append(result)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;--start--&quot;</span>)</span><br><span class="line">    <span class="comment"># 关闭进程池后不再接收新的任务</span></span><br><span class="line">    process_pool.close()</span><br><span class="line">    <span class="comment"># join必须放在close语句后,主进程阻塞等待子进程的退出</span></span><br><span class="line">    process_pool.join()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># apply_async后get()是阻塞执行的</span></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">        print(result.get())</span><br><span class="line">    print(<span class="string">&quot;---end---&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、map(func, iterable[, chunksize=None])用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pool_outputs = pool.map(do_calculation, inputs)</span><br><span class="line">pool.close()  <span class="comment"># no more tasks</span></span><br><span class="line">pool.join()  <span class="comment"># wrap up current tasks</span></span><br></pre></td></tr></table></figure><h3 id="concurrent-futures-ProcessPoolExecutor"><a href="#concurrent-futures-ProcessPoolExecutor" class="headerlink" title="concurrent.futures.ProcessPoolExecutor"></a>concurrent.futures.ProcessPoolExecutor</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 虽然内部千差万别，但外部的api接口都一样</span></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">return_future_result</span>(<span class="params">message</span>):</span></span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">return</span> message</span><br><span class="line">pool = ProcessPoolExecutor(max_workers=<span class="number">2</span>)</span><br><span class="line">future1 = pool.submit(return_future_result, (<span class="string">&quot;hello&quot;</span>))</span><br><span class="line">future2 = pool.submit(return_future_result, (<span class="string">&quot;world&quot;</span>))</span><br><span class="line">print(future1.done())</span><br><span class="line">time.sleep(<span class="number">11</span>)</span><br><span class="line">print(future2.done())</span><br><span class="line">print(future1.result())</span><br><span class="line">print(future2.result())</span><br></pre></td></tr></table></figure><h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><p>默认情况下，在所有子进程退出之前，主程序不会退出。<br>有些时候，启动后台进程运行而不阻止主程序退出是有用的，例如为监视工具生成“心跳”的任务。<br>要将进程标记为守护程序很简单，只要将daemon属性设置为 True 就可以了。</p><h2 id="通信、同步与数据共享"><a href="#通信、同步与数据共享" class="headerlink" title="通信、同步与数据共享"></a>通信、同步与数据共享</h2><h3 id="互斥锁，控制对资源的访问"><a href="#互斥锁，控制对资源的访问" class="headerlink" title="互斥锁，控制对资源的访问"></a>互斥锁，控制对资源的访问</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建互斥锁，加锁会影响程序性能，锁住的代码越少越好</span></span><br><span class="line">mutex = threading.Lock()</span><br><span class="line"><span class="comment">#锁定</span></span><br><span class="line">mutex.acquire([timeout])</span><br><span class="line"><span class="comment">#释放</span></span><br><span class="line">mutex.release()</span><br></pre></td></tr></table></figure><p><strong>死锁</strong>：在线程间共享多个资源的时候，如果两个线程分别占有一部分资源并且同时等待对方的资源，就会造成死锁。</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>多进程的队列应使用from multiprocessing import Queue。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail_html</span>(<span class="params">queue</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    爬取文章详情页</span></span><br><span class="line"><span class="string">    :param queue:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = queue.get()</span><br><span class="line">        print(<span class="string">&quot;get detail html started&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        print(<span class="string">&quot;get detail html end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail_url</span>(<span class="params">queue</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    爬取文章列表页</span></span><br><span class="line"><span class="string">    :param queue:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">&quot;get detail url started&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">            queue.put(<span class="string">&quot;http://projectsedu.com/&#123;id&#125;&quot;</span>.format(id=i))</span><br><span class="line">        print(<span class="string">&quot;get detail url end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    detail_url_queue = Queue(maxsize=<span class="number">1000</span>)</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><h3 id="条件对象，复杂同步操作"><a href="#条件对象，复杂同步操作" class="headerlink" title="条件对象，复杂同步操作"></a>条件对象，复杂同步操作</h3><ul><li>基本原理：<br>可以认为Condition对象维护了一个锁（Lock/RLock)和一个waiting池。<br>Condition自身提供了wait/notify/notifyAll方法，用于阻塞/通知其他并行线程。<br>条件变量服从 上下文管理协议：使用 with 语句会在它包围的代码块内获取关联的锁。<br>acquire() 和 release() 方法也能调用关联锁的相关方法。</li><li>方法：<br>acquire(*args)：获取锁。这个方法调用底层锁的相应方法。<br>release()：释放锁。这个方法调用底层锁的相应方法。<br>wait(timeout=None)：线程挂起(阻塞状态)，等待直到被通知或发生超时。如果线程在调用此方法时没有获得锁，将会引发 RuntimeError 异常。这个方法释放底层锁，然后阻塞，直到在另外一个线程中调用同一个条件变量的 notify() 或 notify_all() 唤醒它，或者直到可选的超时发生。一旦被唤醒或者超时，它重新获得锁并返回。<br>wait_for(predicate, timeout=None)：等待，直到条件计算为真。等价于如下：<figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">while</span></span> <span class="variable"><span class="keyword">not</span></span> <span class="function"><span class="title">predicate</span>():</span></span><br><span class="line"><span class="function">    <span class="variable">cv.wait</span>()</span></span><br></pre></td></tr></table></figure>notify(n=1)：唤醒一个等待这个条件的线程，那些挂起的线程接到这个通知之后会开始运行。<br>notify_all()：唤醒所有正在等待这个条件的线程。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Xiao</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,cond</span>):</span></span><br><span class="line">super().__init__(name=<span class="string">&quot;测试&quot;</span>)</span><br><span class="line">self.cond = cond</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">with</span> self.cond:</span><br><span class="line">self.cond.wait()</span><br><span class="line">print(<span class="string">&quot;hi是测试&quot;</span>)</span><br><span class="line">self.cond.notify() </span><br><span class="line"></span><br><span class="line">condition = threading.Condition()</span><br><span class="line">xiao = Xiao(cond)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Condition的生产者消费者模式"><a href="#Condition的生产者消费者模式" class="headerlink" title="Condition的生产者消费者模式"></a>Condition的生产者消费者模式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建条件变量condition</span></span><br><span class="line">con = threading.Condition()</span><br><span class="line">meat_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_consumers</span>():</span></span><br><span class="line">    <span class="comment"># 条件变量condition 线程上锁</span></span><br><span class="line">    con.acquire()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全局变量声明关键字 global</span></span><br><span class="line">    <span class="keyword">global</span> meat_num</span><br><span class="line">    meat_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待肉片下锅煮熟</span></span><br><span class="line">    con.wait()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">&quot;我来一块肉片...&quot;</span>)</span><br><span class="line">        meat_num -= <span class="number">1</span></span><br><span class="line">        print(<span class="string">&quot;剩余肉片数量：%d&quot;</span> % meat_num)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">if</span> meat_num == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 肉片吃光了，通知老板添加肉片</span></span><br><span class="line">            print(<span class="string">&quot;老板，再来一份老肉片...&quot;</span>)</span><br><span class="line">            con.notify()</span><br><span class="line">            <span class="comment"># 肉片吃光了，等待肉片</span></span><br><span class="line">            con.wait()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 条件变量condition 线程释放锁</span></span><br><span class="line">    con.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_producer</span>():</span></span><br><span class="line">    <span class="comment"># 条件变量condition 线程上锁</span></span><br><span class="line">    con.acquire()</span><br><span class="line">    <span class="comment"># 全局变量声明关键字 global</span></span><br><span class="line">    <span class="keyword">global</span> meat_num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 肉片熟了，可以开始吃了</span></span><br><span class="line">    meat_num = <span class="number">10</span></span><br><span class="line">    print(<span class="string">&quot;肉片熟了，可以开始吃了...&quot;</span>)</span><br><span class="line">    con.notify()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 阻塞函数,等待肉片吃完的通知</span></span><br><span class="line">        con.wait()</span><br><span class="line">        meat_num = <span class="number">10</span></span><br><span class="line">        <span class="comment"># 添加肉片完成，可以继续开吃</span></span><br><span class="line">        print(<span class="string">&quot;添加肉片成功！当前肉片数量：%d&quot;</span> % meat_num)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        con.notify()</span><br><span class="line"></span><br><span class="line">    con.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 创建并初始化线程</span></span><br><span class="line">    t1 = threading.Thread(target=thread_producer)</span><br><span class="line">    t2 = threading.Thread(target=thread_consumers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动线程 -- 注意线程启动顺序，启动顺序很重要</span></span><br><span class="line">    t2.start()</span><br><span class="line">    t1.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 阻塞主线程，等待子线程结束</span></span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;程序结束！&quot;</span>)</span><br></pre></td></tr></table></figure><p>简单理解：假如线程1需要数据，那么线程1就阻塞等待，这时线程2就去制造数据，线程2制造好数据后，通知线程1可以去取数据了，然后线程1去获取数据。</p><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>1、控制对资源的并发访问，用于保护数量有限的资源，例如数据库服务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">s1 = threading.Semaphore(<span class="number">5</span>)  <span class="comment"># 添加一个计数器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    s1.acquire()  <span class="comment"># 计数器获得锁</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)  <span class="comment"># 程序休眠2秒</span></span><br><span class="line">    print(<span class="string">&quot;ok&quot;</span>, time.ctime())</span><br><span class="line">    s1.release()  <span class="comment"># 计数器释放锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    t1 = threading.Thread(target=foo, args=())  <span class="comment"># 创建线程</span></span><br><span class="line">    t1.start()  <span class="comment"># 启动线程</span></span><br></pre></td></tr></table></figure><p>2、信号量PV操作<br>具体定义如下：<br>    P（S）：①将信号量S的值减1，即S=S-1；<br>           ②如果S&gt;=0，则该进程继续执行；否则该进程置为等待状态，排入等待队列。<br>    V（S）：①将信号量S的值加1，即S=S+1；<br>           ②如果S&gt;0，则该进程继续执行；否则释放队列中第一个等待信号量的进程。<br>所以：信号量S&gt;=0时，S表示可用资源的数量。当S&lt;0时，表示已经没有可用资源，S的绝对值表示当前等待该资源的进程数。</p><p>其中信号量S用于互斥，初值为1。<br>使用PV操作实现进程互斥时应该注意的是：<br>（1）每个程序中用户实现互斥的P、V操作必须成对出现，先做P操作，进临界区，后做V操作，出临界区。若有多个分支，要认真检查其成对性。<br>（2）P、V操作应分别紧靠临界区的头尾部，临界区的代码应尽可能短，不能有死循环。<br>（3）互斥信号量的初值一般为1。<br>使用PV操作实现进程同步时应该注意的是：<br>（1）分析进程间的制约关系，确定信号量种类。在保持进程间有正确的同步关系情况下，哪个进程先执行，哪些进程后执行，彼此间通过什么资源（信号量）进行协调，从而明确要设置哪些信号量。<br>（2）信号量的初值与相应资源的数量有关，也与P、V操作在程序代码中出现的位置有关。<br>（3）同一信号量的P、V操作要成对出现，但它们分别在不同的进程代码中。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">lock_1 = threading.Semaphore(1)  # 检查售票员是否关门</span><br><span class="line">lock_2 = threading.Semaphore(0)  # 检查司机是否停车</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def driver():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(3):</span><br><span class="line">        lock_1.acquire()</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">&#x27;司机开车&#x27;</span>)</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">&#x27;驾驶&#x27;</span>)</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">&#x27;到站停车&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        lock_2.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def passenger():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(3):</span><br><span class="line">        lock_2.acquire()</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">&#x27;打开车门&#x27;</span>)</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">&#x27;乘客上下车&#x27;</span>)</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        <span class="builtin-name">print</span>(<span class="string">&#x27;关上车门&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p1 = threading.Thread(<span class="attribute">target</span>=driver)</span><br><span class="line">    p2 = threading.Thread(<span class="attribute">target</span>=passenger)</span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br></pre></td></tr></table></figure><p>每当调用acquire()时内置计数器-1；调用release() 时内置计数器+1；<br>计数器不能小于0；当计数器为0时，acquire()将阻塞线程直到其他线程调用release()。将lock_1的初值赋为1，lock_2的初值赋为0，则先执行司机这一线程。</p>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 生成器与装饰器</title>
      <link href="/2019/11/08/Python%20%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%8E%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2019/11/08/Python%20%E7%94%9F%E6%88%90%E5%99%A8%E4%B8%8E%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="基础内容"><a href="#基础内容" class="headerlink" title="基础内容"></a>基础内容</h2><p>演示网址：<a href="http://www.pythontutor.com/visualize.html#mode=edit">http://www.pythontutor.com/visualize.html#mode=edit</a><br>1、可变对象：list、dict、set<br>2、不可变对象：tuple、string、int、float、bool、bytes、frozen set</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: a = <span class="number">7</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: b = <span class="number">7</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: id(a)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="number">1641525664</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: id(b)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">1641525664</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: a = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: id(a)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">1641525696</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: id(a)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="number">1474053257352</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: a[<span class="number">0</span>] = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: id(a)</span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">1474053257352</span></span><br></pre></td></tr></table></figure><p>特点：</p><ul><li>显然可以看到可变对象修改后，地址是没有改变的，而不可变对象每一次操作就重建新对象。</li><li>全局可变对象，操作不会重建对象,可以通过dict[‘x’]=y或list.append()之类的来修改跟创建变量不冲突，所以都不用显式global声明。</li><li>不可变对象指的是元素指向永远不变，因此形如data=(1,2,[3,4])可修改列表内的元素。</li></ul><h2 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h2><p>1、浅拷贝：拷贝父对象，但内部子对象还是引用<br>2、深拷贝：完全拷贝了父对象及其子对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">Anndy = [<span class="number">1</span>, <span class="string">&#x27;Anndy&#x27;</span>, [<span class="string">&#x27;age&#x27;</span>, <span class="number">24</span>, [<span class="number">1</span>, <span class="number">2</span>]], (<span class="number">3</span>, <span class="number">4</span>)]</span><br><span class="line">Tom = copy.deepcopy(Anndy)</span><br><span class="line">Bob = copy.copy(Anndy)</span><br></pre></td></tr></table></figure><p><img src="/images/12-PythonOther/3-basic.png"></p><p>1、dis简单分析<br>指令结构：源码行号 | 指令在函数中的偏移 | 指令符号 | 指令参数 | 实际参数值<br><code>load_const</code>: Pushes co_consts[consti] onto the stack.<br><code>store_name</code>: 参数，co_names[0]=TOS，出栈同时将栈顶赋值给i<br><code>setup_loop</code>: 循环代码块入栈,(to 26)可理解为当前指令到26索引前的为循环块<br><code>RETURN_VALUE</code>: Returns with TOS to the caller of the function</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">5           4 LOAD_CONST               1 (0)</span><br><span class="line">            6 LOAD_CONST               2 (None)</span><br><span class="line">            8 IMPORT_NAME              1 (copy)</span><br><span class="line">           10 STORE_NAME               1 (copy)</span><br><span class="line"></span><br><span class="line">7          12 LOAD_CONST               3 (1)</span><br><span class="line">           14 LOAD_CONST               4 (&#x27;Anndy&#x27;)</span><br><span class="line">           16 LOAD_CONST               5 (&#x27;age&#x27;)</span><br><span class="line">           18 LOAD_CONST               6 (24)</span><br><span class="line">           20 LOAD_CONST               3 (1)</span><br><span class="line">           22 LOAD_CONST               7 (2)</span><br><span class="line">           24 BUILD_LIST               2</span><br><span class="line">           26 BUILD_LIST               3</span><br><span class="line">           28 LOAD_CONST              10 ((3, 4))</span><br><span class="line">           30 BUILD_LIST               4</span><br><span class="line">           32 STORE_NAME               2 (Anndy)</span><br><span class="line"></span><br><span class="line">8          34 LOAD_NAME                1 (copy)</span><br><span class="line">           36 LOAD_ATTR                3 (deepcopy)</span><br><span class="line">           38 LOAD_NAME                2 (Anndy)</span><br><span class="line">           40 CALL_FUNCTION            1</span><br><span class="line">           42 STORE_NAME               4 (Tom)</span><br><span class="line"></span><br><span class="line">9          44 LOAD_NAME                1 (copy)</span><br><span class="line">           46 LOAD_ATTR                1 (copy)</span><br><span class="line">           48 LOAD_NAME                2 (Anndy)</span><br><span class="line">           50 CALL_FUNCTION            1</span><br><span class="line">           52 STORE_NAME               5 (Bob)</span><br><span class="line">           54 LOAD_CONST               2 (None)</span><br><span class="line">           56 RETURN_VALUE</span><br></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="判断可迭代对象"><a href="#判断可迭代对象" class="headerlink" title="判断可迭代对象"></a>判断可迭代对象</h3><ul><li>isinstance(l,Iterable)</li><li>assert ‘<em>iter</em>‘ in dir([])</li></ul><h3 id="自定义-iter-和-next-实现迭代器"><a href="#自定义-iter-和-next-实现迭代器" class="headerlink" title="自定义__iter__和__next__实现迭代器"></a>自定义__iter__和__next__实现迭代器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IterA</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,num</span>):</span></span><br><span class="line">self.num = num</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">return</span> self</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">self.num += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> self.num</span><br></pre></td></tr></table></figure><h3 id="模拟实现for循环行为"><a href="#模拟实现for循环行为" class="headerlink" title="模拟实现for循环行为"></a>模拟实现for循环行为</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mylist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">mylist_iter = mylist.__iter__()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">item = mylist_iter.__next__()</span><br><span class="line">print(item)</span><br><span class="line"><span class="keyword">except</span> StopIteration:</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><h3 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">end = <span class="number">1000</span></span>):</span></span><br><span class="line">    prev,curr=<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> curr &lt; end:</span><br><span class="line">        <span class="keyword">yield</span> curr</span><br><span class="line">        prev,curr=curr,curr+prev</span><br></pre></td></tr></table></figure><h3 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g = (<span class="name">x*2</span> for x in range(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是由函数和与其相关的引用环境组合而成的实体，将函数与其所操作的某些数据关联起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>(<span class="params">n</span>):</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line"><span class="comment"># 需要改写外部变量时,声明nonlocal会优先寻找层级关系与闭包作用域最近的外部变量</span></span><br><span class="line"><span class="keyword">nonlocal</span> count</span><br><span class="line">count  = <span class="number">2</span></span><br><span class="line">print(n+count)</span><br><span class="line">print(inner.__closure__)</span><br><span class="line"><span class="comment"># 自由变量存储在闭包的 cell_contents中</span></span><br><span class="line">print(inner.__closure__[<span class="number">0</span>].cell_contents)</span><br><span class="line"><span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><h3 id="用生成器实现协程"><a href="#用生成器实现协程" class="headerlink" title="用生成器实现协程"></a>用生成器实现协程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> inspect <span class="keyword">import</span> getgeneratorstate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子生成器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average_gen</span>():</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    average = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        new_num = <span class="keyword">yield</span> average</span><br><span class="line">        <span class="keyword">if</span> new_num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        total += new_num</span><br><span class="line">        average = total / count</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每一次return，都意味着当前协程结束。</span></span><br><span class="line">    <span class="keyword">return</span> total, count, average</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 委托生成器负责委托子生成器完成具体任务,借助yield from传递给子生成器中yield</span></span><br><span class="line"><span class="comment"># 第一次对委派生成器调用next()或.send(None)时，会执行到第一个yield from表达式并暂停。</span></span><br><span class="line"><span class="comment"># 当继续调用委派生成器的.send()，.throw()和.close()等方法时，会“直接”作用到最内层的子生成器上，而不是让委派生成器的代码继续向前执行。</span></span><br><span class="line"><span class="comment"># 只有当子生成器抛出StopIteration异常后，委派生成器中的代码才继续执行，并将StopIteration.value的值作为yield from表达式的返回值。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proxy_gen</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 只有子生成器要结束（return）了，yield from左边的变量才会被赋值，后面的代码才会执行。</span></span><br><span class="line">        total, count, average = <span class="keyword">yield</span> <span class="keyword">from</span> average_gen()</span><br><span class="line">        print(<span class="string">&quot;计算完毕！！\n总共传入 &#123;&#125; 个数值， 总和：&#123;&#125;，平均数：&#123;&#125;&quot;</span>.format(count, total, average))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用方</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    calc_average = proxy_gen()</span><br><span class="line">    next(calc_average)  <span class="comment"># 预激协程</span></span><br><span class="line">    print(calc_average.send(<span class="number">10</span>))  <span class="comment"># 打印：10.0,即子生成器yield的值</span></span><br><span class="line">    print(calc_average.send(<span class="number">20</span>))  <span class="comment"># 打印：15.0</span></span><br><span class="line">    print(getgeneratorstate(calc_average))  <span class="comment"># 打印协程所处的状态</span></span><br><span class="line">    print(calc_average.send(<span class="number">30</span>))  <span class="comment"># 打印：20.0</span></span><br><span class="line">    calc_average.send(<span class="literal">None</span>)  <span class="comment"># 结束协程</span></span><br><span class="line">    <span class="comment"># 如果此处再调用calc_average.send(10)，由于上一协程已经结束，将重开一协程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>作用：不破坏原有结构的前提下,为已经存在的对象添加额外的功能,提高程序可重复利用性，增加程序可读性。<br>场景：用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等。<br>特性：通常装饰器定义在一个模块中，然后应用到其他模块中的函数上，装饰函数通常在加载模块时立即运行，被装饰的函数只在明确调用时运行。</p><h3 id="带参装饰器"><a href="#带参装饰器" class="headerlink" title="带参装饰器"></a>带参装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_param</span>(<span class="params">paragram</span>):</span></span><br><span class="line">    print(<span class="string">&quot;start...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">        @wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            <span class="keyword">if</span> paragram == <span class="number">1</span>:</span><br><span class="line">                print(<span class="string">&#x27;在被装饰的函数执行之前做的事&#x27;</span>)</span><br><span class="line">            ret = func(*args, **kwargs)</span><br><span class="line">            print(<span class="string">&#x27;在被装饰的函数执行之后做的事&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对原有装饰器封装返回一个装饰器，调用时能把参数传递到装饰器的环境中。</span></span><br><span class="line"><span class="comment"># 实际上先执行了add_param(123)，返回了绑定paragram的wrapper装饰器,再装饰目标函数</span></span><br><span class="line"><span class="meta">@add_param(123)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">destination</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    学习装饰器</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&quot;目标函数！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">destination()</span><br><span class="line">print(destination.__doc__)</span><br></pre></td></tr></table></figure><h3 id="多层装饰器"><a href="#多层装饰器" class="headerlink" title="多层装饰器"></a>多层装饰器</h3><p>即外层装饰器会对内层装饰器装饰的结果进行再装饰，等价于test = set_fun2(set_fun1(test))。</p><h3 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h3><p>类装饰器可以依靠类内部的 __call__方法，当使用 @ 形式将装饰器附加到函数上时就会调用此方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, func</span>):</span></span><br><span class="line">        self._func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&#x27;class decorator runing&#x27;</span>)</span><br><span class="line">        self._func()</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">&#x27;class decorator ending&#x27;</span>)</span><br><span class="line"><span class="meta">@Foo</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span>():</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line">bar()</span><br></pre></td></tr></table></figure><h3 id="第三方包写装饰器"><a href="#第三方包写装饰器" class="headerlink" title="第三方包写装饰器"></a>第三方包写装饰器</h3><p>1、函数签名是固定的，必须是(wrapped, instance, args, kwargs)，注意第二个参数instance是必须的。<br>2、args和kwargs也是固定的，注意前面没有星号，<strong>在装饰器内部调用原函数时才带星号</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wrapt</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@wrapt.decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pass_through</span>(<span class="params">wrapped, instance, args, kwargs</span>):</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    wrapped(*args, **kwargs)</span><br><span class="line">    print(time.time() - start)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pass_through</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>():</span></span><br><span class="line">    print(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function()</span><br></pre></td></tr></table></figure><h2 id="默认参数陷阱"><a href="#默认参数陷阱" class="headerlink" title="默认参数陷阱"></a>默认参数陷阱</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">numbers=[], num=<span class="number">1</span></span>):</span></span><br><span class="line"><span class="meta">... </span>    numbers.append(num)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> numbers</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func()</span><br><span class="line">[<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func()</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func()</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>解释：在 Python 中，函数是第一类对象(function is the first class object)，初始化完成时，属性 <strong>default</strong> 中的第一个默认参数 numbers 指向一个空列表。<br>如何避免前面那种情况发生呢？就是不要用可变对象作为参数的默认值。</p>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 字符编码 参数 断言</title>
      <link href="/2019/11/08/Python%20%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%20%E5%8F%82%E6%95%B0%20%E6%96%AD%E8%A8%80/"/>
      <url>/2019/11/08/Python%20%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%20%E5%8F%82%E6%95%B0%20%E6%96%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h2><p>assert是用来检查一个条件，如果它为真，就不做任何事。如果它为假，则会抛出AssertError和错误信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> 表达式 [, 参数]</span><br><span class="line"><span class="keyword">assert</span> len(lists) &gt;=<span class="number">5</span>,<span class="string">&#x27;列表元素个数小于5&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>1、ASCII<br>大小写英文字母，特殊字符，数字，早期ASCII 字符编码规定使用单字节中低位的7个比特去编码所有的字符（\x80以下），ASCII 扩充字符集利用了后128个字符。</p><p>2、Unicode（”\u”表示Unicode编码）<br>Unicode 标准使用十六进制数字表示（UCS-2和UCS-4），UCS-4用4个字节（实际上只用了31位，最高位必须为0）。<br>局限性：对于一个字节可以表示的字符用2个字节浪费空间。</p><p>3、UTF-8/UTF-16<br>UTF-8作为Unicode的一种实现形式，一个字符最少用8位去表示，属于变长的字符编码。<br>英文字符1字节，欧文字符2字节，中文3字节，生僻汉字4-6字节。</p><p>4、GBK/GB2312/ANSI<br>GB2312中国人设计的双字节编码，后在GB2312的基础上创建了GBK 编码，GBK 收录了27484个汉字兼容 ASCII 编码，对于英文字符用1个字节来表示，汉字用两个字节来标识。<br>不同的国家和地区制定了不同的标准，由此产生了 GB2312、GBK、GB18030、Big5、Shift_JIS 等各自的编码标准,这些使用多个字节来代表一个字符的各种汉字延伸编码方式，称为 ANSI 编码。<br>在简体中文Windows操作系统中ANSI 编码代表 GBK 编码，不同 ANSI 编码之间互不兼容，当信息在国际间交流时，无法将属于两种语言的文字，存储在同一段 ANSI 编码的文本中【百度百科】。<br><img src="/images/12-PythonOther/2-encode.png"></p><p>5、从bytes 到另一编码的 bytes 必须先 decode 后才能 encode。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;中文&quot;</span>.encode(<span class="string">&quot;unicode-escape&quot;</span>) <span class="comment"># Python3下获得&#x27;中文&#x27;的Unicode编码</span></span><br><span class="line"><span class="string">b&#x27;\\u4e2d\\u6587&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>1、关键字参数：传入0个或任意个含参数名的参数,在函数内部自动组装为一个dict即*<em>kwargs。<br>2、位置参数：按照位置顺序,给函数传递参数。<br>3、默认参数：给参数传默认的值,默认参数一定要指向不变对象。<br>4、可选参数：传入的参数个数是可变的即</em>args形式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;args=&#x27;</span>, args)</span><br><span class="line">    print(<span class="string">&#x27;kwargs=&#x27;</span>, kwargs)</span><br><span class="line">    print(<span class="string">&#x27;**********************&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    foo(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">    foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">    foo(<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, a=<span class="number">1</span>, b=<span class="string">&#x27;b&#x27;</span>, c=<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">    <span class="comment"># 星号*把序列/集合解包（unpack）成位置参数，两个星号**把字典解包成关键字参数。</span></span><br><span class="line">    dict = &#123;name:<span class="number">1</span>,sex:<span class="number">2</span>&#125;</span><br><span class="line">    foo(<span class="number">66</span>,**dict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">args= (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">kwargs= &#123;&#125;</span><br><span class="line">**********************</span><br><span class="line">args= ()</span><br><span class="line">kwargs= &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">**********************</span><br><span class="line">args= (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">kwargs= &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">**********************</span><br><span class="line">args= (<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">kwargs= &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line">**********************</span><br><span class="line">args= (<span class="number">66</span>,)</span><br><span class="line">kwargs= &#123;<span class="string">&#x27;name&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">**********************</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 排序算法</title>
      <link href="/2019/11/05/Python%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2019/11/05/Python%20%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bububle_sort</span>(<span class="params">alist</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;冒泡排序(稳定|n^2m)&quot;&quot;&quot;</span></span><br><span class="line">    n = len(alist)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,n<span class="number">-1</span>-j):</span><br><span class="line">            <span class="keyword">if</span> alist[i]&gt;alist[i+<span class="number">1</span>]:</span><br><span class="line">                count +=<span class="number">1</span></span><br><span class="line">                alist[i], alist[i+<span class="number">1</span>] = alist[i+<span class="number">1</span>], alist[i]</span><br><span class="line">        <span class="keyword">if</span> count==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h2 id="二、选择排序"><a href="#二、选择排序" class="headerlink" title="二、选择排序"></a>二、选择排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span>(<span class="params">alist</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;选择排序(不稳定|n^2)&quot;&quot;&quot;</span></span><br><span class="line">    n = len(alist)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">        min_index = j</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(j+<span class="number">1</span>,n):</span><br><span class="line">            <span class="keyword">if</span> alist[min_index] &gt; alist[i]:</span><br><span class="line">                min_index = i</span><br><span class="line">        alist[j], alist[min_index] = alist[min_index], alist[j]</span><br></pre></td></tr></table></figure><h2 id="三、插入排序"><a href="#三、插入排序" class="headerlink" title="三、插入排序"></a>三、插入排序</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def insert_sort(alist):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;插入排序(稳定|n^2)&quot;&quot;&quot;</span></span><br><span class="line">    n = len(alist)</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> in range(<span class="number">1</span>,n):</span><br><span class="line">        <span class="built_in">i</span> = <span class="built_in">j</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">i</span>&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> alist[<span class="built_in">i</span>] &lt; alist[<span class="built_in">i</span><span class="number">-1</span>]:</span><br><span class="line">                alist[<span class="built_in">i</span>], alist[<span class="built_in">i</span><span class="number">-1</span>] = alist[<span class="built_in">i</span><span class="number">-1</span>], alist[<span class="built_in">i</span>]</span><br><span class="line">                <span class="built_in">i</span> -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span> </span><br></pre></td></tr></table></figure><h2 id="四、希尔排序"><a href="#四、希尔排序" class="headerlink" title="四、希尔排序"></a>四、希尔排序</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def shell_sort(alist):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;希尔排序(不稳定|n^2)&quot;&quot;&quot;</span></span><br><span class="line">    n = len(alist)</span><br><span class="line">    gap = n<span class="regexp">//</span><span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> gap&gt;=<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(gap,n):</span><br><span class="line">            i=j</span><br><span class="line">            <span class="keyword">while</span> i&gt;<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> alist[i]&lt;alist[i-gap]:</span><br><span class="line">                    alist[i], alist[i-gap] = alist[i-gap], alist[i]</span><br><span class="line">                    i -= gap</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        gap <span class="regexp">//</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="五、快速排序"><a href="#五、快速排序" class="headerlink" title="五、快速排序"></a>五、快速排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">alist, first, last</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;快速排序(不稳定|n^2)&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> first &gt;= last:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    mid_value = alist[first]</span><br><span class="line">    low = first</span><br><span class="line">    high = last</span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        <span class="comment">#high左移</span></span><br><span class="line">        <span class="keyword">while</span> low &lt;high <span class="keyword">and</span> alist[high] &gt;= mid_value:</span><br><span class="line">            high -= <span class="number">1</span></span><br><span class="line">        alist[low] = alist[high]</span><br><span class="line">        <span class="comment">#low右移</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> alist[low] &lt; mid_value:</span><br><span class="line">            low += <span class="number">1</span></span><br><span class="line">        alist[high] =alist[low]  </span><br><span class="line">    <span class="comment">#从循环退出时，low=high</span></span><br><span class="line">    alist[low] = mid_value</span><br><span class="line"></span><br><span class="line">    <span class="comment">#对low左边的列表执行快速排序</span></span><br><span class="line">    quick_sort(alist, first, low<span class="number">-1</span>)</span><br><span class="line">    <span class="comment">#对low右边的列表执行快速排序</span></span><br><span class="line">    quick_sort(alist, low+<span class="number">1</span>, last)</span><br></pre></td></tr></table></figure><h2 id="六、归并排序"><a href="#六、归并排序" class="headerlink" title="六、归并排序"></a>六、归并排序</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">def merge_sort(alist):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;归并排序(稳定|nlgn)&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(alist)</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="literal">return</span> alist</span><br><span class="line">    <span class="keyword">mid</span> = <span class="comment">n//2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#left 采用归并排序后形成新的有序列表</span></span><br><span class="line">    left_li = merge_sort(alist[:<span class="keyword">mid</span>])</span><br><span class="line">    <span class="comment">#right 采用归并排序后形成新的有序列表</span></span><br><span class="line">    right_li = merge_sort(alist[<span class="keyword">mid</span>:])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#merge(left, right) 将两个有序的子序列合并为一个新的整体</span></span><br><span class="line">    left_pointer, right_pointer = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="built_in">result</span> = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> left_pointer &lt; <span class="built_in">len</span>(left_li) <span class="keyword">and</span> right_pointer&lt;<span class="built_in">len</span>(right_li):</span><br><span class="line">        <span class="keyword">if</span> left_li[left_pointer] &lt; right_li[right_pointer]:</span><br><span class="line">            <span class="built_in">result</span>.append(left_li[left_pointer])</span><br><span class="line">            left_pointer += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">result</span>.append(right_li[right_pointer])</span><br><span class="line">            right_pointer += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">result</span> += left_li[left_pointer:]</span><br><span class="line">    <span class="built_in">result</span> += right_li[right_pointer:]</span><br><span class="line">    <span class="literal">return</span> <span class="built_in">result</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python Twisted异步写入Mysql</title>
      <link href="/2019/11/03/Python%20Twisted%E5%BC%82%E6%AD%A5%E5%86%99%E5%85%A5Mysql/"/>
      <url>/2019/11/03/Python%20Twisted%E5%BC%82%E6%AD%A5%E5%86%99%E5%85%A5Mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> twisted.enterprise <span class="keyword">import</span> adbapi</span><br></pre></td></tr></table></figure><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><p>事务:如果所有语句都执行正确,才真正执行,只要有一条数据出错,可以通过回滚撤销所有操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlTwistedPipeline</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    利用twisted api实现异步入库Mysql的功能，</span></span><br><span class="line"><span class="string">    Twisted提供的是一个异步的容器，</span></span><br><span class="line"><span class="string">    本身没提供数据库链接</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dbpool</span>):</span></span><br><span class="line">        self.dbpool = dbpool</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_settings</span>(<span class="params">cls, settings</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        from_settings被spider调用,将settings传递进来并读取配置参数</span></span><br><span class="line"><span class="string">        :param settings:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        dbparams = dict(host=settings.get(<span class="string">&quot;MYSQL_HOST&quot;</span>),</span><br><span class="line">                        db=settings.get(<span class="string">&quot;MYSQL_DBNAME&quot;</span>),</span><br><span class="line">                        user=settings.get(<span class="string">&#x27;MYSQL_USER&#x27;</span>),</span><br><span class="line">                        passwd=settings.get(<span class="string">&#x27;MYSQL_PASSWORD&#x27;</span>),</span><br><span class="line">                        charset=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># twisted 中的 adbapi 能够将sql操作转变成异步操作生成连接池</span></span><br><span class="line">        pool = adbapi.ConnectionPool(<span class="string">&quot;pymysql&quot;</span>, **dbparams)</span><br><span class="line"><span class="comment"># cls把参数给__init__</span></span><br><span class="line">        <span class="keyword">return</span> cls(pool)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        使用twisted将mysql操作变成异步执行</span></span><br><span class="line"><span class="string">        :param item:</span></span><br><span class="line"><span class="string">        :param spider:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># runInteraction可以将传入的函数变成异步的并返回一个对象</span></span><br><span class="line">        query = self.dbpool.runInteraction(self.do_insert, item)</span><br><span class="line">        <span class="comment"># handle exceptions 当执行过程中出现错误,执行adderrback</span></span><br><span class="line">        query.addErrback(self.handle_error)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_error</span>(<span class="params">self, failure</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        处理异步操作的异常</span></span><br><span class="line"><span class="string">        :param failure:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        print(<span class="string">f&quot;failure:<span class="subst">&#123;failure&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_insert</span>(<span class="params">self, cursor, item</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        从dbpool取出cursor进行插入操作，twisted会自动完成commit</span></span><br><span class="line"><span class="string">        :param cursor:</span></span><br><span class="line"><span class="string">        :param item:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        insert_sql = <span class="string">&quot;&quot;&quot;insert into article(title, create_date, url, url_object_id, front_img_url, front_img_path, </span></span><br><span class="line"><span class="string">        comment_nums,fav_nums,vote_nums, tags, content) VALUES (&#x27;%s&#x27;, &#x27;%s&#x27;, &#x27;%s&#x27;,&#x27;%s&#x27;, &#x27;%s&#x27;,&#x27;%s&#x27;,%d,%d, %d,&#x27;%s&#x27;,&#x27;%s&#x27;);</span></span><br><span class="line"><span class="string">         &quot;&quot;&quot;</span> % (item[<span class="string">&quot;title&quot;</span>], item[<span class="string">&quot;create_date&quot;</span>], item[<span class="string">&quot;url&quot;</span>], item[<span class="string">&quot;url_object_id&quot;</span>], item[<span class="string">&quot;front_image_url&quot;</span>],</span><br><span class="line">                item[<span class="string">&quot;image_url_path&quot;</span>], item[<span class="string">&quot;comment_nums&quot;</span>], item[<span class="string">&#x27;fav_nums&#x27;</span>], item[<span class="string">&quot;vote_nums&quot;</span>], item[<span class="string">&quot;tags&quot;</span>],</span><br><span class="line">                item[<span class="string">&quot;content&quot;</span>])</span><br><span class="line"></span><br><span class="line">        cursor.execute(insert_sql)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python Json模块</title>
      <link href="/2019/11/03/Python%20Json%E6%A8%A1%E5%9D%97/"/>
      <url>/2019/11/03/Python%20Json%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Python的字典key可以是任意可hash对象。<br>Json是根据某种约定格式编写的纯字符串，它的key只能是字符串形式。</p><h2 id="json-dump-load"><a href="#json-dump-load" class="headerlink" title="json dump/load"></a>json dump/load</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理的是文件而不是字符串</span></span><br><span class="line"><span class="comment"># 写入 JSON 数据</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(data, f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line">    print(data, type(data))</span><br></pre></td></tr></table></figure><h2 id="json-dumps-loads"><a href="#json-dumps-loads" class="headerlink" title="json dumps/loads"></a>json dumps/loads</h2><p>json.dumps序列化时默认使用的ascii编码，想输出真正的中文需要指定ensure_ascii=False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">json.dumps(<span class="string">&#x27;中国&#x27;</span>)</span><br><span class="line"><span class="comment"># &#x27;&quot;\\u4e2d\\u56fd&quot;&#x27;</span></span><br><span class="line">json.dumps(<span class="string">&#x27;中国&#x27;</span>,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># &#x27;&quot;中国&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Json解码时创建其他类型的对象,解码后的字典作为一个单个参数传递给 __init__()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSONObject</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, d</span>):</span></span><br><span class="line">        self.__dict__ = d</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">data = json.loads(s, object_pairs_hook=OrderedDict)</span><br><span class="line">data2 = json.loads(s, object_hook=JSONObject)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>1、json.decoder.JSONDecodeError: Invalid control character ?<br><strong>解决方案</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json_str &#x3D; json.loads(jsonString, strict&#x3D;False)</span><br></pre></td></tr></table></figure><p>根据JSON规范，有效字符是：</p><ul><li>除了：”，\和控制字符（ord(char) &lt; 32）之外的任何Unicode字符。</li><li>下列字符序列被允许：&quot;，\，/，\b（退格键）， \f（换）， \n（换行/新行）， \r（回车）， \t（制表符），或者\u随后四个十六进制数字。<br>但是在Python中需要将转义控制字符加倍（除非字符串是原始的），因为Python也会解释这些控制字符。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 文件读写</title>
      <link href="/2019/11/02/Python%20%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/"/>
      <url>/2019/11/02/Python%20%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><p>read() 方法用于从文件读取指定的字节数，如果未给定或为负则读取所有。</p><h3 id="readline"><a href="#readline" class="headerlink" title="readline"></a>readline</h3><p>readline()从文件读取整行，包括 “\n” 字符。</p><h3 id="readlines"><a href="#readlines" class="headerlink" title="readlines"></a>readlines</h3><p>readlines()无参数，读取整个文件的所有行，以每一行+换行符形式保存在列表中，读取大文件时占用大量内存，同理writelines()写入文件需要在元素后加入’\n’。</p><h3 id="How-to-read-a-large-file-line-by-line-（stackoverflow）"><a href="#How-to-read-a-large-file-line-by-line-（stackoverflow）" class="headerlink" title="How to read a large file line by line （stackoverflow）"></a>How to read a large file line by line （stackoverflow）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">&quot;filename&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        do something <span class="keyword">with</span> data</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;filename&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line = f.readline()  <span class="comment"># 逐行读取</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line:  <span class="comment"># 到 EOF，返回空字符串，则终止循环</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        do_something(line)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readInChunks</span>(<span class="params">fileObj, chunkSize=<span class="number">2048</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Lazy function to read a file piece by piece.</span></span><br><span class="line"><span class="string">    Default chunk size: 2kB.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = fileObj.read(chunkSize)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">yield</span> data</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">&#x27;bigFile&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> chuck <span class="keyword">in</span> readInChunks(f):</span><br><span class="line">    do_something(chunk)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="Multithreading"><a href="#Multithreading" class="headerlink" title="Multithreading"></a>Multithreading</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writetoTxt</span>(<span class="params">txtFile</span>):</span></span><br><span class="line">    threadId = threading.currentThread().getName()</span><br><span class="line">    mutex.acquire(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(txtFile, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        print(<span class="string">&quot;Thread &#123;0&#125; acquire lock&quot;</span>.format(threadId))</span><br><span class="line">        f.write(<span class="string">&quot;write from thread &#123;0&#125;\n&quot;</span>.format(threadId))</span><br><span class="line">        <span class="comment"># 不加锁的情况下随着延时的增加出错越明显，虽然锁住部分个人感觉和单线程一样</span></span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    mutex.release()</span><br><span class="line">    print(<span class="string">&quot;Thread &#123;0&#125; exit&quot;</span>.format(threadId))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mutex = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        myThread = threading.Thread(target=writetoTxt, args=(<span class="string">&quot;abcd.txt&quot;</span>,))</span><br><span class="line">        myThread.start()</span><br></pre></td></tr></table></figure><h3 id="csv"><a href="#csv" class="headerlink" title="csv"></a>csv</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csv_read_by_namedtuple</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;读取csv并用namedtuple映射列名&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&quot;abc.csv&quot;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        reader = csv.reader(f)</span><br><span class="line">        headers = next(reader)</span><br><span class="line">        Row = namedtuple(<span class="string">&#x27;Row&#x27;</span>, headers)</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> reader:</span><br><span class="line">            row = Row(*r)</span><br><span class="line">            print(row)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    csv_read_by_namedtuple()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript构造函数和原型对象</title>
      <link href="/2019/11/02/Javascript%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/11/02/Javascript%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="浅谈this、new-call、apply、bind"><a href="#浅谈this、new-call、apply、bind" class="headerlink" title="浅谈this、new\call、apply、bind"></a>浅谈this、new\call、apply、bind</h3><p>this(当前执行代码的环境对象)<br>1、在全局作用域调用一个函数时,this对象总是指向global对象<br>2、在函数内部，this的值取决于函数被调用的方式。</p><ul><li>作为某个对象的方法被调用，那么this指向该上级对象</li><li>函数直接被调用，浏览器中指向window，node中指向global<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfunc</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> + <span class="string">&quot;hello&quot;</span> + param);</span><br><span class="line">&#125; <span class="comment">// 函数声明</span></span><br><span class="line"></span><br><span class="line">myfunc(<span class="string">&quot;world&quot;</span>); <span class="comment">// 函数调用，打印出 //[object Window]and world</span></span><br><span class="line">myfunc.call(<span class="built_in">global</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    say: myfunc</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.say.call(person, <span class="string">&quot;world&quot;</span>);<span class="comment">// [object Object]</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">new -- 创建一个用户定义的对象类型的实例或具有构造函数的内置对象实例</span></span><br><span class="line"><span class="string">语法: new constructor[([arguments])]</span></span><br><span class="line"><span class="string">call --使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数。</span></span><br><span class="line"><span class="string">语法：fun.call(thisArg, arg1, arg2, ...)</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"> call 方法调用父构造函数</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Food</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">  Product.call(<span class="built_in">this</span>, name, price);</span><br><span class="line">  <span class="built_in">this</span>.category = <span class="string">&#x27;food&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cheese = <span class="keyword">new</span> Food(<span class="string">&#x27;feta&#x27;</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure>apply –调用具有给定<code>this</code>值的函数，以及作为一个数组(或类似数组对象)提供的参数，参数为空时，默认调用全局对象。<br>语法：func.apply(thisArg, [argsArray])<br>call与apply的区别：call() 方法接受的是一个参数列表，而 apply() 方法接受的是一个包含多个参数的数组。<br>bind – 这个新函数的this被bind的第一个参数指定，返回一个原函数的拷贝，并拥有指定的this值和初始参数。<br>f.bind(someObject)会创建一个与f具有相同函数体和作用域的函数，但是在这个新函数中，this将永久地被绑定到了bind的第一个参数，无论这个函数是如何被调用的。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = f.bind(&#123;<span class="attr">a</span>:<span class="string">&quot;azerty&quot;</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(g()); <span class="comment">// azerty</span></span><br></pre></td></tr></table></figure><h3 id="二、构造函数模式"><a href="#二、构造函数模式" class="headerlink" title="二、构造函数模式"></a>二、构造函数模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照惯例，构造函数始终都应该以一个大写字母开头，非构造函数以小写字母开头。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,job</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line"><span class="built_in">this</span>.job = job;</span><br><span class="line"><span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span></span>&#123;</span><br><span class="line">alert(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line">        <span class="built_in">this</span>.sayAge = sayAge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 创建一个新对象</span></span><br><span class="line"><span class="comment">// 将构造函数的作用域赋给新对象</span></span><br><span class="line"><span class="comment">// 执行构造函数中的代码</span></span><br><span class="line"><span class="comment">// 返回新对象</span></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">&quot;qing&quot;</span>,<span class="number">22</span>,Engineer<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">// 对象含constructor属性,该属性指向Person</span></span><br><span class="line">alert(person1.constructor == Person);</span><br><span class="line">alert(person1 <span class="keyword">instanceof</span> Person);</span><br><span class="line"><span class="comment">// 构造函数与其他函数的区别，在于调用方式不同，只要通过new来调用就可作为构造函数。</span></span><br></pre></td></tr></table></figure><h3 id="三、原型对象"><a href="#三、原型对象" class="headerlink" title="三、原型对象"></a>三、原型对象</h3>只要创建了一个新函数,就会根据一组特定的规则为该函数创建一个prototype属性,这个属性指向函数的原型对象。默认所有原型对象会自动获得constructor属性，这个属性包含一个指向prototype属性所在函数的指针。当调用构造函数创建一个新实例后，该实例的内部将包含一个指针。在chrome中对象支持属性<code>__proto__</code>,这个连接存在于实例与构造函数的原型对象之间。<br>优点:可以让所有对象实例共享包含的属性和方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&quot;LXB&quot;</span>;</span><br><span class="line">Person.prototype.age = <span class="number">29</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.sayName();</span><br><span class="line"><span class="comment">// 返回的是该对象的原型</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="built_in">Object</span>.getPrototypeOf(person1) == Person.prototype)</span><br><span class="line"><span class="comment">// 只有person1重写name属性，才会返回true</span></span><br><span class="line"><span class="built_in">console</span>.info(person1.hasOwnProperty(<span class="string">&quot;name&quot;</span>))</span><br><span class="line"><span class="comment">// in操作符,只要该属性存在就返回true</span></span><br><span class="line">alert(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> person1)</span><br></pre></td></tr></table></figure><img src="/images/13-Web/1-prototype.png"><br>实例虽然不包含属性方法，但可以通过查找对象属性实现调用person1.sayName。<br>当为对象实例添加一个属性时,这个属性就会屏蔽原型对象中保存的同名属性。<br>只有通过delete操作符删除实例属性，才能重新访问原型中的属性。<br>简易原型语法：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    name : <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">    age : <span class="number">29</span>,</span><br><span class="line">    sayName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          alert(<span class="built_in">this</span>.name)  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>此类方式默认constructor属性不再指向Person。<br>Object.defineProperty()可用来修改属性特性，接收三个参数:属性所在的对象、属性的名字和一个描述符对象。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重设构造函数</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Person.prototype,<span class="string">&quot;constructor&quot;</span>,&#123;</span><br><span class="line">    enumerable:<span class="literal">false</span>,</span><br><span class="line">    value:Person</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>原型动态性：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例与原型间松散连接关系，在没找到的情况下会继续搜索原型</span></span><br><span class="line"><span class="comment">// 可随时为原型添加属性，且能在所有实例中反映出来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">car1 = <span class="keyword">new</span> Car();</span><br><span class="line">car2 = <span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(car1.color);    <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">Car.prototype.color = <span class="string">&quot;original color&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(car1.color);    <span class="comment">// original color</span></span><br><span class="line"></span><br><span class="line">car1.color = <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(car1.color);   <span class="comment">// black</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用构造函数会为实例添加一个指向最初原型的指针</span></span><br><span class="line"><span class="comment">// 而重写整个原型对象后相当于切断了构造函数与最初原型的联系</span></span><br><span class="line"><span class="comment">// 而实例还是指向最初的原型</span></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    name:<span class="string">&quot;Martin&quot;</span>,</span><br><span class="line">    age:<span class="string">&quot;11&quot;</span>,</span><br><span class="line">    sayName:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Person.prototype,<span class="string">&quot;constructor&quot;</span>,&#123;</span><br><span class="line">    enumerable:<span class="literal">false</span>,</span><br><span class="line">    value:Person</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">friend.sayName() <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 若要成功运行,交换构造对象和重置原型对象的顺序,即把var friend = new Person()放到后面。</span></span><br></pre></td></tr></table></figure><h3 id="四、补充"><a href="#四、补充" class="headerlink" title="四、补充"></a>四、补充</h3>所有原生引用类型(Object、Array、String等)都在其构造函数的原型上定义了方法。<br>1、test：function()是在某个对象中定义的函数,因此必须使用定义它的对象来调用它.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = &#123;</span><br><span class="line">    test: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;Inside test&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">myObj.test(); <span class="comment">// Calling test</span></span><br></pre></td></tr></table></figure>2、href=”javascript:void(0);”<br>javascript:是伪协议,表示url的内容通过javascript执行,void(0)表示不作任何操作，这样会防止链接跳转到其他页面。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 异常处理 函数式编程与ZIP函数</title>
      <link href="/2019/11/02/Python%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B8%8EZIP%E5%87%BD%E6%95%B0/"/>
      <url>/2019/11/02/Python%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B8%8EZIP%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p>高阶函数:接受一个或多个函数作为输入,输出一个函数。</p><h3 id="lambda-参数：返回值"><a href="#lambda-参数：返回值" class="headerlink" title="lambda 参数：返回值"></a>lambda 参数：返回值</h3><h3 id="map-function-iterable-…"><a href="#map-function-iterable-…" class="headerlink" title="map(function, iterable, …)"></a>map(function, iterable, …)</h3><p>根据提供的函数对指定序列做映射,Python 3.x 返回迭代器。</p><h3 id="reduce-function-iterable-initializer"><a href="#reduce-function-iterable-initializer" class="headerlink" title="reduce(function, iterable[, initializer])"></a>reduce(function, iterable[, initializer])</h3><p>函数会对参数序列中元素进行累积。</p><h3 id="filter-function-iterable"><a href="#filter-function-iterable" class="headerlink" title="filter(function, iterable)"></a>filter(function, iterable)</h3><p>用于过滤序列，过滤掉不符合条件的元素。</p><h2 id="ZIP函数"><a href="#ZIP函数" class="headerlink" title="ZIP函数"></a>ZIP函数</h2><p>作用：将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">chars = <span class="string">&quot;,.0123456789?abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line">codes = <span class="string">&quot;&quot;&quot;--..-- .-.-.- ----- .---- ..--- ...-- ....- ..... -.... --... ---..</span></span><br><span class="line"><span class="string">      ----. ..--.. .- -... -.-. -... . ..-. --. .... .. .--- -.- .-.. --</span></span><br><span class="line"><span class="string">      -. --- .--. --.- .-. ... - ..- ...- .-- -..- -.-- --..&quot;&quot;&quot;</span></span><br><span class="line">keys = dict(zip(chars, codes.split()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">char2morse</span>(<span class="params">chara</span>):</span></span><br><span class="line">    <span class="keyword">return</span> keys.get(char.lower(), char)</span><br><span class="line">    </span><br><span class="line">print(<span class="string">&#x27; &#x27;</span>.join(char2morse(c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&#x27;LOVE&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>1、标准格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#  尝试执行的代码</span></span><br><span class="line"><span class="keyword">except</span> 错误类型<span class="number">1</span>：</span><br><span class="line"><span class="comment"># 对应处理</span></span><br><span class="line"><span class="keyword">except</span> (错误类型<span class="number">2</span>，错误类型<span class="number">3</span>):</span><br><span class="line"><span class="comment"># 对应处理</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line"><span class="comment"># Exception捕获除SystemExit、KeyboardInterrupt 和 GeneratorExit 之外的所有异常。 </span></span><br><span class="line"><span class="comment"># Except 子句可以在异常名称后面指定一个变量,这个变量和一个异常实例绑定，捕获未知错误对应处理。</span></span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line"><span class="comment"># 没有发生异常才会执行的代码</span></span><br><span class="line"><span class="keyword">finally</span>：</span><br><span class="line"><span class="comment"># 无论是否发生异常都要执行</span></span><br></pre></td></tr></table></figure><p>2、自定义异常</p><ul><li>定义新的类，让它继承Exception或者是任何一个已存在的异常类型。</li><li>如果内置异常已经包括了你需要的异常，建议考虑使用内置的异常类型如socket.error。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeCustomException</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnotherException</span>(<span class="params">SomeCustomException</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Exception raised for errors in the input.</span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        expression -- input expression in which the error occurred</span></span><br><span class="line"><span class="string">        message -- explanation of the error</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, message, status</span>):</span></span><br><span class="line">        super().__init__(message, status)</span><br><span class="line">        self.message = message</span><br><span class="line">        self.status = status</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> AnotherException(<span class="string">&quot;failed&quot;</span>,<span class="number">44</span>)</span><br><span class="line"><span class="keyword">except</span> AnotherException <span class="keyword">as</span> e:</span><br><span class="line">    print(e.args)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 递归与动态规划</title>
      <link href="/2019/11/02/Python%20%E9%80%92%E5%BD%92%E4%B8%8E%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2019/11/02/Python%20%E9%80%92%E5%BD%92%E4%B8%8E%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><ul><li>递归就是在过程或函数里调用自身</li><li>必须有一个明确的递归结束条件，称为递归出口<br>要点在于放弃理解和跟踪递归全程的企图，只理解递归两层之间的交接。</li></ul><h3 id="利用递归获取斐波那契数列中的第-10-个数"><a href="#利用递归获取斐波那契数列中的第-10-个数" class="headerlink" title="利用递归获取斐波那契数列中的第 10 个数"></a>利用递归获取斐波那契数列中的第 10 个数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span>(<span class="params">depth, a1, a2</span>):</span></span><br><span class="line">    <span class="keyword">if</span> depth == <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> a1</span><br><span class="line">    a3 = a1 + a2</span><br><span class="line">    r = fun2(depth + <span class="number">1</span>, a2, a3)</span><br><span class="line">    <span class="keyword">return</span>  r</span><br><span class="line">ret = fun2(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">print(ret)</span><br></pre></td></tr></table></figure><h3 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h3><p>可把最底层和上层整体看作独立的两部分，那么逻辑就是把上层从a借c移到b，然后底层从a移到c最后上层从b移动到c。<br>那么怎么把上层从a移到b呢?再细分,把b的上层从a移到c,底座移到b。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">n, a, buffer, c</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>):</span><br><span class="line">        print(a,<span class="string">&quot;-&gt;&quot;</span>,c)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    move(n<span class="number">-1</span>, a, c, buffer)</span><br><span class="line">    move(<span class="number">1</span>, a, buffer, c)</span><br><span class="line">    move(n<span class="number">-1</span>, buffer, a, c)</span><br><span class="line"></span><br><span class="line">move(<span class="number">3</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br><span class="line">a -&gt; c</span><br><span class="line">a -&gt; b</span><br><span class="line">c -&gt; b</span><br><span class="line">a -&gt; c</span><br><span class="line">b -&gt; a</span><br><span class="line">b -&gt; c</span><br><span class="line">a -&gt; c</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><ul><li>主问题的答案 包含了可分解的子问题答案。</li><li>递归求解时，很多子问题的答案会被多次重复利用。<br>用动态规划寻找最优解,先解决子问题再逐步解决大问题。</li></ul><h3 id="案例解析"><a href="#案例解析" class="headerlink" title="案例解析"></a>案例解析</h3><p>4磅背包装下总价值最大的物品</p><table><thead><tr><th>物品</th><th>价值</th><th>重量</th></tr></thead><tbody><tr><td>音响</td><td>3000</td><td>4</td></tr><tr><td>笔记本</td><td>2000</td><td>3</td></tr><tr><td>吉他</td><td>1500</td><td>1</td></tr><tr><td><img src="/images/12-PythonOther/1-DP.png"></td><td></td><td></td></tr><tr><td>在每一行，可偷的商品都为当前行的商品以及之前各行的商品。</td><td></td><td></td></tr></tbody></table><h3 id="逻辑实现"><a href="#逻辑实现" class="headerlink" title="逻辑实现"></a>逻辑实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">knapsack_dynamic</span>(<span class="params">weight, price, num, mweight, x</span>):</span></span><br><span class="line">    optp = [[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> range(mweight + <span class="number">1</span>)] <span class="keyword">for</span> raw <span class="keyword">in</span> range(num + <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, num + <span class="number">1</span>):  <span class="comment"># 物品一件件来</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, mweight + <span class="number">1</span>):  <span class="comment"># j为子背包的载重量，寻找能够承载物品的子背包</span></span><br><span class="line">            <span class="keyword">if</span> j &gt;= weight[i]:  <span class="comment"># 当物品的重量小于背包能够承受的载重量的时候，才考虑能不能放进去</span></span><br><span class="line">                <span class="comment"># optp[i - 1][j]是上一个单元的值， optp[i - 1][j - w[i]]为剩余空间的价值</span></span><br><span class="line">                <span class="comment"># weight[i] 1 4 3  j 1 2 3 4  相减后剩余空间可放入的价值,得出最后价值</span></span><br><span class="line">                optp[i][j] = max(optp[i - <span class="number">1</span>][j],</span><br><span class="line">                                 optp[i - <span class="number">1</span>][j - weight[i]] + price[i])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 如果当前子背包不能放入则价值为上一个单元</span></span><br><span class="line">                optp[i][j] = optp[i - <span class="number">1</span>][j]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递推装入背包的物体,寻找跳变的地方，从最后结果开始逆推</span></span><br><span class="line">    j = mweight</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> optp[i][j] &gt; optp[i - <span class="number">1</span>][j]:</span><br><span class="line">            x.append(i)</span><br><span class="line">            j = j - weight[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回最大价值，即表格中最后一行最后一列的值</span></span><br><span class="line">    v = optp[num][mweight]</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 这里使用了图解中的吉他，音箱，电脑，手机做的测试，数据保持一致</span></span><br><span class="line">    weight = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>]  <span class="comment"># n个物体的重量(w[0]无用)</span></span><br><span class="line">    price = [<span class="number">0</span>, <span class="number">1500</span>, <span class="number">3000</span>, <span class="number">2000</span>]  <span class="comment"># n个物体的价值(p[0]无用)</span></span><br><span class="line">    num = len(weight) - <span class="number">1</span>  <span class="comment"># 计算n的个数</span></span><br><span class="line">    mweight = <span class="number">4</span>  <span class="comment"># 背包的载重量</span></span><br><span class="line"></span><br><span class="line">    x = []  <span class="comment"># 装入背包的物体，元素为True时，对应物体被装入(x[0]无用)</span></span><br><span class="line">    v = <span class="number">0</span></span><br><span class="line">    <span class="comment"># optp[i][j]表示在前i个物体中，能够装入载重量为j的背包中的物体的最大价值</span></span><br><span class="line">    <span class="comment"># optp 相当于做了一个n*m的全零矩阵的赶脚，n行为物件，m列为自背包载重量</span></span><br><span class="line">    <span class="comment"># [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]</span></span><br><span class="line">    <span class="comment"># optp = [[0 for col in range(mweight + 1)] for raw in range(num + 1)]</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;最大值为：&#x27;</span> + str(knapsack_dynamic(weight, price, num, mweight, x)))</span><br><span class="line">    print(<span class="string">&#x27;物品的索引：&#x27;</span>, x)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python list tuple dict str</title>
      <link href="/2019/11/02/Python%20list%20tuple%20dict%20str/"/>
      <url>/2019/11/02/Python%20list%20tuple%20dict%20str/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Python中不可改变对象（imutable objects）都是可哈希的，每个可哈希的对象都内置了__hash__方法，如字符串、元组。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>特点：可重复，类型可不同<br>查看其属性方法：dir(list)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表合并</span></span><br><span class="line">In [<span class="number">11</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]+[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">In [<span class="number">12</span>]: a</span><br><span class="line">Out[<span class="number">12</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该方法返回从列表中移除的元素对象，参数为元素索引。</span></span><br><span class="line">In [<span class="number">13</span>]: a.pop(<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: a</span><br><span class="line">Out[<span class="number">14</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">In [<span class="number">15</span>]: a.append(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计列表中某数的个数</span></span><br><span class="line">In [<span class="number">16</span>]: a.count(<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">16</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: a</span><br><span class="line">Out[<span class="number">17</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表逆序</span></span><br><span class="line">In [<span class="number">18</span>]: a.reverse()</span><br><span class="line">In [<span class="number">19</span>]: a</span><br><span class="line">Out[<span class="number">19</span>]: [<span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表备份</span></span><br><span class="line">In [<span class="number">21</span>]: b= a.copy()</span><br><span class="line">In [<span class="number">22</span>]: b</span><br><span class="line">Out[<span class="number">22</span>]: [<span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表清除</span></span><br><span class="line">In [<span class="number">23</span>]: a.clear()</span><br><span class="line">In [<span class="number">24</span>]: a</span><br><span class="line">Out[<span class="number">24</span>]: []</span><br></pre></td></tr></table></figure><h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><p>dict的key必须是不可变对象，哈希算法通过key计算value的存储位置。<br>创建字典的方法：<br>1、a = dict(zip([‘one’,’two’,’three’],[1,2,3]))<br>2、b = dict(one=1,two=2,three=3)<br>3、c = dict([(‘one’, 1), (‘two’, 2), (‘three’, 3)])</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">31</span>]: info = dict(key=<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: info</span><br><span class="line">Out[<span class="number">32</span>]: &#123;<span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;value&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: info = &#123;key:<span class="string">&#x27;value&#x27;</span>&#125;</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-33</span><span class="number">-419260623688</span>&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 info = &#123;key:&#x27;value&#x27;&#125;</span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">&#x27;key&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line">In [<span class="number">34</span>]: info.get(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">Out[<span class="number">34</span>]: <span class="string">&#x27;value&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: info.get(<span class="string">&#x27;value&#x27;</span>,<span class="number">-1</span>)</span><br><span class="line">Out[<span class="number">35</span>]: <span class="number">-1</span></span><br><span class="line">In [<span class="number">38</span>]: info.update(&#123;<span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: info</span><br><span class="line">Out[<span class="number">39</span>]: &#123;<span class="string">&#x27;key&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: info.pop(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">Out[<span class="number">40</span>]: <span class="number">123</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: info</span><br><span class="line">Out[<span class="number">41</span>]: &#123;<span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># fromkeys() 函数用于创建一个新字典，以序列 seq 中元素做字典的键，value 为字典所有键对应的初始值。</span></span><br><span class="line">In [<span class="number">1</span>]: seq = (<span class="string">&#x27;google&#x27;</span>,<span class="string">&#x27;Tabo&#x27;</span>)</span><br><span class="line">In [<span class="number">4</span>]: dicta = dict.fromkeys(seq,<span class="number">1</span>)</span><br><span class="line">In [<span class="number">5</span>]: dicta</span><br><span class="line">Out[<span class="number">5</span>]: &#123;<span class="string">&#x27;google&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Tabo&#x27;</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><p>1、tuple一旦初始化就不能修改<br>2、创建一个内容也不变的tuple必须保证tuple的每一个元素本身也不能变<br><img src="/images/11-tuple_list_json/1-tuple.png"><br>上述情况：tuple的内容改变但tuple元素并未改变，修改的是list内的元素，即tuple的每个元素指向永远不变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: t = (<span class="number">1</span>,)</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: t[<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-2</span><span class="number">-0</span>c6697a06bab&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 t[0] = 2</span><br><span class="line"></span><br><span class="line">In [<span class="number">1</span>]: (<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>)+(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">1</span>]: (<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure><h3 id="str"><a href="#str" class="headerlink" title="str"></a>str</h3><p>不变对象调用对象自身的任意方法，也不会改变该对象自身的内容，而是创建新的对象并返回。<br><img src="/images/11-tuple_list_json/2-str.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">一、字符串查找</span><br><span class="line"><span class="comment"># 1、切片</span></span><br><span class="line">In [<span class="number">3</span>]:  <span class="string">&#x27;ABCDEFG&#x27;</span>[:<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">&#x27;ABC&#x27;</span></span><br><span class="line">In [<span class="number">4</span>]:  <span class="string">&#x27;ABCDEFG&#x27;</span>[::<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">&#x27;ACEG&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、子串</span></span><br><span class="line">In [<span class="number">5</span>]: mystr = <span class="string">&#x27;abcdexxx&#x27;</span></span><br><span class="line">In [<span class="number">6</span>]: mystr.find(<span class="string">&#x27;exx&#x27;</span>)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">二、字符串转换和替换</span><br><span class="line"><span class="comment"># 1、替换</span></span><br><span class="line">In [<span class="number">7</span>]: mystr.replace(<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;yyy&#x27;</span>)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="string">&#x27;abcdeyyyyyyyyy&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、字符串互转字典</span></span><br><span class="line">In [<span class="number">25</span>]: mydictstr = <span class="string">&quot;&#123;&#x27;a&#x27;:1,&#x27;b&#x27;:2&#125;&quot;</span></span><br><span class="line">In [<span class="number">26</span>]: mydict =eval(mydictstr)</span><br><span class="line">In [<span class="number">27</span>]: mydict</span><br><span class="line">Out[<span class="number">27</span>]: &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: expr = <span class="string">&quot;d=&quot;</span>+a</span><br><span class="line">In [<span class="number">32</span>]: exec(expr)</span><br><span class="line">In [<span class="number">33</span>]: d</span><br><span class="line">Out[<span class="number">33</span>]: &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">In [<span class="number">52</span>]: str(d)</span><br><span class="line">Out[<span class="number">52</span>]: <span class="string">&quot;&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">三、字符串连接/分割</span><br><span class="line"><span class="comment"># 1、连接</span></span><br><span class="line">In [<span class="number">17</span>]: chain = <span class="string">&#x27;,&#x27;</span>.join([<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;David&#x27;</span>,<span class="string">&#x27;Bob&#x27;</span>])</span><br><span class="line">In [<span class="number">18</span>]: chain *<span class="number">3</span></span><br><span class="line">Out[<span class="number">18</span>]: <span class="string">&#x27;Tom,David,BobTom,David,BobTom,David,Bob&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、分割 </span></span><br><span class="line">In [<span class="number">22</span>]: <span class="string">&quot;It is a test&quot;</span>.split(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">Out[<span class="number">22</span>]: [<span class="string">&#x27;It is &#x27;</span>, <span class="string">&#x27; test&#x27;</span>]</span><br><span class="line"></span><br><span class="line">四、字符串格式化</span><br><span class="line">print(<span class="string">&quot;I&#x27;m %(name)s. I&#x27;m %(age)d year old&quot;</span> % &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Leolin&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">99</span>&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python Collection</title>
      <link href="/2019/11/01/Python%20Collection/"/>
      <url>/2019/11/01/Python%20Collection/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>collections模块在这些内置数据类型的基础上，提供了几个额外的数据类型：<br>1、defaultdict: 带有默认值的字典<br>2、namedtuple(): 生成可以使用名字来访问元素内容的tuple子类<br>3、deque: 双端队列，可以快速的从另外一侧追加和推出对象<br>4、Counter: 计数器，主要用来计数<br>5、OrderedDict: 有序字典</p><h3 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h3><p>defaultdict类的初始化函数接受一个类型作为参数,当所访问的键不存在的时候，可以实例化一个值作为默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from collections import defaultdict</span><br><span class="line">def gen_default():</span><br><span class="line">    return [&#39;c&#39;, &#39;d&#39;]</span><br><span class="line"></span><br><span class="line">data &#x3D; [(&#39;foo&#39;, 10), (&#39;bar&#39;, 20), (&#39;foo&#39;, 39), (&#39;bar&#39;, 49)]</span><br><span class="line">groups &#x3D; defaultdict(gen_default)</span><br><span class="line">for (key, value) in data:</span><br><span class="line">    # 键不存在时设置默认值</span><br><span class="line">    # user_dict.setdefault(user, 0)</span><br><span class="line">    groups[key].append(value)</span><br><span class="line">print(groups)</span><br><span class="line"># 运行结果</span><br><span class="line">defaultdict(&lt;function gen_default at 0x0000023D2DCF2EA0&gt;, &#123;&#39;foo&#39;: [&#39;c&#39;, &#39;d&#39;, 10, 39], &#39;bar&#39;: [&#39;c&#39;, &#39;d&#39;, 20, 49]&#125;)</span><br></pre></td></tr></table></figure><h3 id="命名元组namedtuple"><a href="#命名元组namedtuple" class="headerlink" title="命名元组namedtuple"></a>命名元组namedtuple</h3><p>命名元组是一种易于创建、轻量、不可变的对象类型，与普通元组兼容。<br>特点：<br>1、能够迭代<br>2、能够用索引来访问数据<br>3、能够通过属性名来访问数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from collections import namedtuple</span><br><span class="line"></span><br><span class="line">t &#x3D; (&quot;big_yellow&quot;, 3, &quot;dog&quot;)</span><br><span class="line">Animal &#x3D; namedtuple(&#39;Animal&#39;, &#39;name age type&#39;)</span><br><span class="line">b &#x3D; Animal._make(t)</span><br><span class="line"># 星号*把序列&#x2F;集合解包（unpack）成位置参数，两个星号**把字典解包成关键字参数。</span><br><span class="line"># b.Animal(*t)</span><br><span class="line"># big_yellow &#x3D; Animal(name&#x3D;&quot;big_yellow&quot;, age&#x3D;3, type&#x3D;&quot;dog&quot;)</span><br><span class="line">print(b.name)</span><br><span class="line"># 将User对象转换成字典，注意要使用&quot;_asdict&quot;</span><br><span class="line">print(b._asdict())</span><br><span class="line"># 运行结果</span><br><span class="line">big_yellow</span><br><span class="line">OrderedDict([(&#39;name&#39;, &#39;big_yellow&#39;), (&#39;age&#39;, 3), (&#39;type&#39;, &#39;dog&#39;)])</span><br></pre></td></tr></table></figure><h3 id="双端队列Deque"><a href="#双端队列Deque" class="headerlink" title="双端队列Deque"></a>双端队列Deque</h3><p>deque GIL是线程安全的，List是非线程安全的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from collections import deque</span><br><span class="line"></span><br><span class="line">user_deque &#x3D; deque([&#39;bobby1&#39;, [&#39;boddy2&#39;, &#39;boddy3&#39;], &quot;boddy4&quot;])</span><br><span class="line">test_deque &#x3D; deque([&#39;test1&#39;])</span><br><span class="line">import copy</span><br><span class="line"></span><br><span class="line">user_deque2 &#x3D; copy.deepcopy(user_deque)</span><br><span class="line">user_deque3 &#x3D; user_deque.copy()</span><br><span class="line">user_deque2[1].append(&quot;boddy5&quot;)</span><br><span class="line">user_deque.appendleft(&quot;bobby8&quot;)</span><br><span class="line">user_deque3.insert(0, &quot;bobby10&quot;)</span><br><span class="line">print(user_deque)</span><br><span class="line">print(user_deque2)</span><br><span class="line">print(user_deque3)</span><br><span class="line"># 运行结果</span><br><span class="line">deque([&#39;bobby8&#39;, &#39;bobby1&#39;, [&#39;boddy2&#39;, &#39;boddy3&#39;], &#39;boddy4&#39;])</span><br><span class="line">deque([&#39;bobby1&#39;, [&#39;boddy2&#39;, &#39;boddy3&#39;, &#39;boddy5&#39;], &#39;boddy4&#39;])</span><br><span class="line">deque([&#39;bobby10&#39;, &#39;bobby1&#39;, [&#39;boddy2&#39;, &#39;boddy3&#39;], &#39;boddy4&#39;])</span><br></pre></td></tr></table></figure><p>线程安全测试:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import collections</span><br><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">candle &#x3D; collections.deque(range(5))</span><br><span class="line">print(candle)</span><br><span class="line"></span><br><span class="line">def burn(direction, nextSource):</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            next &#x3D; nextSource()</span><br><span class="line">        except IndexError:</span><br><span class="line">            break</span><br><span class="line">        else:</span><br><span class="line">            print(&#39;%s : %s&#39; % (direction, next))</span><br><span class="line">            time.sleep(0.1)</span><br><span class="line">    print(&quot;done %s&quot; % direction)</span><br><span class="line">    return</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">left &#x3D; threading.Thread(target&#x3D;burn, args&#x3D;(&#39;left&#39;, candle.popleft))</span><br><span class="line">right &#x3D; threading.Thread(target&#x3D;burn, args&#x3D;(&#39;right&#39;, candle.pop))</span><br><span class="line"></span><br><span class="line">left.start()</span><br><span class="line">right.start()</span><br><span class="line"></span><br><span class="line">left.join()</span><br><span class="line">right.join()</span><br></pre></td></tr></table></figure><h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><p>用于追踪值的出现次数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from collections import Counter</span><br><span class="line"></span><br><span class="line">user &#x3D; [&quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &#39;b&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line">user_counter &#x3D; Counter(user)</span><br><span class="line"># 进行合并统计</span><br><span class="line">user_counter.update(&quot;bb&quot;)</span><br><span class="line">print(user_counter)</span><br><span class="line"># to n</span><br><span class="line">print(user_counter.most_common(2))</span><br><span class="line"># 运行结果</span><br><span class="line">Counter(&#123;&#39;b&#39;: 4, &#39;a&#39;: 3, &#39;c&#39;: 1&#125;)</span><br><span class="line">&lt;itertools.chain object at 0x000001A2BD773DD8&gt;</span><br><span class="line">[(&#39;b&#39;, 4), (&#39;a&#39;, 3)]</span><br></pre></td></tr></table></figure><h3 id="OrderedDict"><a href="#OrderedDict" class="headerlink" title="OrderedDict"></a>OrderedDict</h3><p>OrderedDict会根据放入元素的先后顺序进行排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from collections import OrderedDict</span><br><span class="line"># Python3 dict 有序 先添加的在前 Python2 无序</span><br><span class="line"># OrderDict表现一致</span><br><span class="line">user_dict &#x3D; OrderedDict()</span><br><span class="line">user_dict[&#39;b&#39;] &#x3D; &quot;bobbyb&quot;</span><br><span class="line">user_dict[&#39;a&#39;] &#x3D; &quot;bobbya&quot;</span><br><span class="line">user_dict[&#39;c&#39;] &#x3D; &quot;bobbyc&quot;</span><br><span class="line">print(user_dict.popitem())</span><br><span class="line">user_dict.move_to_end(&#39;b&#39;)</span><br><span class="line">print(user_dict)</span><br><span class="line"># 运行结果</span><br><span class="line">(&#39;c&#39;, &#39;bobbyc&#39;)</span><br><span class="line">OrderedDict([(&#39;a&#39;, &#39;bobbya&#39;), (&#39;b&#39;, &#39;bobbyb&#39;)])</span><br></pre></td></tr></table></figure><h3 id="ChainMap"><a href="#ChainMap" class="headerlink" title="ChainMap"></a>ChainMap</h3><p>用来将多个map组合到一起，可以来模拟嵌套的情景而且多用于模板之中，支持普通map的所有操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from collections import ChainMap</span><br><span class="line"></span><br><span class="line">dict1 &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</span><br><span class="line">dict2 &#x3D; &#123;&#39;b&#39;: 3, &#39;c&#39;: 4&#125;</span><br><span class="line"># 初始化ChainMap</span><br><span class="line">chain &#x3D; ChainMap(dict1, dict2)</span><br><span class="line"># 新增map</span><br><span class="line">m3 &#x3D; &#123;&#39;data&#39;: 555&#125;</span><br><span class="line">chainMap &#x3D; chain.new_child(m3)</span><br><span class="line"># 使用maps输出chainMap</span><br><span class="line">print(chain.maps)</span><br><span class="line"># 访问单个元素</span><br><span class="line">print(chain.get(&#39;a&#39;))</span><br><span class="line">for key, value in chain.items():</span><br><span class="line">    print(key, value)</span><br><span class="line"># 运行结果</span><br><span class="line">[&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;, &#123;&#39;b&#39;: 3, &#39;c&#39;: 4&#125;]</span><br><span class="line">1</span><br><span class="line">a 1</span><br><span class="line">c 4</span><br><span class="line">b 2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python Class</title>
      <link href="/2019/11/01/Python%20Class%20/"/>
      <url>/2019/11/01/Python%20Class%20/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>isinstance() 用于检查实例类型是否为一个已知的类型，会认为子类是一种父类类型，考虑继承关系；<br>issubclass() 用于检查类继承</p><h2 id="getitem-与-dict"><a href="#getitem-与-dict" class="headerlink" title="_getitem_ 与 _dict_"></a><code>_getitem_</code> 与 <code>_dict_</code></h2><p>1、类中定义<code>_getitem_</code>方法可支持索引访问元素。<br>2、每层的<code>_dict_</code>只存储该层新增的属性，子类不需要重复存储父类中的属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span>(<span class="params">Demo</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">self.value = value</span><br><span class="line">        self.mydict = &#123;key: value&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.mydict.get(key, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        self.mydict[key] = value</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data = Data(<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;12&#x27;</span>)</span><br><span class="line">    data[<span class="string">&quot;age&quot;</span>] = <span class="number">22</span></span><br><span class="line">    print(data[<span class="string">&quot;age&quot;</span>], data[<span class="string">&quot;name&quot;</span>])</span><br><span class="line">    print(data.__dict__)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">22</span> <span class="number">10</span></span><br><span class="line">&#123;<span class="string">&#x27;mydict&#x27;</span>: &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">22</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="str-与-repr"><a href="#str-与-repr" class="headerlink" title="_str_ 与 _repr_"></a><code>_str_</code> 与 <code>_repr_</code></h2><p>1、在上述的类中添加以下语句:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;Data object (value:%s)&#x27;</span> % self.value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;Data object &lt;value:%s&gt;&#x27;</span> % self.value</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、运行结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(data)</span><br><span class="line"><span class="comment"># 不添加语句运行</span></span><br><span class="line">&lt;__main__.Data object at <span class="number">0x000001D5DA766358</span>&gt;</span><br><span class="line"><span class="comment"># 添加运行</span></span><br><span class="line">Data object (value:<span class="number">12</span>)</span><br></pre></td></tr></table></figure><h2 id="init-与-new"><a href="#init-与-new" class="headerlink" title="_init_与_new_"></a><code>_init_</code>与<code>_new_</code></h2><p>1、如果<code>_new_</code>返回一个对象的实例，会隐式调用<code>_init_</code>，如果<code>_new_</code>不返回一个对象的实例，<code>_init_</code>不会被调用。<br>2、<code>_init_</code>：创建完对象后调用此函数，用于初始化对象实例返回None。</p><h2 id="slots"><a href="#slots" class="headerlink" title="_slots_"></a><code>_slots_</code></h2><p><code>_slots_</code>用于规定当前类可对外访问的属性，并为每个实例预留恰好足够的空间来保存每个变量，节省空间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> memory_profiler <span class="keyword">import</span> profile</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params">object</span>):</span>  </span><br><span class="line"><span class="comment"># 非字符串的迭代器可以赋值给__slots__,如元组、列表</span></span><br><span class="line">__slots__=(<span class="string">&#x27;x&#x27;</span>,) </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line"><span class="meta">@profile</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    f = [A(<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10000</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="call"><a href="#call" class="headerlink" title="_call_"></a><code>_call_</code></h2><p>在该类创建时实现<code>_call_</code>方法，实例名+()就是调用该方法。</p><h2 id="is与"><a href="#is与" class="headerlink" title="is与=="></a>is与==</h2><p>is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。<br>驻留值：对比较小的整数对象[-5, 256]进行缓存即小整数池。</p><h2 id="staticmethod与classmethod"><a href="#staticmethod与classmethod" class="headerlink" title="staticmethod与classmethod"></a>staticmethod与classmethod</h2><ul><li>静态函数(@staticmethod): 即静态方法,主要处理与这个类的逻辑关联, 如验证数据;</li><li>类函数(@classmethod):即类方法, 更关注于从类中调用方法, 而不是在实例中调用方法, 如构造重载;</li><li>成员函数: 实例的方法, 只能通过实例进行调用;</li></ul><h2 id="property-fget-fset-fdel-doc"><a href="#property-fget-fset-fdel-doc" class="headerlink" title="property([fget[, fset[, fdel[, doc]]]])"></a>property([fget[, fset[, fdel[, doc]]]])</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">object</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, int):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must be an integer!&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must between 0 ~ 100!&#x27;</span>)</span><br><span class="line">        self._score = value</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">60</span> <span class="comment"># OK，实际转化为s.set_score(60)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score <span class="comment"># OK，实际转化为s.get_score()</span></span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">9999</span></span><br></pre></td></tr></table></figure><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><p>利用字符串的形式操作对象(模块)的方法/属性(成员)，是一种基于字符串的事件驱动实现了动态的函数调用功能。<br>1、hasattr(obj,name):判断一个对象obj里面是否有name属性或者name方法<br>2、getattr(obj,name[,default]):获取对象obj的属性或者方法<br>3、setattr(obj,name,values):给对象obj的属性赋值，若属性不存在，先创建再赋值<br>4、delattr(obj,name):删除对象属性<br><strong>注：</strong> getattr,hasattr,setattr,delattr对模块的修改都在内存中进行，并不会影响文件中真实内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>():</span></span><br><span class="line">    name=<span class="string">&quot;xiaohua&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HelloWord&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t=test()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(t, <span class="string">&quot;name&quot;</span>)     <span class="comment">#获取name属性，存在就打印出来。</span></span><br><span class="line"><span class="string">&#x27;xiaohua&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(t, <span class="string">&quot;run&quot;</span>)      <span class="comment">#获取run方法，存在就打印出方法的内存地址。</span></span><br><span class="line">&lt;bound method test.run of &lt;__main__.test instance at <span class="number">0x0269C878</span>&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(t, <span class="string">&quot;run&quot;</span>)()      <span class="comment">#获取run方法，后面加&quot;()&quot;可以将这个方法运行。</span></span><br><span class="line"><span class="string">&#x27;HelloWord&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(t, <span class="string">&quot;age&quot;</span>)      <span class="comment">#获取一个不存在的属性。</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: test instance has no attribute <span class="string">&#x27;age&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(t, <span class="string">&quot;age&quot;</span>,<span class="string">&quot;18&quot;</span>)  <span class="comment">#若属性不存在，返回一个默认值。</span></span><br><span class="line"><span class="string">&#x27;18&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>每个对象都是某个类(class)的一个实例(instance)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    类成员修饰符:</span></span><br><span class="line"><span class="string">    xx：公有变量</span></span><br><span class="line"><span class="string">    _xx：单前置下划线，保护变量，类对象和子类可以访问，from somemodule import *禁止导入</span></span><br><span class="line"><span class="string">    __xx：双前置下划线，私有化属性或方法，只有类对象自己能访问，无法在外部直接访问（名字重整所以访问不到）</span></span><br><span class="line"><span class="string">    __xx__：双前后下划线，系统定义名字（不要自己发明这样的名字）</span></span><br><span class="line"><span class="string">    xx_：单后置下划线，用于避免与Python关键词的冲突</span></span><br><span class="line"><span class="string">    在使用 from somemodule import * 导入模块的情况下，不能导入或使用私有属性和方法</span></span><br><span class="line"><span class="string">    在使用 import somemodule 导入模块的情况下，能导入并使用私有属性和方法</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        print(<span class="string">&quot;父类初始化...&quot;</span>)</span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">f&quot;I am <span class="subst">&#123;self.x&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigData</span>(<span class="params">Data</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        实例化对象 --&gt;  调用子类__init__()  --&gt; 子类__init__()继承父类__init__()  --&gt; 调用父类 __init__()</span></span><br><span class="line"><span class="string">        super(子类，self).__init__(参数1，参数2，....)</span></span><br><span class="line"><span class="string">        :param x:</span></span><br><span class="line"><span class="string">        :param y:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        super().__init__(x)  <span class="comment"># 继承父类的构造方法</span></span><br><span class="line">        self.__y = y*<span class="number">2</span>  <span class="comment"># 定义子类的本身属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 主动去执行父类的get方法</span></span><br><span class="line">        super().get()</span><br><span class="line">        print(self.__y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    bd = BigData(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    bd.get()</span><br></pre></td></tr></table></figure><p>2、运行结果</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">父类初始化...</span><br><span class="line">I am <span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python urlparse及实体编码</title>
      <link href="/2019/11/01/Python%20urlparse%E5%92%8C%E5%AE%9E%E4%BD%93%E7%BC%96%E7%A0%81/"/>
      <url>/2019/11/01/Python%20urlparse%E5%92%8C%E5%AE%9E%E4%BD%93%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="urlparse"><a href="#urlparse" class="headerlink" title="urlparse"></a>urlparse</h2><p>场景：urlparse解析url的query并构建字典。<br>解析url的各部分并获取url的query部分，将其构建成dict，以链接<a href="https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1%E4%B8%BA%E4%BE%8B%E3%80%82">https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1为例。</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse, urlencode, parse_qsl, quote, unquote</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&quot;</span></span><br><span class="line"><span class="comment"># ParseResult(scheme=&#x27;https&#x27;, netloc=&#x27;www.baidu.com&#x27;, path=&#x27;/s&#x27;, params=&#x27;&#x27;, query=&#x27;ie=utf-8&amp;f=8&amp;rsv_bp=1&#x27;, fragment=&#x27;&#x27;)</span></span><br><span class="line">print(urlparse(url))</span><br><span class="line"></span><br><span class="line">my_str = urlparse(url).query</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取url组成成分里面的 query 参数部分</span></span><br><span class="line">data = dict(parse_qsl(my_str))</span><br><span class="line"><span class="comment"># &#123;&#x27;ie&#x27;: &#x27;utf-8&#x27;, &#x27;f&#x27;: &#x27;8&#x27;, &#x27;rsv_bp&#x27;: &#x27;1&#x27;&#125;</span></span><br><span class="line">print(data)</span><br><span class="line"><span class="comment"># 参数：字典 编码 返回ie=utf-8&amp;f=8&amp;rsv_bp=1</span></span><br><span class="line">print(urlencode(data))</span><br><span class="line"><span class="comment"># 参数：单字符串 编码</span></span><br><span class="line">print(quote(<span class="string">&quot;Hello World！&quot;</span>))</span><br><span class="line"><span class="comment"># 对url进行解码，把类似&quot;%xx&quot;的字符替换成单个字符</span></span><br><span class="line">print(unquote(urlencode(data)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实体编码处理"><a href="#实体编码处理" class="headerlink" title="实体编码处理"></a>实体编码处理</h2><p>爬取结果中可能含有<code>&amp;amp;</code>等字符，这是html实体编码对展示无影响。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> html <span class="keyword">import</span> unescape</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;position.php?&amp;amp;start=10#a&quot; id=&quot;next&quot;&gt;下一页&lt;/a&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">print(unescape(s))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 导入、制作和发布模块</title>
      <link href="/2019/11/01/Python%20%E5%AF%BC%E5%85%A5%E3%80%81%E5%88%B6%E4%BD%9C%E5%92%8C%E5%8F%91%E5%B8%83%E6%A8%A1%E5%9D%97/"/>
      <url>/2019/11/01/Python%20%E5%AF%BC%E5%85%A5%E3%80%81%E5%88%B6%E4%BD%9C%E5%92%8C%E5%8F%91%E5%B8%83%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p><strong>1、module</strong>：A module is a file containing Python definitions and statements.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名 <span class="keyword">as</span> 模块别名(大驼峰命名法)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 局部导入</span></span><br><span class="line">form 模块名 <span class="keyword">import</span> 工具名</span><br></pre></td></tr></table></figure><p><strong>2、搜索顺序</strong>：<br>Python解释器按照sys.path列表中的目录顺序来查找导入文件即<strong>当前目录–环境变量–标准库–扩展库</strong>。<br>Python中每一个模块都有一个内置属性<code>__file__</code>可以查看模块的完整路径。<br>导入文件时，文件中没有缩进的代码都会被执行，<code>__name__ </code>被其他文件导入就是模块名，当前执行程序时则表示为<code>__main__</code>。</p><p><strong>3、导入原理：</strong><br>1、Python文件第一次被导入时会被汇编为字节码，并将其写入同名的Pyc文件内。<br>2、import 语句可以在程序的任何位置使用，也可以多次导入同一个模块，但模块中的代码仅仅在该模块被首次导入时执行，后面的import语句只是创建一个到模块名字空间的引用。</p><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>1、Package：多个相关联的模块组成一个包，以便于维护和使用</p><ul><li><p>目录下含有特殊文件<code>__init__.py</code>(Python 3.3以上可不含该文件）</p></li><li><p>包是一个包含多个模块的特殊目录，该文件夹不能作为顶层模块来执行文件夹中的py文件 (即不能作为主函数的入口)</p></li><li><p>命名方式:小写字母和下划线</p></li></ul><p>2、在外部使用包内模块：<br>在导入一个包时，实际上是导入了它的<code>__init__.py</code>文件,import 需要在<code>__init__.py</code>指定对外提供的模块列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├─myname</span><br><span class="line">│  │  name.pyage.py</span><br><span class="line">│  │  __init__.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># init.py</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="comment"># import 包名 即一次性导入包中所有的模块,这里访问__init__.py文件中的引用文件需要加上包名,在init不做任何添加按上述访问则会报错</span></span><br><span class="line"><span class="keyword">import</span> myname</span><br><span class="line">myname.name.tett() </span><br></pre></td></tr></table></figure><p>3、用from语句可以直接把模块导入当前命名空间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">from</span> myname <span class="keyword">import</span> name</span><br><span class="line">name.test()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当用from package import *,导入的模块可以由__all__控制</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># init.py</span></span><br><span class="line">__all__ = [name,age]</span><br><span class="line"><span class="comment"># test</span></span><br><span class="line"><span class="keyword">from</span> myname <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><h3 id="相对导入与绝对导入"><a href="#相对导入与绝对导入" class="headerlink" title="相对导入与绝对导入"></a>相对导入与绝对导入</h3><p>1、Python 所有加载的模块信息都存放在 sys.modules 结构中，在包内既可以使用相对路径也可以使用绝对路径来导入，使用<strong>点</strong>的这种模式从不是<strong>包的目录</strong>中导入将会引发错误。<br>2、绝对导入的格式为 import A.B 或 from A import B，相对导入格式为 from . import B 或 from ..A import B，.代表当前模块，..代表上层模块，…代表上上层模块，依次类推。<br>3、如果一个模块被直接运行则它自己为顶层模块，不存在层次结构所以找不到其他的相对路径。<br>4、绝对导入，一个模块只能导入自身的子模块或和它的顶层模块同级别的模块及其子模块；相对导入，一个模块必须有包结构且只能导入它的顶层模块内部的模块。</p><p>例一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">test/</span><br><span class="line">　--__init__.py</span><br><span class="line">　--main.py : <span class="keyword">from</span> . <span class="keyword">import</span> module</span><br><span class="line">　--main1.py : <span class="keyword">from</span> sub1 <span class="keyword">import</span> sub11</span><br><span class="line">　--main2.py : <span class="keyword">from</span> sub1 <span class="keyword">import</span> sub13</span><br><span class="line">　--main3.py : <span class="keyword">from</span> sub2 <span class="keyword">import</span> sub21</span><br><span class="line">　--module.py</span><br><span class="line">　--sub1/</span><br><span class="line">　　　--__init__.py : </span><br><span class="line">　　　--sub11.py : <span class="keyword">from</span> . <span class="keyword">import</span> sub12</span><br><span class="line">　　　--sub13.py : <span class="keyword">from</span> .. <span class="keyword">import</span> sub21</span><br><span class="line">　　　--sub12.py</span><br><span class="line">　--sub2/</span><br><span class="line">　　　--sub21.py</span><br><span class="line">$python3 main.py 报错，test作为顶层模块执行文件不能被视为package，module无法导入</span><br><span class="line">$python3 main1.py 正确，sub1是package</span><br><span class="line">$python3 main2.py 报错，sub1是package，但因为test不是package，sub21无法导入</span><br><span class="line">$python3 main3.py Python3<span class="number">.6</span> 正确，sub2虽然没有init.py但Python3<span class="number">.3</span>以上可不含该文件也是package</span><br><span class="line"></span><br><span class="line">$python3 sub11.py 报错，sub1不能被视为package，sub12无法导入 即 ImportError: cannot <span class="keyword">import</span> name <span class="string">&#x27;sub12&#x27;</span></span><br><span class="line">$python3 sub13.py 报错，sub1和test都不是package 即 ValueError: attempted relative <span class="keyword">import</span> beyond top-level package</span><br></pre></td></tr></table></figure><p>例二：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">test</span><br><span class="line">　<span class="comment">--module.py </span></span><br><span class="line">　<span class="comment">--sub1/</span></span><br><span class="line">　　　<span class="comment">--__init__.py : </span></span><br><span class="line">　　　<span class="comment">--send.py : send()</span></span><br><span class="line">　　　<span class="comment">--receive.py : receive()</span></span><br><span class="line"></span><br><span class="line">场景一：</span><br><span class="line"><span class="built_in">module</span>.<span class="name">py</span>: <span class="keyword">import</span> <span class="built_in">package</span> 如<span class="built_in">package</span>.send.send() 报错 AttributeError，需要在__init__文件中添加 <span class="keyword">from</span> . <span class="keyword">import</span> send</span><br><span class="line">场景二：</span><br><span class="line"><span class="built_in">module</span>.<span class="name">py</span>: <span class="keyword">from</span> <span class="built_in">package</span> <span class="keyword">import</span> send 如 send.send() 则也可以</span><br></pre></td></tr></table></figure><h3 id="发布模块"><a href="#发布模块" class="headerlink" title="发布模块"></a>发布模块</h3><p>1、创建setup.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line"></span><br><span class="line">setup(name=<span class="string">&#x27;Distutils&#x27;</span>,  <span class="comment"># 最终打包的包名</span></span><br><span class="line">      version=<span class="string">&#x27;1.0&#x27;</span>,  <span class="comment"># 版本</span></span><br><span class="line">      description=<span class="string">&#x27;Python Distribution Utilities&#x27;</span>,  <span class="comment"># 描述信息</span></span><br><span class="line">      author=<span class="string">&#x27;Greg Ward&#x27;</span>,  <span class="comment"># 作者</span></span><br><span class="line">      author_email=<span class="string">&#x27;gward@python.net&#x27;</span>,  <span class="comment"># 作者邮箱</span></span><br><span class="line">      url=<span class="string">&#x27;https://www.python.org/sigs/distutils-sig/&#x27;</span>,  <span class="comment"># 主页</span></span><br><span class="line">      <span class="comment"># packages=[&#x27;distutils&#x27;, &#x27;distutils.command&#x27;],</span></span><br><span class="line">      py_modules=[]  <span class="comment"># 要打包的Py文件</span></span><br><span class="line">      )</span><br></pre></td></tr></table></figure><p>2、构建模块</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> setup.<span class="keyword">py</span> build</span><br></pre></td></tr></table></figure><p>3、生成发布压缩包</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> setup.<span class="keyword">py</span> sdist</span><br></pre></td></tr></table></figure><p>4、安装与删除</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python setup.py install  ## 安装</span><br><span class="line"></span><br><span class="line">通过__file__查看并删除安装目录即可</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python Socket</title>
      <link href="/2019/11/01/Python%20Socket/"/>
      <url>/2019/11/01/Python%20Socket/</url>
      
        <content type="html"><![CDATA[<h3 id="socket-server"><a href="#socket-server" class="headerlink" title="socket_server"></a>socket_server</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">server.bind((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">8000</span>))</span><br><span class="line">server.listen()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sock, addr = server.accept()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_sock</span>(<span class="params">sock, addr</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">        print(data.decode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">        re_data = input()</span><br><span class="line">        sock.send(re_data.encode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一次获取1k的数据</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    sock, addr = server.accept()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用线程去处理新接收的连接</span></span><br><span class="line">    client_thread = threading.Thread(target=handle_sock, args=(sock, addr))</span><br><span class="line">    client_thread.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="socket-client"><a href="#socket-client" class="headerlink" title="socket_client"></a>socket_client</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8000</span>))</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    re_data = input()</span><br><span class="line">    client.send(re_data.encode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">    data = client.recv(<span class="number">1024</span>)</span><br><span class="line">    print(data.decode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="socket-http"><a href="#socket-http" class="headerlink" title="socket_http"></a>socket_http</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="comment"># 通过socket请求html</span></span><br><span class="line">    url = urlparse(url)</span><br><span class="line">    host = url.netloc</span><br><span class="line">    path = url.path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> path == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        path = <span class="string">&quot;/&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># socket建立tcp连接, tcp连接只用指明域名（ip）+ 端口</span></span><br><span class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    client.connect((host, <span class="number">80</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送http协议的报文</span></span><br><span class="line">    http_message = <span class="string">&quot;GET &#123;&#125; HTTP/1.1\nHost:&#123;&#125;\nConnection:close\n\n&quot;</span>.format(path, host).encode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    client.send(http_message)</span><br><span class="line"></span><br><span class="line">    data = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 响应数据每次接收1024字节</span></span><br><span class="line">        d = client.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> d:</span><br><span class="line">            data += d</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    data = data.decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">    html_data = data.split(<span class="string">&quot;\r\n\r\n&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">    print(html_data)</span><br><span class="line">    <span class="comment"># 关闭socket</span></span><br><span class="line">    client.close()</span><br><span class="line">    </span><br><span class="line">get_url(<span class="string">&quot;http://www.baidu.com/&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python URL管理器模块</title>
      <link href="/2019/11/01/Python%20URL%E7%AE%A1%E7%90%86%E5%99%A8%E6%A8%A1%E5%9D%97/"/>
      <url>/2019/11/01/Python%20URL%E7%AE%A1%E7%90%86%E5%99%A8%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一般是用来维护爬取的url和未爬取的url已经新添加的url的，如果队列中已经存在了当前爬取的url了就不需要再重复爬取了，另外防止造成一个死循环。</p><h2 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h2><p><a href="http://www.baidu.com/">www.baidu.com</a> 其中我抓取的列表中有 music.baidu.om 链接，再继续抓取该页面的所有链接，但是其中含有<a href="http://www.baidu.com,/">www.baidu.com，</a><br>可以想象如果不做处理的话就成了一个死循环了，在百度首页和百度音乐页循环，必须有一个队列来维护URL。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>下面以python代码实现为例，使用的deque双向队列方便取出以前的url。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLQueue</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.queue = deque()  <span class="comment"># 待抓取的网页</span></span><br><span class="line">        self.visited = set()  <span class="comment"># 已经抓取过的网页</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_url_size</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        获取未爬取URL集合的大小</span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> len(self.queue)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">old_url_size</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        获取已爬取URL的大小</span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> len(self.visited)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_new_url</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        判断是否有未爬取的URL</span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.new_url_size() != <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_new_url</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        获取一个未爬取的URL</span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        new_url = self.queue.popleft()<span class="comment">#从左侧取出一个链接</span></span><br><span class="line">        self.old_urls.add(new_url)<span class="comment">#记录已经抓取</span></span><br><span class="line">        <span class="keyword">return</span> new_url</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_new_url</span>(<span class="params">self, url</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        将新的URL添加到未爬取的URL集合</span></span><br><span class="line"><span class="string">        :param url: 单个url</span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> url <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> url <span class="keyword">not</span> <span class="keyword">in</span> self.new_urls <span class="keyword">and</span> url <span class="keyword">not</span> <span class="keyword">in</span> self.old_urls:</span><br><span class="line">            self.new_urls.append(url)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_new_urls</span>(<span class="params">self, urlset</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        将新的URL添加到未爬取的URL集合</span></span><br><span class="line"><span class="string">        :param urlset: url集合</span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> urlset <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> len(urlset) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urlset:</span><br><span class="line">             self.add_new_url(url)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python with上下文管理</title>
      <link href="/2019/11/01/Python%20with%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86/"/>
      <url>/2019/11/01/Python%20with%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>操作如文件对象、数据库连接、Socket连接资源时，发生异常如文件读取数据错误导致后续代码无法继续执行，close方法无法被正常调用，因此资源就会一直被该程序占用而无法被释放。</p><h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><p>with 语句适用于对资源进行访问的场合，确保使用过程中是否发生异常都会执行必要的“清理”操作释放资源。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">r&#x27;somefileName&#x27;</span>) <span class="keyword">as</span> somefile,open(<span class="string">r&#x27;other&#x27;</span>) <span class="keyword">as</span> otherfile:</span><br><span class="line"><span class="comment"># ...with-body</span></span><br><span class="line">somefile.write(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于如下操作       </span></span><br><span class="line">f = open(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f.write(<span class="string">&quot;python&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> IOError:</span><br><span class="line">    print(<span class="string">&quot;io error&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h2 id="定义上下文管理器"><a href="#定义上下文管理器" class="headerlink" title="定义上下文管理器"></a>定义上下文管理器</h2><p>支持上下文管理协议的对象，这种对象实现了<code>__enter__() 和 __exit__()</code>方法。<br>上下文管理器定义执行 with 语句时要建立的运行时上下文，负责执行 with 语句块上下文中的进入与退出操作。<br>通常使用 with 语句调用上下文管理器，也可以通过直接调用其方法来使用。<br>1、基于类的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模拟实现文件类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, filename, mode</span>):</span></span><br><span class="line">        self.filename = filename</span><br><span class="line">        self.mode = mode</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        返回资源对象,返回值通过with...as...中的 as 赋给它后面的那个变量</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        print(<span class="string">&quot;entering...&quot;</span>)</span><br><span class="line">        self.f = open(self.filename, self.mode)</span><br><span class="line">        <span class="keyword">return</span> self.f</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        # 参数分别对应异常的type、value 和 traceback,未发生异常都为None</span></span><br><span class="line"><span class="string">        # 1、返回值为False(None)，异常会被重新抛出，用户需要进行异常处理,</span></span><br><span class="line"><span class="string">        # 2、如果为True，异常会被忽视</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param exc_type:</span></span><br><span class="line"><span class="string">        :param exc_val:</span></span><br><span class="line"><span class="string">        :param exc_tb:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        print(<span class="string">&quot;exiting....&quot;</span>)</span><br><span class="line">        self.f.close()</span><br></pre></td></tr></table></figure><p>2、基于生成器的实现<br>在被装饰函数里，必须是一个生成器（带有yield），而yield之前的代码，就相当于<code>__enter__</code>里的内容。yield 之后的代码，就相当于<code>__exit__</code> 里的内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_func</span>(<span class="params">file_name</span>):</span></span><br><span class="line">    <span class="comment"># __enter__方法</span></span><br><span class="line">    print(<span class="string">&#x27;open file:&#x27;</span>, file_name, <span class="string">&#x27;in __enter__&#x27;</span>)</span><br><span class="line">    file_handler = open(file_name, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> file_handler</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">        <span class="comment"># deal with exception</span></span><br><span class="line">        print(<span class="string">&#x27;the exception was thrown&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">&#x27;close file:&#x27;</span>, file_name, <span class="string">&#x27;in __exit__&#x27;</span>)</span><br><span class="line">        file_handler.close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open_func(<span class="string">&#x27;/Users/MING/mytest.txt&#x27;</span>) <span class="keyword">as</span> file_in:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_in:</span><br><span class="line">        <span class="number">1</span>/<span class="number">0</span></span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>接入代理池</title>
      <link href="/2019/10/27/%E6%8E%A5%E5%85%A5%E4%BB%A3%E7%90%86%E6%B1%A0/"/>
      <url>/2019/10/27/%E6%8E%A5%E5%85%A5%E4%BB%A3%E7%90%86%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="代理辨析"><a href="#代理辨析" class="headerlink" title="代理辨析"></a>代理辨析</h3><p>1、HTTP代理</p><ul><li><p>透明代理:也叫普通代理，它不但改变了我们的请求信息，还会传送真实的IP地址。从：HTTP_X_FORWARDED_FOR 等代理信息可以查到我们IP地址！</p></li><li><p>匿名代理:普通匿名代理，它能隐藏客户机的真实IP，但会改变我们的请求信息。它不传送正式ip，但是可能会发送HTTP_VIA、 HTTP_PROXY_CONNECTION 信息，还是可以通过这些判断出使用了代理！</p></li><li><p>高级匿名代理:不改变客户机的请求，这样在服务器看来就像有个真正的客户浏览器在访问它，这时客户的真实IP是隐藏的，服务器端不会认为我们使用了代理！</p></li><li><p>HTTP通道:http代理服务器支持Connect请求，这类代理服务器基本可以代理所有软件，如：QQ,FoxMail,FTP等等，不支持通道的HTTP代理，基本上只支持简单的Http GET,POST等请求服务！</p></li></ul><p>2、socks代理</p><ul><li>SOCKS5:常见SOCKS代理有socks4,socks5，不过目前基本上以socks5代理为主，它基本支持所有客户端请求协议，Http,Ftp,Smtp等，可以具备高级匿名代理隐藏功能！</li></ul><h3 id="付费代理池搭建"><a href="#付费代理池搭建" class="headerlink" title="付费代理池搭建"></a>付费代理池搭建</h3><p>免费代理池的搭建套路一般采用Flask+Redis架构，先爬取再验证去除失效代理，但是免费代理质量极低往往会因此会花费大量精力，以22元一天的猿人云隧道代理为例，做个简易版代理池，涵盖代理增加，代理检测，定时执行等功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> apscheduler.schedulers.blocking <span class="keyword">import</span> BlockingScheduler</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YuanRen</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;redis数据库配置区&quot;&quot;&quot;</span></span><br><span class="line">    pool = redis.ConnectionPool(db=<span class="number">1</span>, decode_responses=<span class="literal">True</span>)</span><br><span class="line">    r = redis.Redis(connection_pool=pool)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, yid, ysecret</span>):</span></span><br><span class="line">        self.yid = yid</span><br><span class="line">        self.ysecret = ysecret</span><br><span class="line">        self.count = <span class="number">5</span></span><br><span class="line">        self.ttl = <span class="number">1000</span></span><br><span class="line">        <span class="comment"># self._init_proxy()</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_proxy</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        添加白名单:需要模拟登录或携带登录后的Cookie（非必要步骤）</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        print(<span class="string">&#x27;\033[1;35m初始化中...\033[0m&#x27;</span>)</span><br><span class="line">        <span class="comment"># 取出当前IP地址</span></span><br><span class="line">        response = requests.get(<span class="string">&#x27;http://pv.sohu.com/cityjson?ie=utf-8&#x27;</span>)</span><br><span class="line">        IPaddress = re.search(<span class="string">r&#x27;&quot;cip&quot;: &quot;(.*?)&quot;, &quot;cid&#x27;</span>, response.text).group(<span class="number">1</span>)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;ip&quot;</span>: IPaddress,</span><br><span class="line">            <span class="string">&quot;order_id&quot;</span>: self.yid</span><br><span class="line">        &#125;</span><br><span class="line">        print(data)</span><br><span class="line">        whiteUrl = <span class="string">&quot;https://www.apeyun.com/user/whitelist/add&quot;</span></span><br><span class="line">        resp = requests.post(url=whiteUrl, data=data, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">            print(<span class="string">&#x27;\033[1;35m初始化成功,启动中稍等..\033[0m&#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            print(<span class="string">&#x27;监控已开启&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;初始化白名单失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_ip</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        监控 IP 分数、个数，对其进行增删</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 检查分数</span></span><br><span class="line">        nodes = self.r.zrevrange(<span class="string">&#x27;YRYProxy&#x27;</span>, <span class="number">0</span>, <span class="number">-1</span>, withscores=<span class="literal">True</span>)</span><br><span class="line">        print(<span class="string">&quot;node:&quot;</span>, nodes)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nodes:</span><br><span class="line">            node = list(i)</span><br><span class="line">            score = int(node[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> score &lt;= <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">&#x27;\033[1;33m分数过低剔除\033[0m&#x27;</span>)</span><br><span class="line">                self.r.zrem(<span class="string">&#x27;YRYProxy&#x27;</span>, node[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 检查个数</span></span><br><span class="line">        _sum = self.r.zcard(<span class="string">&#x27;YRYProxy&#x27;</span>)</span><br><span class="line">        print(<span class="string">&quot;sum:&quot;</span>, _sum)</span><br><span class="line">        <span class="keyword">if</span> _sum &lt; self.count:</span><br><span class="line">            self.add_ip()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_ip</span>(<span class="params">self, count=<span class="number">3</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        提取IP</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        get_url = <span class="string">f&quot;http://tunnel-api.apeyun.com/q?id=<span class="subst">&#123;self.yid&#125;</span>&amp;secret=<span class="subst">&#123;self.ysecret&#125;</span>&amp;limit=<span class="subst">&#123;count&#125;</span>&amp;format=json&amp;auth_mode=auto&quot;</span></span><br><span class="line">        <span class="comment"># 返回的文本进行解析</span></span><br><span class="line">        response = requests.get(get_url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            ret = response.json()</span><br><span class="line">            print(ret)</span><br><span class="line">            <span class="keyword">if</span> ret.get(<span class="string">&#x27;code&#x27;</span>) == <span class="number">200</span>:</span><br><span class="line">                self.parse(ret)</span><br><span class="line">            <span class="keyword">elif</span> ret.get(<span class="string">&#x27;code&#x27;</span>) == <span class="string">&#x27;11020012&#x27;</span>:</span><br><span class="line">                print(<span class="string">&#x27;十秒内可提取IP数已用完&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> ret.get(<span class="string">&#x27;code&#x27;</span>) == <span class="string">&quot;11020001&quot;</span>:</span><br><span class="line">                print(<span class="string">&quot;订单已过期...&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;提取失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        解析返回数据</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        proxy_list = data.get(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> proxy_list:</span><br><span class="line">            proxy = <span class="string">f&quot;<span class="subst">&#123;node.get(<span class="string">&#x27;ip&#x27;</span>)&#125;</span>:<span class="subst">&#123;node.get(<span class="string">&#x27;port&#x27;</span>)&#125;</span>&quot;</span></span><br><span class="line">            self.save_to_redis(proxy, <span class="number">5</span>)  <span class="comment"># 默认10分</span></span><br><span class="line">        print(<span class="string">&quot;save success&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_to_redis</span>(<span class="params">self, proxy, expire</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        推送到redis集合中</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        print(<span class="string">&#x27;代理 %s 推入redis集合&#x27;</span> % proxy)</span><br><span class="line">        self.r.zadd(<span class="string">&#x27;YRYProxy&#x27;</span>, &#123;proxy: expire&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aps_run</span>(<span class="params">yry</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    监控IP有效性</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    yry.check_ip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ID = <span class="string">&quot;&quot;</span></span><br><span class="line">    SECRET = <span class="string">&quot;&quot;</span></span><br><span class="line">    yry = YuanRen(ID, SECRET)</span><br><span class="line">    <span class="comment"># 定时监控</span></span><br><span class="line">    scheduler = BlockingScheduler()</span><br><span class="line">    scheduler.add_job(aps_run, <span class="string">&#x27;cron&#x27;</span>, second=<span class="string">&#x27;*/2&#x27;</span>, args=[yry],max_instances=<span class="number">10</span>)  <span class="comment"># 设置检测，推荐2s一次(默认)</span></span><br><span class="line">    scheduler.start()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ADSL拨号代理</title>
      <link href="/2019/10/24/ADSL%E6%8B%A8%E5%8F%B7%E4%BB%A3%E7%90%86/"/>
      <url>/2019/10/24/ADSL%E6%8B%A8%E5%8F%B7%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="购买拨号VPS"><a href="#购买拨号VPS" class="headerlink" title="购买拨号VPS"></a>购买拨号VPS</h3><p>云立方该服务商网上推荐较多，6元一天对爬取量不大或自主学习的朋友性价比较高。</p><ul><li>对于爬虫开发者推荐预装Ubuntu系统</li><li>安装成功后进入控制面板，并用SSH进行链接服务器</li><li>拨号/断开：adsl-start/adsl-stop</li><li>可通过ifconfig查看IP是否变化</li></ul><p><strong>注：遇到adsl-start无法联网的情况及时联系客服，可能是宽带账号的问题</strong></p><h3 id="设置HTTP代理服务器"><a href="#设置HTTP代理服务器" class="headerlink" title="设置HTTP代理服务器"></a>设置HTTP代理服务器</h3><p>TinyProxy特性:</p><ul><li>支持匿名模式。</li><li>支持 HTTPS，可以通过 CONNECT 请求来转发 HTTPS 连接。</li><li>远程监视：可远程查看日志和访问信息。</li><li>负载监视：可配置成当负载达到某个程度时，拒绝新的代理请求。</li><li>访问控制：可设置特定的 IP 地址或者 IP 段才可访问。</li><li>安全：不需要 root 权限。</li><li>轻量化：只需要极小的系统资源。</li><li>支持基于 URL 的过滤。</li><li>支持透明代理/多级代理。</li></ul><p>1、TinyProxy安装</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adsl-<span class="keyword">start</span></span><br><span class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">update</span></span><br><span class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> tinyproxy</span><br></pre></td></tr></table></figure><p>2、TinyProxy配置<br>文件位置：/etc/tinyproxy.conf 需要注释 Allow 127.0.0.1<br>关闭防火墙(非必要)：ufw disable<br>放行端口(非必要)：iptables -I INPUT -p tcp –dport 8888 -j ACCEPT</p><p>3、启动/重启/停止<br>service tinyproxy start/restart/stop</p><p>4、测试代理<br><a href="http://web.chacuo.net/netproxycheck">网站监测</a><br>在其他主机上执行如下命令：curl -x ip:port <a href="http://icanhazip.com/">http://icanhazip.com</a></p><p>5、拨号脚本<br>安装Python3和pip：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Ubuntu <span class="number">14.04</span> install Python3.<span class="number">6</span></span><br><span class="line">sudo <span class="built_in">add</span>-apt-repository <span class="keyword">pp</span><span class="variable">a:jonathonf</span>/<span class="keyword">python</span>-<span class="number">3.6</span></span><br><span class="line"># Not Found则</span><br><span class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br><span class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">python3</span>.<span class="number">6</span></span><br><span class="line"></span><br><span class="line"># install pip <span class="keyword">for</span> <span class="keyword">python3</span>.<span class="number">6</span></span><br><span class="line">wget http<span class="variable">s:</span>//bootstrap.pypa.io/<span class="built_in">get</span>-pip.<span class="keyword">py</span></span><br><span class="line">sudo <span class="keyword">python3</span>.<span class="number">6</span> <span class="built_in">get</span>-pip.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>查看pip指向：<code>pip -v</code></p><p>6、原理：<br>实现adsl拨号与断开的若干命令，当拨号IP更换后则原IP代理失效(我们所需要的代理IP就是拨号服务器不断变化的那个IP)。<br><strong>注</strong>：adsl-start是pppoe-start的别名，在Python代码中提示Not Found，原因未知。</p><p>6、配置固定IP主机<br>redis默认仅支持本地访问，需要修改redis.conf即注释127.0.0.1。<br><strong>注</strong>：若是购买阿里云轻量级应用服务器，那么还需要开放6379端口，如图：<br><img src="https://i.loli.net/2019/09/18/uz7CN2AfGXZ9Oax.png" alt="firewall"></p><h3 id="梳理流程"><a href="#梳理流程" class="headerlink" title="梳理流程"></a>梳理流程</h3><ul><li>拨号服务器运行拨号脚本，并将IP存入固定IP服务器中的redis</li><li>固定IP服务器提供接口调用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python Asyncio基础用法</title>
      <link href="/2019/10/23/Python%20Asyncio%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/"/>
      <url>/2019/10/23/Python%20Asyncio%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>异步IO:执行操作后立即返回可以执行其他操作，任务完成后，通过状态来通知继续回来处理调用。<br>协程：指与调用方协作，产出由调用方提供的值的过程。由程序主动控制在单线程里执行函数A时，可随时中断去执行函数B。<br>事件循环：程序开启一个无限的循环，把协程对象注册到事件循环上。当满足事件发生的时候，调用相应的协程对象。所有的对象被执行完毕且不再有新协程被添加，程序就终止。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>早期协程基于生成器，使用yield 和 yield from 暂停将程序执行流程交给子程序实现交替执行，手动实现对IO的调度协程。</p><ul><li>Future object：<code>Future</code>是一种特殊<strong>低层级</strong> 可等待对象，事件循环可以监视Future 对象是否完成，从而允许应用一部分等待另一部分完成一些工作，相当于结果容器。</li><li>其具备如下状态：<br>1、Pending<br>2、Running<br>3、Done<br>4、Cancelled</li><li>Task object：Task 是 Future 的一个子类，将 coroutine 和 Future 联系在一起用来在事件循环中运行协程。若将协程封装为 Task 可给其附加上状态 。创建Task对象方式如下：<br>1、asyncio.create_task()<br>2、loop.create_task()<br>3、asyncio.ensure_future() </li><li>awaitable objects：如果一个对象可以在 <code>await</code>语句中使用，那么它就是 <strong>可等待</strong> 对象。 </li><li>awaitable 对象有三种：coroutines、Tasks 和 Futures，其内部必实现<code>_await_</code> 方法。<br><img src="https://i.loli.net/2019/10/14/HYA6sEkJc7QB3zn.png" alt="Future"></li></ul><p>await 的目的：<br>1、获取协程的结果<br>2、挂起当前协程，将控制交由事件循环，切换到其他协程，然后等待结果，最后恢复协程继续执行</p><h3 id="启动协程"><a href="#启动协程" class="headerlink" title="启动协程"></a>启动协程</h3><p>1、Python3.4 的协程是通过 @asyncio.coroutine 和 yeild from 实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用@asyncio.coroutine装饰的函数称为协程</span></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">i</span>):</span></span><br><span class="line">    print(<span class="string">&quot;test_1&quot;</span>, i)</span><br><span class="line">    r = <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&quot;test_2&quot;</span>, i, r)</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">tasks = [test(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line"><span class="comment"># 判断协程函数</span></span><br><span class="line">print(asyncio.iscoroutinefunction(test))</span><br><span class="line"><span class="comment"># 判断协程对象(调用协程函数所返回的对象)</span></span><br><span class="line">print(asyncio.iscoroutine(tasks[<span class="number">0</span>]))</span><br><span class="line"><span class="comment"># 多个协程注册进一个事件循环,gather更加hight-level, gather可以将协程分组</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"><span class="comment"># loop.run_until_complete(asyncio.gather(*tasks))</span></span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><p>2、Python3.5 引入 async/await 语法糖。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子协程函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">delay</span>):</span></span><br><span class="line">    print(<span class="string">&quot;inner &#123;&#125;s&quot;</span>.format(delay))</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(delay)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;inner Done &#123;&#125;s&#x27;</span>.format(delay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 外部协程函数-嵌套协程</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 使用f-string拼接字符串</span></span><br><span class="line">    print(<span class="string">f&quot;开始运行 <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># 创建三个子协程对象</span></span><br><span class="line">    coroutine1 = inner(<span class="number">1</span>)</span><br><span class="line">    coroutine2 = inner(<span class="number">2</span>)</span><br><span class="line">    coroutine4 = inner(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将协程转为task并组成list    </span></span><br><span class="line">    tasks = [asyncio.ensure_future(coroutine1),</span><br><span class="line">             asyncio.ensure_future(coroutine2),</span><br><span class="line">             asyncio.ensure_future(coroutine4)]</span><br><span class="line"></span><br><span class="line">    taskd = [asyncio.ensure_future(inner(<span class="number">3</span>)), asyncio.ensure_future(inner(<span class="number">5</span>))]</span><br><span class="line">    <span class="comment"># dones：表示已经完成的任务</span></span><br><span class="line">    <span class="comment"># pendings：表示未完成的任务</span></span><br><span class="line">    <span class="comment"># 链式的调度协程</span></span><br><span class="line">    dones, pendings = <span class="keyword">await</span> asyncio.wait(tasks, return_when=<span class="string">&quot;FIRST_COMPLETED&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> dones:</span><br><span class="line">        print(<span class="string">&#x27;Done : &#x27;</span>, task.result())</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> pendings:</span><br><span class="line">        print(<span class="string">&#x27;Pend : &#x27;</span>, item)</span><br><span class="line">    <span class="comment"># 其他异步函数之间通过await进行调用</span></span><br><span class="line">    <span class="comment"># results = await asyncio.gather(*tasks)</span></span><br><span class="line">    <span class="comment"># for result in results:</span></span><br><span class="line">    <span class="comment">#     print(&#x27;Task : &#x27;, result)</span></span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> asyncio.as_completed(taskd):</span><br><span class="line">        result = <span class="keyword">await</span> task</span><br><span class="line">        print(<span class="string">f&#x27;获取返回结果: <span class="subst">&#123;result&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f&quot;结束运行 <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;CORO END&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># coroutine执行结束时候会调用回调函数,回调的最后一个参数是future对象,通过该对象可以获取协程返回值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span>(<span class="params">msg, future</span>):</span></span><br><span class="line">    print(<span class="string">&quot;send &#123;&#125; to &#123;&#125;&quot;</span>.format(msg, future.result()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消任务</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">cancel_it</span>(<span class="params">some_task</span>):</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    some_task.cancel()</span><br><span class="line">    print(<span class="string">&#x27;取消some_task任务&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">test_cancel</span>():</span></span><br><span class="line">    real_task = asyncio.ensure_future(inner(<span class="number">5</span>))</span><br><span class="line">    <span class="keyword">await</span> cancel_it(real_task)</span><br><span class="line">    <span class="keyword">await</span> real_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 获取当前事件循环,当前 OS 线程没有设置,创建一个新的事件循环并将其设置为当前循环</span></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    task = loop.create_task(main())</span><br><span class="line">    cancel_task = loop.create_task(test_cancel())</span><br><span class="line">    <span class="comment"># 绑定回调</span></span><br><span class="line">    task.add_done_callback(partial(callback, <span class="string">&quot;main&quot;</span>))</span><br><span class="line">    <span class="comment"># run_until_complete方法会将协程封装为task对象,并且等待所有任务结束,可获取协程的返回值，</span></span><br><span class="line">    loop.run_until_complete(task)</span><br><span class="line">    loop.run_until_complete(cancel_task)</span><br><span class="line">    <span class="comment"># loop.close() 关闭事件循环</span></span><br></pre></td></tr></table></figure><h3 id="并发、同步与通信"><a href="#并发、同步与通信" class="headerlink" title="并发、同步与通信"></a>并发、同步与通信</h3><p><img src="https://i.loli.net/2019/10/14/J68A5HCRWgoFLfy.png"></p><ul><li>asyncio.Queue为协程提供了一个先进先出的数据结构,与线程的queue.Queue相似。<br>1、全局通信<br>2、限流限速</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> asyncio <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line">queue = Queue()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">start</span>():</span></span><br><span class="line">    [queue.put_nowait(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line">    <span class="keyword">await</span> asyncio.ensure_future(work())  <span class="comment"># put_nowait表示放入元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">work</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> queue.empty():  <span class="comment"># 判断队列的元素是否为空</span></span><br><span class="line">            num = queue.get_nowait()  <span class="comment"># 获取元素</span></span><br><span class="line">            print(<span class="string">f&quot;获取数字:<span class="subst">&#123;num&#125;</span>&quot;</span>)</span><br><span class="line">            queue.task_done()  <span class="comment"># 告诉队列该任务处理完。</span></span><br><span class="line">    <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># asyncio.run(start())</span></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(start())</span><br></pre></td></tr></table></figure><ul><li>协程锁<br>Python 的协程是运行在单进程单线程，但在下列场景需要锁机制：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">lock = asyncio.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="comment"># async with lock:</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    print(<span class="string">&quot;第&#123;&#125;个协程start&quot;</span>.format(i))</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    a -= <span class="number">1</span></span><br><span class="line">    print(<span class="string">&quot;第&#123;&#125;个协程:&#123;&#125;&quot;</span>.format(i,a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(<span class="string">f&quot;started at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    tasks = [asyncio.ensure_future(run(i)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>)]</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">    print(<span class="string">f&quot;finished at <span class="subst">&#123;time.strftime(<span class="string">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">不加锁运行结果：</span><br><span class="line">started at <span class="number">10</span>:<span class="number">53</span>:<span class="number">00</span></span><br><span class="line">第<span class="number">1</span>个协程start</span><br><span class="line">第<span class="number">2</span>个协程start</span><br><span class="line">第<span class="number">3</span>个协程start</span><br><span class="line">第<span class="number">4</span>个协程start</span><br><span class="line">第<span class="number">1</span>个协程:<span class="number">4</span></span><br><span class="line">第<span class="number">3</span>个协程:<span class="number">3</span></span><br><span class="line">第<span class="number">2</span>个协程:<span class="number">2</span></span><br><span class="line">第<span class="number">4</span>个协程:<span class="number">1</span></span><br><span class="line">finished at <span class="number">10</span>:<span class="number">53</span>:<span class="number">01</span></span><br></pre></td></tr></table></figure><p>分析如下：协程虽然是单线程调度，但由于执行中有延时或者I/O中断等因素，协程 1 读到的 a 为 1并增1，遇到 await 切换延时，再切回到协程 2，读到的 b 为2并增1 ，遇到 await 切换延时，再切回到协程 3，读到的 b 为3，当第 4个协程切到延时，最后切回协程 1，此时 b-1 得到 4，再切回协程 2，此时 b-1 得到 3。若加锁可得结果皆为1，但耗时为4s。<br>具体看<a href="https://zhaobugs.com/2019/06/25/Python%E4%B8%AD%E7%9A%84%E5%8D%8F%E7%A8%8B%E9%94%81/#%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98">Python协程锁</a></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul><li>异步上下文管理器”async with”</li><li>异步迭代器 “async for”</li><li><code>call_soon\call_later</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span>(<span class="params">sleep_times, loop</span>):</span></span><br><span class="line">    print(<span class="string">&quot;sleep &#123;&#125; success &#123;&#125;&quot;</span>.format(sleep_times, loop.time()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stoploop</span>(<span class="params">loop</span>):</span></span><br><span class="line">    loop.stop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    <span class="comment"># call_soon  尽可能快调用 callback下个循环即刻执行</span></span><br><span class="line">    <span class="comment"># loop.call_soon(callback, 2)</span></span><br><span class="line">    <span class="comment"># loop.call_soon(stoploop, loop)</span></span><br><span class="line">    <span class="comment"># call_later 延后 time_delay 秒再执行 callback 方法根据延时时间确定顺序。</span></span><br><span class="line">    loop.call_later(<span class="number">2</span>, callback, <span class="number">2</span>, loop)</span><br><span class="line">    loop.call_later(<span class="number">1</span>, callback, <span class="number">1</span>, loop)</span><br><span class="line">    loop.call_later(<span class="number">3</span>, callback, <span class="number">3</span>, loop)</span><br><span class="line">    loop.call_soon(callback, <span class="number">4</span>, loop)</span><br><span class="line">    <span class="comment"># call_at  以float类型返回当前时间循环的内部时间。</span></span><br><span class="line">    now = loop.time()</span><br><span class="line">    loop.call_at(now + <span class="number">2</span>, callback, <span class="number">22</span>, loop)</span><br><span class="line">    loop.call_at(now + <span class="number">1</span>, callback, <span class="number">11</span>, loop)</span><br><span class="line">    loop.call_at(now + <span class="number">3</span>, callback, <span class="number">33</span>, loop)</span><br><span class="line">    loop.run_forever()</span><br></pre></td></tr></table></figure><ul><li>Future对象使用await</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">future, result</span>):</span></span><br><span class="line">    print(<span class="string">&quot;设置结果到future&quot;</span>, result)</span><br><span class="line">    future.set_result(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">loop</span>):</span></span><br><span class="line">    all_done = asyncio.Future()</span><br><span class="line">    print(<span class="string">&quot;调用函数获取future对象&quot;</span>)</span><br><span class="line">    loop.call_soon(foo, all_done, <span class="string">&quot;the result&quot;</span>)</span><br><span class="line"></span><br><span class="line">    result = <span class="keyword">await</span> all_done</span><br><span class="line">    print(<span class="string">&quot;获取future里的结果&quot;</span>, result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        loop.run_until_complete(main(loop))</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        loop.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux stat scp</title>
      <link href="/2019/10/23/Linux%20stat%20scp/"/>
      <url>/2019/10/23/Linux%20stat%20scp/</url>
      
        <content type="html"><![CDATA[<h2 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h2><p>stat file/dir<br>功能 : 显示inode内容<br>Colors 文件的详细信息</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">stat</span><span class="meta"> [文件或目录]</span></span><br></pre></td></tr></table></figure><p>File: 文件名<br>size: 文件大小<br>Blocks: 文件所占用Block的块数<br>IO Block: 文件IO Block的大小<br>regular file: 文件的类型<br>Device: 设备号 以八进制和十进制显示<br>Inode: inode号<br>Links: 硬链接数量<br>Access : 访问权限<br>Uid : 拥有者ID userid<br>Gid : 所在的组的ID<br>Access: 最后访问时间<br>Modify: 文件内容最后修改时间<br>-Change: 文件属性最后修改时间</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stat <span class="operator">-f</span> file/<span class="built_in">dir</span></span><br></pre></td></tr></table></figure><p>显示关于文件系统的信息，而非文件本身</p><h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h2><p>1、命令格式：scp [参数] [原路径] [目标路径]<br>2、命令功能：scp是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。<br>3、命令选项：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">`-P`:数据传输默认端口，默认是<span class="number">22</span></span><br><span class="line">`-r`:递归拷贝整个目录</span><br><span class="line">`-i`:指定密钥文件，参数直接传递给ssh使用</span><br><span class="line">`-l`:限定网速，以Kbit/s为单位</span><br><span class="line">`-C`:允许压缩</span><br><span class="line">`-<span class="number">1</span>,-<span class="number">2</span>`:强制scp命令使用ssh1或者ssh2协议</span><br><span class="line">`-<span class="number">4</span>,-<span class="number">6</span>`:使用ipv4或者ipv6寻址</span><br></pre></td></tr></table></figure><p>4、本地文件传输到远程服务器</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;scp test.txt <span class="symbol">root@</span><span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>:/home/</span><br><span class="line"></span><br><span class="line">将test.txt文件复制到目标服务器（<span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>）下的home文件夹下。</span><br></pre></td></tr></table></figure><p>5、远程服务器文件传输到本地</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;scp root@192.<span class="number">168.1</span>.<span class="number">1</span><span class="symbol">:/home/test</span>.txt test</span><br><span class="line"></span><br><span class="line">将远程服务中home目录下的<span class="string">`test.txt`</span>文件，复制到本地的test目录下</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux grep awk sed</title>
      <link href="/2019/10/22/Linux%20grep%20awk%20sed/"/>
      <url>/2019/10/22/Linux%20grep%20awk%20sed/</url>
      
        <content type="html"><![CDATA[<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>grep用于查看文件中符合条件的字符串<br>1、常用参数：<br>    -c 或 –count : 计算符合样式的行数。</p><pre><code>-d &lt;动作&gt; 或 --directories=&lt;动作&gt; : 查找目录-E 或 --extended-regexp : 将样式为延伸的正则表达式来使用。-v 或 --revert-match : 显示不包含匹配文本的所有行。-i 或 --ignore-case : 忽略字符大小写的差别。-o 或 --only-matching : 只显示匹配PATTERN 部分。-A&lt;显示行数&gt; 或 --after-context=&lt;显示行数&gt; : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。-B&lt;显示行数&gt; 或 --before-context=&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前的内容。-C&lt;显示行数&gt; 或 --context=&lt;显示行数&gt;或-&lt;显示行数&gt; : 除了显示符合样式的那一行之外，并显示该行之前后的内容。--line-buffered : grep 会缓存一批数据后再输出，使用--line-buffered使grep不缓存数据。</code></pre><p>2、示例：</p><p>1）查询1.txt下包含a的行：</p><p>cat 1.txt —查看1.txt文件内容（查看文件内容的命令还有：less、more、cat、vi、head、tail），</p><p>grep ‘a’ 1.txt –col –查找1.txt中a并且高亮显示，可以看出一共4行，</p><p>grep -c ‘a’ 1.txt —计算1.txt中包含a的行数，一共4行,输出4。</p><p>2）查询1.txt中包含grep以及前后行</p><p>grep -C 1 ‘grep’ 1.txt —使用-C命令，查询包含grep以及前后一行，同理查询前后两行就是grep -C 2 ‘grep’ 1.txt</p><p>grep -A 1 ‘grep’ 1.txt —使用-A命令，查询包含grep以及后一行，同理查询后两行就是grep -A 2 ‘grep’ 1.txt</p><p>grep -B 1 ‘grep’ 1.txt —使用-B命令，查询包含grep以及前一行，同理查询前两行就是grep -B 2 ‘grep’ 1.txt</p><p>3）查询1.txt中不包含a的行 ——- grep -v ‘a’ 1.txt</p><p>4）查询1.txt中包含A、a的内容 — grep -i ‘a’ 1.txt 或者 gerp -i ‘A’ 1.txt</p><p>5）查询1.txt中的grep字符串并显示匹配内容 — grep -0 ‘grep’ 1.txt</p><p>可以与正则一起使用。</p><p>6）grep的正则表达式 -E 使用扩展正则表达式。</p><p>grep -E ‘user=\w{1,7}’ 1.txt — 查询1.txt中：user=文本或数字1到7个，的行内容</p><p>grep -E -o ‘user=\w{1,7}’ 1.txt — 查询1.txt中：user=文本或数字1到7个，只显示符合正则的内容。</p><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p>awk用于处理文本文件、分析文本。</p><p>1、常用参数</p><pre><code>-F：指定输入文件折分隔符。-v：赋值一个用户定义变量。-f ：从脚本文件中读取awk命令。</code></pre><p>2、awk的内建变量</p><pre><code>$n：前记录的第n个字段，字段间由FS分隔。$0：完整的输入记录。FS：字段分隔符（默认是空）。NF：一条记录的字段数。NR：已经独处的记录数，即行号。OFS：输入记录分隔符，输出时用指定符合替换分隔符。ORS：输出记录分割符。RS：记录分割符。</code></pre><p>3、两种模式：</p><pre><code>BEGIN：指定处理文本之前需要执行的操作。END：指定处理完所有行之后需要执行的操作。</code></pre><p>4、示例：</p><p>1） awk ‘{print $0}’ test-awk.txt —- 打印完整的输入记录、文本</p><p>awk ‘{print $1}’ test-awk.txt —- 打印的输入记录、文本的第一行</p><p>2）设置变量</p><p>awk -va=linux ‘{print $1,$1a}’ test-awk.txt —- 设置变量a为Linux</p><p>3）awk ‘BEGIN{FS=”#####”}{print $1,$2}’ test-awk1.txt —- 默认替换分隔符为空格</p><p>awk ‘BEGIN{FS=”#####”;OFS=”—-“}{print $1,$2}’ test-awk1.txt —- 分隔符#####变为—-</p><p>4）awk ‘BEGIN{RS=”#####”}{print $0}’ test-awk1.txt —- 找到#####分隔符，并把分隔符后面内容在另一行输出</p><p>awk ‘BEGIN{ORS=”—–”}{print $0}’ test-awk1.txt —– 把换行符换成—–</p><p>5）NR是指awk正在处理的记录位于文件中的位置（行号）</p><p>NF是指awk正在处理的记录包含几个域（字段），这于域分隔符有关，默认为空</p><p>6）awk ‘/e/{print}’ test-awk1.txt —– 匹配带e的内容</p><p>awk -F ‘#####’ ‘$2~/e/{print}’ test-awk1.txt —– 以#####为分隔符，匹配第二列中包含e的内容</p><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><p>主要作用是查找；新增 删除 和修改替换。</p><p>1、常用参数</p><pre><code>-i 表示inplace edit，就地修改文件-n 表示仅显示script处理后的结果-e 表示运行多次处理s 表示替换d 表示删除</code></pre><p>2、示例</p><p>sed -i ‘s#linux#windows#g’ test-awk1.txt —- 把test-awk1.txt中的Linux改成Windows</p><p>sed -i ‘s/^[a-z]*#/test/g’ test-sed.txt —- 把test-sed.txt中windows#、centos#改成test</p><ol start="2"><li>sed -n ‘3p’ test-awk1.txt —- 仅打印第三行</li></ol><ol start="3"><li>sed -e ‘1d’ -e ‘s#a#A#g’ test-awk.txt —– 先删除第一行，然后把a替换成A</li></ol><p>sed的其他用法如下：</p><p>1、删除行首空格</p><pre><code>    sed &#39;s/^[ ]*//g&#39; filename    sed &#39;s/^ *//g&#39; filename    sed &#39;s/^[[:space:]]*//g&#39; filename</code></pre><p>2、行后和行前添加新内容</p><pre><code>行前：sed -i &#39;s#^#HEAD&amp;#g&#39; filename行后：sed -i &#39;s#$#&amp;TAIL#g&#39; filename&amp;代表pattern</code></pre><p>3、使用变量替换(使用双引号)</p><pre><code> sed -e &quot;s/$var1/$var2/g&quot; filename</code></pre><p>4、在第一行前插入文本</p><pre><code> sed -i &#39;1 i\插入字符串&#39; filename</code></pre><p>5、在最后一行插入</p><pre><code>sed -i &#39;$ a\插入字符串&#39; filename</code></pre><p>6、在匹配行前插入</p><pre><code>sed -i &#39;/pattern/ i &quot;插入字符串&quot;&#39; filename</code></pre><p>7、在匹配行后插入</p><pre><code>sed -i &#39;/pattern/ a &quot;插入字符串&quot;&#39; filename</code></pre><p>8、删除文本中空行和空格组成的行以及#号注释的行</p><pre><code>grep -v ^# filename | sed /^[[:space:]]*$/d | sed /^$/d</code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux lsof netstat</title>
      <link href="/2019/10/20/Linux%20lsof%20netstat/"/>
      <url>/2019/10/20/Linux%20lsof%20netstat/</url>
      
        <content type="html"><![CDATA[<h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>Netstat 是一款命令行工具，可用于列出系统上所有的网络套接字连接情况，包括 tcp, udp 以及 unix 套接字，另外它还能列出处于监听状态（即等待接入请求）的套接字。<br>如果你想确认系统上的 Web 服务有没有起来，你可以查看80端口有没有打开。<br>netstat - 打印网络连接、路由表、连接的数据统计、伪装连接以及广播域成员。</p><ol><li>列出所有连接<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">netstat -a</span></span><br></pre></td></tr></table></figure></li><li>只列出 TCP 或 UDP 协议的连接<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">netstat</span> <span class="string">-at</span></span><br><span class="line"><span class="attr">netstat</span> <span class="string">-au</span></span><br></pre></td></tr></table></figure></li><li>禁用反向域名解析，加快查询速度<br>默认情况下 netstat 会通过反向域名解析技术查找每个 IP 地址对应的主机名<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">netstat -ant</span></span><br></pre></td></tr></table></figure></li><li>只列出监听中的连接<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">netstat -tnl</span></span><br></pre></td></tr></table></figure></li><li>获取进程名、进程号以及用户 ID<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">netstat -nlpt</span></span><br></pre></td></tr></table></figure></li><li>打印统计数据<br>只打印出 TCP 或 UDP 协议的统计数据，只要加上对应的选项（-t 和 -u）即可<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">netstat -s</span></span><br></pre></td></tr></table></figure></li><li>显示内核路由信息<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">netstat -rn</span></span><br></pre></td></tr></table></figure></li><li>打印网络接口<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">netstat -i</span></span><br></pre></td></tr></table></figure></li><li>netstat 持续输出<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">netstat -ct</span></span><br></pre></td></tr></table></figure></li><li>显示多播组信息<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">netstat -g</span></span><br></pre></td></tr></table></figure></li><li>查看服务是否在运行<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -aple | grep<span class="built_in"> ntp </span> ## 查看ntp服务</span><br></pre></td></tr></table></figure></li></ol><h2 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h2><h3 id="关键选项"><a href="#关键选项" class="headerlink" title="关键选项"></a>关键选项</h3><p>默认 : 没有选项，lsof列出活跃进程的所有打开文件<br>组合 : 可以将选项组合到一起，如-abc，但要当心哪些选项需要参数<br>-a : 结果进行“与”运算（而不是“或”）<br>-l : 在输出显示用户ID而不是用户名<br>-h : 获得帮助<br>-t : 仅获取进程ID<br>-U : 获取UNIX套接口地址<br>-F : 格式化输出结果，用于其它命令。可以通过多种方式格式化，如-F pcfn（用于进程id、命令名、文件描述符、文件名，并以空终止）</p><h3 id="获取网络信息"><a href="#获取网络信息" class="headerlink" title="获取网络信息"></a>获取网络信息</h3><p>1、使用 -i 显示所有连接</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lsof -i</span></span><br></pre></td></tr></table></figure><p>2、使用 -i 6 仅获取IPv6流量</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i <span class="number">6</span></span><br></pre></td></tr></table></figure><p>3、仅显示 TCP 连接（同理可获得UDP连接）</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lsof -iTCP</span></span><br></pre></td></tr></table></figure><p>4、使用 -i:port 来显示与指定端口相关的网络信息</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i :<span class="number">22</span></span><br></pre></td></tr></table></figure><p>5、使用 @host 来显示指定到主机的连接</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -<span class="symbol">i@</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.5</span></span><br></pre></td></tr></table></figure><p>6、使用 @host:port 显示基于主机与端口的连接<br>组合主机与端口的显示信息。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -<span class="symbol">i@</span><span class="number">172.16</span><span class="number">.12</span><span class="number">.5</span>:<span class="number">22</span></span><br></pre></td></tr></table></figure><p>7、找出监听端口</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsof -<span class="built_in">i</span> -sTCP:LISTEN</span><br><span class="line"></span><br><span class="line">lsof -<span class="built_in">i</span> | grep -<span class="built_in">i</span> LISTEN</span><br></pre></td></tr></table></figure><p>8、找出已建立的连接<br>显示任何已经连接的连接。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsof -<span class="built_in">i</span> -sTCP:ESTABLISHED</span><br><span class="line"></span><br><span class="line">lsof -<span class="built_in">i</span> | grep -<span class="built_in">i</span> ESTABLISHED</span><br></pre></td></tr></table></figure><h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><p>获取各种用户的信息，以及它们在系统上的操作，包括它们的网络活动、对文件的操作等。<br>1、使用-u显示指定用户打开的应用</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lsof</span> -u daniel</span><br><span class="line"></span><br><span class="line">lsof -u<span class="regexp"> ^daniel</span>  显示除指定用户以外的其它所有用户</span><br></pre></td></tr></table></figure><p>2、杀死指定用户运行的所有进程</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">kill</span> -<span class="number">9</span> <span class="string">`lsof -t -u daniel`</span></span><br></pre></td></tr></table></figure><h3 id="命令和进程"><a href="#命令和进程" class="headerlink" title="命令和进程"></a>命令和进程</h3><p>查看指定程序或进程由什么启动，使用lsof通过名称或进程ID过滤来完成这个任务<br>1、使用 -c 查看指定的命令正在使用的文件和网络连接</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lsof -c syslog-ng</span></span><br></pre></td></tr></table></figure><p>2、使用-p查看指定进程ID已打开的内容</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -p <span class="number">10075</span> </span><br></pre></td></tr></table></figure><p>3、-t 选项只返回 PID</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lsof -t -c Mail</span></span><br></pre></td></tr></table></figure><h3 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h3><p>通过查看指定文件或目录，可以看到系统上所有正与其交互的资源——包括用户、进程等。<br>1、显示与指定目录交互的所有一切</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof <span class="regexp">/var/</span>log<span class="regexp">/messages/</span></span><br></pre></td></tr></table></figure><p>2、显示与指定文件交互的所有一切</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof <span class="regexp">/home/</span>daniel/firewall_whitelist.txt</span><br></pre></td></tr></table></figure><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><p>当开始组合查询时，它就显示了它强大的功能。<br>1、显示 daniel 连接到 1.1.1.1 所做的一切</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -u daniel -i @<span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>2、同时使用 -t 和 -c 选项以给进程发送 HUP 信号</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">kill</span> -HUP <span class="string">`lsof -t -c sshd`</span></span><br></pre></td></tr></table></figure><p>3、lsof +L1 显示所有打开的链接数小于1的文件<br>这通常表示某个攻击者正尝试通过删除文件入口来隐藏文件内容。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lsof</span> +L<span class="number">1</span></span><br></pre></td></tr></table></figure><p>4、显示某个端口范围的打开的连接</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -<span class="selector-tag">i</span> @fw<span class="selector-class">.google</span><span class="selector-class">.com</span>:<span class="number">2150</span>=<span class="number">2180</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux top free</title>
      <link href="/2019/10/20/Linux%20top%20free/"/>
      <url>/2019/10/20/Linux%20top%20free/</url>
      
        <content type="html"><![CDATA[<h2 id="Top"><a href="#Top" class="headerlink" title="Top"></a>Top</h2><p>top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况。<br>其它列提供了关于进程的有用信息：<br>PID：进程 ID，一个用来定位进程的唯一标识符<br>USER：运行进程的用户<br>PR：任务的优先级<br>NI：Nice 值，优先级的一个更好的表现形式<br>VIRT：虚拟内存的大小，单位是 KiB（kibibytes）<br>RES：常驻内存大小，单位是 KiB（物理内存和虚拟内存的一部分）<br>SHR：共享内存大小，单位是 KiB（共享内存和虚拟内存的一部分）<br>S：进程状态，一般 I 代表空闲，R 代表运行，S 代表休眠，Z 代表僵尸进程，T 或 t 代表停止（还有其它更少见的选项）<br>%CPU：自从上次屏幕更新后的 CPU 使用率<br>%MEM：自从上次屏幕更新后的 RES 常驻内存使用率<br>TIME+：自从程序启动后总的 CPU 使用时间<br>COMMAND：启动命令，如之前描述那样</p><p><img src="/images/16-LinuxOther/1-top.png"><br>第四行（Kib Mem）和第五行（KiB Swap）提供了内存和交换空间的信息。这些数值是：</p><ul><li>总内存容量</li><li>已用内存</li><li>空闲内存</li><li>内存的缓冲值</li><li>交换空间的缓存值<br>默认它们是用 KiB 为单位展示的，但是按下 E（扩展内存缩放 extend memory scaling）可以轮换不同的单位：KiB、MiB、GiB、TiB、PiB、EiB（kilobytes、megabytes、gigabytes、terabytes、petabytes 和 exabytes）</li></ul><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul><li>敲击x键进程字段排序:可以看到，top默认的排序列是“%CPU”</li><li>敲击shift+M键按%MEM排序</li><li>敲击b键打开/关闭加亮当前运行的进程</li></ul><h2 id="Free"><a href="#Free" class="headerlink" title="Free"></a>Free</h2><p>free 命令显示系统使用和空闲的内存情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。<br>-b 　以Byte为单位显示内存使用情况。<br>-k 　以KB为单位显示内存使用情况。<br>-m 　以MB为单位显示内存使用情况。<br>-g   以GB为单位显示内存使用情况。<br>-o 　不显示缓冲区调节列。<br>-s&lt;间隔秒数&gt; 　持续观察内存使用状况。<br>-t 　显示内存总和列。<br>-V 　显示版本信息。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">实例<span class="number">3</span>：周期性的查询内存使用信息</span><br><span class="line"><span class="symbol">ubuntu@</span>VM<span class="number">-0</span><span class="number">-16</span>-ubuntu:~$ free -s <span class="number">10</span></span><br><span class="line">              total        used        free      <span class="keyword">shared</span>  buff/cache   available</span><br><span class="line">Mem:        <span class="number">1877364</span>      <span class="number">142060</span>      <span class="number">169916</span>        <span class="number">5516</span>     <span class="number">1565388</span>     <span class="number">1544340</span></span><br><span class="line">Swap:             <span class="number">0</span>           <span class="number">0</span>           <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 多层嵌套列表展开</title>
      <link href="/2019/10/15/Python%20%E5%A4%9A%E5%B1%82%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8%E5%B1%95%E5%BC%80/"/>
      <url>/2019/10/15/Python%20%E5%A4%9A%E5%B1%82%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8%E5%B1%95%E5%BC%80/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flat</span>(<span class="params">deep_list, result</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    嵌套类表展平的第一种方法: 使用递归实现</span></span><br><span class="line"><span class="string">    :param deep_list: 目标list：多层嵌套列表</span></span><br><span class="line"><span class="string">    :param result:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> deep_list:</span><br><span class="line">        <span class="keyword">if</span> isinstance(element, list):</span><br><span class="line">            flat(element, result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(element)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flat_</span>(<span class="params">deep_list</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    嵌套列表展平的第二种方法：使用生成器</span></span><br><span class="line"><span class="string">    :param deep_list: 目标list：多层嵌套列表</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> deep_list:</span><br><span class="line">        <span class="keyword">if</span> isinstance(element, list):</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> flat_(element)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">yield</span> element</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    a = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>], <span class="number">8</span>], <span class="number">9</span>, [<span class="number">10</span>, <span class="number">11</span>]]</span><br><span class="line">    result = [x <span class="keyword">for</span> x <span class="keyword">in</span> flat_(a)]</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JsCrack JsFuck CloudFlare</title>
      <link href="/2019/10/11/JsCrack%20JsFuck%20CloudFlare/"/>
      <url>/2019/10/11/JsCrack%20JsFuck%20CloudFlare/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>案例网站：<br>1、<a href="https://www.biovision.com/">https://www.biovision.com/</a><br>2、<a href="https://coinone.co.kr/">https://coinone.co.kr/</a></p><h2 id="JsFuck简介"><a href="#JsFuck简介" class="headerlink" title="JsFuck简介"></a>JsFuck简介</h2><p>JSFuck 是使用 [、]、(、)、! 和 + 六种字符来表示原有的字符的，解决方案：<code>console.log(xxx)</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span>       =&gt;  ![]</span><br><span class="line"><span class="literal">true</span>        =&gt;  !![]</span><br><span class="line"><span class="literal">undefined</span>   =&gt;  [][[]]</span><br><span class="line"><span class="literal">NaN</span>         =&gt;  +[![]]</span><br><span class="line"><span class="number">0</span>           =&gt;  +[]</span><br><span class="line"><span class="number">1</span>           =&gt;  +!+[]</span><br><span class="line"><span class="number">2</span>           =&gt;  !+[]+!+[]</span><br><span class="line"><span class="number">10</span>          =&gt;  [+!+[]]+[+[]]</span><br><span class="line"><span class="built_in">Array</span>       =&gt;  []</span><br><span class="line"><span class="built_in">Number</span>      =&gt;  +[]</span><br><span class="line"><span class="built_in">String</span>      =&gt;  []+[]</span><br><span class="line"><span class="built_in">Boolean</span>     =&gt;  ![]</span><br><span class="line"><span class="built_in">Function</span>    =&gt;  [][<span class="string">&quot;filter&quot;</span>]</span><br><span class="line"><span class="built_in">eval</span>        =&gt;  [][<span class="string">&quot;filter&quot;</span>][<span class="string">&quot;constructor&quot;</span>]( CODE )()</span><br><span class="line"><span class="built_in">window</span>      =&gt;  [][<span class="string">&quot;filter&quot;</span>][<span class="string">&quot;constructor&quot;</span>](<span class="string">&quot;return this&quot;</span>)()</span><br></pre></td></tr></table></figure><h2 id="取巧方法"><a href="#取巧方法" class="headerlink" title="取巧方法"></a>取巧方法</h2><p>1、安装三方库：<br><code>pip install cfscrape</code></p><p>2、实例操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cfscrape</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个create_scraper对象,请求报错，可以加上延时</span></span><br><span class="line">scraper = cfscrape.create_scraper(delay=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 获取网页源代码</span></span><br><span class="line">web_data = scraper.get(url).text</span><br><span class="line">print(web_data)</span><br></pre></td></tr></table></figure><h2 id="分析解决"><a href="#分析解决" class="headerlink" title="分析解决"></a>分析解决</h2><p>1、通过抓包可以看到503请求数秒后跳转一个类似“<a href="https://xxxxx/cdn-cgi/l/chk_jschl?s=xxx%E2%80%9D%E7%9A%84302%E8%AF%B7%E6%B1%82%EF%BC%8C%E6%88%90%E5%8A%9F%E5%90%8E%E5%8D%B3%E5%8F%AF%E8%B7%B3%E8%BD%AC%E5%88%B0%E6%9C%9F%E6%9C%9B%E9%A1%B5%E9%9D%A2%E3%80%82">https://xxxxx/cdn-cgi/l/chk_jschl?s=xxx”的302请求，成功后即可跳转到期望页面。</a><br>2、cookie里面会包含__cfduid, cf_clearance 这两个字段。第二个302请求的参数如下图，可用正则直接提取前三个参数，第四个参数由Js动态生成：<br><img src="/images/9-cloudFlare/CloudFlare1.png"><br>1、操作DOM元素部分可去除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">t.innerHTML=<span class="string">&quot;&lt;a href=&#x27;/&#x27;&gt;x&lt;/a&gt;&quot;</span>;</span><br><span class="line">t = t.firstChild.href;r = t.match(<span class="regexp">/https?:\/\//</span>)[<span class="number">0</span>];</span><br><span class="line">t = t.substr(r.length); t = t.substr(<span class="number">0</span>,t.length<span class="number">-1</span>); </span><br><span class="line"></span><br><span class="line">a = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;jschl-answer&#x27;</span>);</span><br><span class="line">f = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;challenge-form&#x27;</span>)</span><br></pre></td></tr></table></figure><p>2、由于去除DOM部分，修改与之对应的Js代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.value = (+gRfsikn.fPWFibk + t.length).toFixed(<span class="number">10</span>)</span><br><span class="line"><span class="comment">// a.value 和 t.length 可改为固定变量和固定值</span></span><br></pre></td></tr></table></figure><p>3、调用execjs生成对应参数值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> cfscrape</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> gzip <span class="keyword">import</span> GzipFile</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO,StringIO</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloudFlare</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.session = requests.session()</span><br><span class="line">        self.url = <span class="string">&quot;https://coinone.co.kr/&quot;</span></span><br><span class="line">        self.url_jschl = <span class="string">&quot;https://coinone.co.kr/cdn-cgi/l/chk_jschl&quot;</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://coinone.co.kr/&quot;</span>,</span><br><span class="line">            <span class="comment"># &quot;Accept-Encoding&quot;: &quot;gzip, deflate, br&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_clouFlare</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        503 获取cookie __cfduid ， 并从页面提取二次访问的参数</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        resp = self.session.get(self.url, headers=self.headers)</span><br><span class="line">        <span class="comment"># resp.raise_for_status()</span></span><br><span class="line">        text = resp.text</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_params</span>(<span class="params">self, text</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        提取访问参数</span></span><br><span class="line"><span class="string">        :param text:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        pattern = re.compile(<span class="string">&#x27;setTimeout\(function\(\)\&#123;(.*?)f.action \+= location.hash;&#x27;</span>, re.S)</span><br><span class="line">        code = pattern.findall(text)[<span class="number">0</span>].strip()</span><br><span class="line">        <span class="comment"># 正则表达式中\s匹配任何空白字符，包括空格、制表符、换页符等等, 等价于[ \f\n\r\t\v ]</span></span><br><span class="line">        code = re.sub(<span class="string">&#x27;\s+(t = document.*?);\s+;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, code, flags=re.S)</span><br><span class="line">        code = re.sub(<span class="string">&#x27;a.value&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, code)</span><br><span class="line">        code = re.sub(<span class="string">&#x27;t.length&#x27;</span>, <span class="string">&#x27;13&#x27;</span>, code)</span><br><span class="line">        code = <span class="string">&#x27;function test()&#123;&#x27;</span> + code.strip() + <span class="string">&#x27;;return value;&#125;&#x27;</span></span><br><span class="line">        s1 = execjs.compile(code)</span><br><span class="line">        _jschl_answer = s1.call(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">        _s = re.findall(<span class="string">&#x27;name=&quot;s&quot; value=&quot;(.*?)&quot;&#x27;</span>, text)[<span class="number">0</span>]</span><br><span class="line">        _jschl_vc = re.findall(<span class="string">&#x27;name=&quot;jschl_vc&quot; value=&quot;(.*?)&quot;&#x27;</span>, text)[<span class="number">0</span>]</span><br><span class="line">        _pass = re.findall(<span class="string">&#x27;name=&quot;pass&quot; value=&quot;(.*?)&quot;&#x27;</span>, text)[<span class="number">0</span>]</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&#x27;s&#x27;</span>: _s,</span><br><span class="line">            <span class="string">&#x27;jschl_vc&#x27;</span>: _jschl_vc,</span><br><span class="line">            <span class="string">&#x27;pass&#x27;</span>: _pass,</span><br><span class="line">            <span class="string">&#x27;jschl_answer&#x27;</span>: _jschl_answer</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> params</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cf_clearance</span>(<span class="params">self, params</span>):</span></span><br><span class="line">        time.sleep(<span class="number">4</span>)</span><br><span class="line">        resp = self.session.get(self.url_jschl, params=params, headers=self.headers, allow_redirects=<span class="literal">True</span>)</span><br><span class="line">        print(self.session.cookies.get_dict())</span><br><span class="line">        resp = self.session.get(self.url, headers=self.headers)</span><br><span class="line">        resp.encoding = resp.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> resp.text</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        text = self.get_clouFlare()</span><br><span class="line">        params = self.generate_params(text)</span><br><span class="line">        text = self.get_cf_clearance(params)</span><br><span class="line">        print(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cf = CloudFlare()</span><br><span class="line">    cf.run()</span><br></pre></td></tr></table></figure><p><img src="/images/CloudFlare2.png" alt="测试结果"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JsCrack谷歌-有道-百度翻译</title>
      <link href="/2019/10/10/JsCrack%20%E8%B0%B7%E6%AD%8C-%E6%9C%89%E9%81%93-%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91/"/>
      <url>/2019/10/10/JsCrack%20%E8%B0%B7%E6%AD%8C-%E6%9C%89%E9%81%93-%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<h3 id="有道翻译"><a href="#有道翻译" class="headerlink" title="有道翻译"></a>有道翻译</h3><p>目标网址：<a href="http://fanyi.youdao.com/">http://fanyi.youdao.com/</a></p><ul><li>点击翻译按钮后可在XHR处添加“translate_o”断点，执行后代码停留在send处，根据右侧call stack在t.translate处发现如下参数：</li></ul><p><img src="/images/8-translate/fanyi1.png"></p><ul><li>查找r的位置如图，追踪生成他的函数：</li></ul><p><img src="/images/8-translate/fanyi2.png"></p><h3 id="百度翻译"><a href="#百度翻译" class="headerlink" title="百度翻译"></a>百度翻译</h3><p>目标网址：<a href="https://fanyi.baidu.com/">https://fanyi.baidu.com/</a></p><ul><li>同样观察XHR发现两个接口，先请求<a href="https://fanyi.baidu.com/langdetect%E5%BE%97%E5%88%B0%E8%BE%93%E5%85%A5%E8%AF%AD%E8%A8%80%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%8F%AF%E6%89%BE%E5%88%B0%E5%A6%82%E4%B8%8B%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%EF%BC%9A">https://fanyi.baidu.com/langdetect得到输入语言类型，可找到如下回调函数：</a></li></ul><p><img src="/images/8-translate/fanyi4.png"></p><ul><li>v2transapi为翻译接口，直接XHR断点根据call stack追踪，发现如下位置：</li></ul><p><img src="/images/8-translate/fanyi5.png"></p><ul><li>token由window.common.token生成，可以在页面源码处找到：</li></ul><p><img src="/images/8-translate/fanyi6.png"></p><ul><li>from，to两个参数由下图的g产生，而s,o则是从页面中获取</li></ul><p><img src="/images/8-translate/fanyi7.png"></p><ul><li>关键在于sign的获取，移动鼠标到m函数处点击跳转Js，复制下图位置的JS函数到Webstorm进行调试。</li></ul><p><img src="/images/8-translate/fanyi8.png"></p><p>需要注意：下图的i是window.gtk也可以在页面源码中找到，但node环境下不具备需要手动赋值。</p><p><img src="/images/8-translate/fanyi9.png"></p><p><strong>注:</strong> 998错误则意味需要重新加载主页获取新的token。</p><h3 id="谷歌翻译"><a href="#谷歌翻译" class="headerlink" title="谷歌翻译"></a>谷歌翻译</h3><p>1、谷歌翻译的接口为GET请求，参数如下图:<br><img src="/images/8-translate/fanyi10.png"></p><p>2、同时发现在同个页面翻译同一个文字时，参数不变，可推断tk值与输入的文字有关<br><img src="/images/8-translate/fanyi11.png"></p><p>3、进行XHR断点分析参数，发现下图处进行参数添加，但此处未有tk参数，继续调试<br><img src="/images/8-translate/fanyi12.png"></p><p>4、在如下位置找到pp函数<br><img src="/images/8-translate/fanyi13.png"></p><p>5、追踪pp函数，最后找到tk产生的代码段<br><img src="/images/8-translate/fanyi14.png"></p><p>6、完整的Js代码如下</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">var to = function(a) &#123;</span><br><span class="line">    <span class="keyword">return</span> function() &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  , uo = function(a, b) &#123;</span><br><span class="line">    <span class="keyword">for</span> (var c = <span class="number">0</span>; c &lt; b.length - <span class="number">2</span>; c += <span class="number">3</span>) &#123;</span><br><span class="line">        var d = b.charAt(c + <span class="number">2</span>);</span><br><span class="line">        d = <span class="string">&quot;a&quot;</span> &lt;= d ? d.charCodeAt(<span class="number">0</span>) - <span class="number">87</span> : Number(d);</span><br><span class="line">        d = <span class="string">&quot;+&quot;</span> == b.charAt(c + <span class="number">1</span>) ? a &gt;&gt;&gt; d : a &lt;&lt; d;</span><br><span class="line">        a = <span class="string">&quot;+&quot;</span> == b.charAt(c) ? a + d &amp; <span class="number">4294967295</span> : a ^ d</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line">  , vo = <span class="literal">null</span></span><br><span class="line">  , wo = function(a) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> !== vo)</span><br><span class="line">        var b = vo;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        b = to(String.fromCharCode(<span class="number">84</span>));</span><br><span class="line">        var c = to(String.fromCharCode(<span class="number">75</span>));</span><br><span class="line">        b = [b(), b()];</span><br><span class="line">        b[<span class="number">1</span>] = c();</span><br><span class="line">        b = (vo = window[b.join(c())] || <span class="string">&quot;&quot;</span>) || <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    var d = to(String.fromCharCode(<span class="number">116</span>));</span><br><span class="line">    c = to(String.fromCharCode(<span class="number">107</span>));</span><br><span class="line">    d = [d(), d()];</span><br><span class="line">    d[<span class="number">1</span>] = c();</span><br><span class="line">    c = <span class="string">&quot;&amp;&quot;</span> + d.join(<span class="string">&quot;&quot;</span>) + <span class="string">&quot;=&quot;</span>;</span><br><span class="line">    d = b.split(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    b = Number(d[<span class="number">0</span>]) || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (var e = [], f = <span class="number">0</span>, g = <span class="number">0</span>; g &lt; a.length; g++) &#123;</span><br><span class="line">        var h = a.charCodeAt(g);</span><br><span class="line"><span class="comment">// 重写 Python 代码时 关注这条语句</span></span><br><span class="line">        <span class="number">128</span> &gt; h ? e[f++] = h : </span><br><span class="line">(<span class="number">2048</span> &gt; h ? e[f++] = h &gt;&gt; <span class="number">6</span> | <span class="number">192</span> : </span><br><span class="line">(<span class="number">55296</span> == (h &amp; <span class="number">64512</span>) &amp;&amp; g + <span class="number">1</span> &lt; a.length &amp;&amp; <span class="number">56320</span> == (a.charCodeAt(g + <span class="number">1</span>) &amp; <span class="number">64512</span>) ? (h = <span class="number">65536</span> + ((h &amp; <span class="number">1023</span>) &lt;&lt; <span class="number">10</span>) + (a.charCodeAt(++g) &amp; <span class="number">1023</span>),</span><br><span class="line">        e[f++] = h &gt;&gt; <span class="number">18</span> | <span class="number">240</span>,</span><br><span class="line">        e[f++] = h &gt;&gt; <span class="number">12</span> &amp; <span class="number">63</span> | <span class="number">128</span>) : </span><br><span class="line"></span><br><span class="line">e[f++] = h &gt;&gt; <span class="number">12</span> | <span class="number">224</span>,</span><br><span class="line">        e[f++] = h &gt;&gt; <span class="number">6</span> &amp; <span class="number">63</span> | <span class="number">128</span>),</span><br><span class="line">        e[f++] = h &amp; <span class="number">63</span> | <span class="number">128</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    a = b;</span><br><span class="line">    <span class="keyword">for</span> (f = <span class="number">0</span>; f &lt; e.length; f++)</span><br><span class="line">        a += e[f],</span><br><span class="line">        a = uo(a, <span class="string">&quot;+-a^+6&quot;</span>);</span><br><span class="line">    a = uo(a, <span class="string">&quot;+-3^+b+-f&quot;</span>);</span><br><span class="line">    a ^= Number(d[<span class="number">1</span>]) || <span class="number">0</span>;</span><br><span class="line">    <span class="number">0</span> &gt; a &amp;&amp; (a = (a &amp; <span class="number">2147483647</span>) + <span class="number">2147483648</span>);</span><br><span class="line">    a %= <span class="number">1E6</span>;</span><br><span class="line">    <span class="keyword">return</span> c + (a.toString() + <span class="string">&quot;.&quot;</span> + (a ^ b))</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>7、应对策略</p><ul><li>扣取JS用nodeJs解析生成参数。</li><li>用Python重写Js代码实现参数生成。</li></ul><p>难点在于在JS可以使用 a&gt;&gt;&gt;b来实现无符号位移，但Python中并不存在需要自己实现且Python的int是不会溢出的，达到界限后会自动转为long。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: d = bin(<span class="number">991837856</span> &lt;&lt;<span class="number">15</span>)</span><br><span class="line">In [<span class="number">4</span>]: d</span><br><span class="line">Out[<span class="number">4</span>]: &#x27;<span class="number">0b111011000111100011111010100000000000000000000</span>&#x27;</span><br><span class="line">In [<span class="number">5</span>]: len(d)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">47</span></span><br></pre></td></tr></table></figure><p><img src="/images/8-translate/fanyi15.png" alt="成果展示"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JsCrack 企名片encrypt_data解析</title>
      <link href="/2019/10/08/JsCrack%20%E4%BC%81%E5%90%8D%E7%89%87encrypt_data%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/10/08/JsCrack%20%E4%BC%81%E5%90%8D%E7%89%87encrypt_data%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="必备环境与工具："><a href="#必备环境与工具：" class="headerlink" title="必备环境与工具："></a>必备环境与工具：</h2><p>1、Python和JavaScript的IDE或编辑器（Pycharm + WebStorm）<br>2、NodeJS库：Jsdom<br>3、采集页面:<a href="https://www.qimingpian.cn/finosda/project/pinvestment">点这里跳转</a></p><h2 id="网站分析"><a href="#网站分析" class="headerlink" title="网站分析"></a>网站分析</h2><p>1、首先查看Source只找到了一堆JS引用，可以判定数据是动态加载的。查看XHR找到两个接口，猜测加密数据即是所需数据，如下图所示<br><img src="/images/7-qmp/1-xhr.png"></p><p>2、查找encrypt_data如何生成及如何解析，全局搜索<code>encrypt_data</code>关键字，分析存在该变量的位置</p><p>3、利用<code>productListVip</code>关键字XHR断点，由于此处是返回的加密数据需要寻找解密的位置，所以刷新页面到断点处后应该继续向下执行。</p><p><img src="/images/7-qmp/2-send.png"></p><p>4、但此处e.encrypt_data只是加密数据，继续往下调试，可以找到解密后的数据</p><p><img src="/images/7-qmp/3-data.png"></p><p>5、判定Object(d.a)(e.encrypt_data)即是所需解密数据，进入Object(d.a)函数体就能找到解密函数如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(s(<span class="string">&quot;5e5062e82f15fe4ca9d24bc5&quot;</span>, a.a.decode(t), <span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;012345677890123&quot;</span>, <span class="number">1</span>))</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><img src="/images/7-qmp/4-option.gif"></p><p>6、除了a.a.decode(t)外其他三个都是固定的，复制相关JS代码比如s函数和decode函数，并补充需要的变量，经过webstorm调试输出验证可行。<br><img src="/images/7-qmp/5-result.png"></p><h2 id="登录POST参数分析"><a href="#登录POST参数分析" class="headerlink" title="登录POST参数分析"></a>登录POST参数分析</h2><p>1、该网站未登录状态下只能查看20条，登录状态下可查看40条。<br>2、看更多数据需要进行认证，且接口调用到一定次数会出现<code>极验</code>滑动验证码。<br><img src="/images/7-qmp/6-loginFlag.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JsCrack 汽车之家车型配置</title>
      <link href="/2019/10/08/JsCrack%20%E6%B1%BD%E8%BD%A6%E4%B9%8B%E5%AE%B6%E8%BD%A6%E5%9E%8B%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/10/08/JsCrack%20%E6%B1%BD%E8%BD%A6%E4%B9%8B%E5%AE%B6%E8%BD%A6%E5%9E%8B%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="一、浅谈伪元素"><a href="#一、浅谈伪元素" class="headerlink" title="一、浅谈伪元素"></a>一、浅谈伪元素</h3><p>CSS伪元素是用来添加一些选择器的特殊效果。<br>常通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/content" title="CSS的 content CSS 属性用于在元素的  ::before 和 ::after 伪元素中插入内容。使用content 属性插入的内容都是匿名的可替换元素。"><code>content</code></a> 属性来为一个元素添加修饰性的内容。此元素默认为行内元素。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CSS3 语法 */</span></span><br><span class="line"><span class="attribute">element</span>::before &#123; 样式 &#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/* （单冒号）CSS2 过时语法 (仅用来支持 IE8) */</span></span><br><span class="line"><span class="attribute">element</span>:before  &#123; 样式 &#125;  </span><br><span class="line"></span><br><span class="line"><span class="attribute">h1</span>:before </span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">content</span>:url(<span class="string">smiley.gif</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、页面分析-以option为例"><a href="#二、页面分析-以option为例" class="headerlink" title="二、页面分析(以option为例)"></a>二、页面分析(以option为例)</h3><p>1、 该网页禁用了鼠标右键，可用Ctrl+Shift+I进入审查元素。</p><p>2、发现如下图的伪元素部分，但在源码中未找到<code>&lt;style&gt;&lt;/style&gt;</code>的相关内容。可以通过元素的getPropertyValue(‘content’)方法来获取CSS伪元素的content属性。<br><img src="/images/6-carHome/1-before.png"></p><p><strong>注</strong>：此处获取content未达到预期，因对getPropertyValue进行了重写，如下所示<br><img src="/images/6-catHome/2-content.png"></p><p>3、 可推测样式代码是动态加载的，仔细阅读<code>&lt;script&gt;&lt;/script&gt;</code>会发现如下代码，或者直接搜before也可发现此处。<br><img src="/images/6-carHome/3-style.png"></p><p>4、 将相应Js代码复制到snippet，在末尾处断点运行，发现两个变量<code>$ruleDict$</code>和<code>$rulePosList$</code>，可能包含了所需要的汉字与对应索引，如下图<br><img src="/images/6-carHome/4-rule.png"></p><p>5、 继续阅读代码进入<code>$RenderToHTML$()</code>函数，函数名很明显是渲染html页面，继续进入<code>$InsertRuleRun$()</code>函数，分析可以得出该函数根据索引生成before对应的文字。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">function <span class="symbol">$</span>InsertRuleRun<span class="symbol">$</span>() </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="symbol">$</span>index<span class="symbol">$</span> = <span class="number">0</span>; <span class="symbol">$</span>index<span class="symbol">$</span> &lt; <span class="symbol">$</span>rulePosList<span class="symbol">$</span>.length; <span class="symbol">$</span>index<span class="symbol">$</span>++) &#123;</span><br><span class="line"><span class="comment">// $rulePosList$ = [ &#x27;100&#x27;, &#x27;44,83&#x27;,  &#x27;94,108,53&#x27;,</span></span><br><span class="line">var <span class="symbol">$</span>tempArray<span class="symbol">$</span> = <span class="symbol">$</span>Split<span class="symbol">$</span>(<span class="symbol">$</span>rulePosList<span class="symbol">$</span>[<span class="symbol">$</span>index<span class="symbol">$</span>], <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">var <span class="symbol">$</span>temp<span class="symbol">$</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">// 一个索引对应多个文字的场景</span></span><br><span class="line"><span class="keyword">for</span> (<span class="symbol">$</span>itemIndex<span class="symbol">$</span> = <span class="number">0</span>; <span class="symbol">$</span>itemIndex<span class="symbol">$</span> &lt; <span class="symbol">$</span>tempArray<span class="symbol">$</span>.length; <span class="symbol">$</span>itemIndex<span class="symbol">$</span>++) &#123;</span><br><span class="line"><span class="symbol">$</span>temp<span class="symbol">$</span> += <span class="symbol">$</span>ChartAt<span class="symbol">$</span>(<span class="symbol">$</span>tempArray<span class="symbol">$</span>[<span class="symbol">$</span>itemIndex<span class="symbol">$</span>]) + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">console.info(<span class="string">&#x27;$InsertRuleRun$:&#x27;</span>, <span class="symbol">$</span>index<span class="symbol">$</span>, <span class="symbol">$</span>temp<span class="symbol">$</span>);</span><br><span class="line"><span class="comment">// 索引与对应文字插入样式表</span></span><br><span class="line"><span class="symbol">$</span>InsertRule<span class="symbol">$</span>(<span class="symbol">$</span>index<span class="symbol">$</span>, <span class="symbol">$</span>temp<span class="symbol">$</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="symbol">$</span>InsertRule<span class="symbol">$</span>(<span class="symbol">$</span>index<span class="symbol">$</span>, <span class="symbol">$</span>item<span class="symbol">$</span>) &#123;</span><br><span class="line"><span class="comment">// myStyle.insertRule(&quot;#blanc &#123; color: white &#125;&quot;, 0);</span></span><br><span class="line"><span class="symbol">$</span>sheet<span class="symbol">$</span>[<span class="string">&#x27;&#x27;</span> + io_(<span class="string">&#x27;in&#x27;</span>) + kl_() + (function(It__) &#123;</span><br><span class="line"><span class="string">&#x27;return It_&#x27;</span>;</span><br><span class="line">return It__;</span><br><span class="line">&#125;</span><br><span class="line">)(<span class="string">&#x27;er&#x27;</span>) + Zw_() + iI_() + Cm_() + (function() &#123;</span><br><span class="line"><span class="string">&#x27;return mJ_&#x27;</span>;</span><br><span class="line">return <span class="string">&#x27;le&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#x27;.hs_kw&#x27; + $index$ + &#x27;_configAC&#x27;;&#x27; + ::before &#123; content:&#x27;+ &quot; $item$ ，参数0表示在样式表顶部插入新的规则</span></span><br><span class="line">)()](<span class="symbol">$</span>GetClassName<span class="symbol">$</span>(<span class="symbol">$</span>index<span class="symbol">$</span>) + <span class="symbol">$</span>RuleCalss1<span class="symbol">$</span>() + <span class="string">&#x27;&quot;&#x27;</span> + <span class="symbol">$</span>item<span class="symbol">$</span> + <span class="string">&#x27;&quot; &#125;&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="symbol">$</span>GetClassName<span class="symbol">$</span>(<span class="symbol">$</span>index<span class="symbol">$</span>) + <span class="symbol">$</span>RuleCalss1<span class="symbol">$</span>() + <span class="string">&#x27;&quot;&#x27;</span> + <span class="symbol">$</span>item<span class="symbol">$</span> + <span class="string">&#x27;&quot; &#125;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">var <span class="symbol">$</span>tempArray<span class="symbol">$</span> = <span class="symbol">$</span>GetElementsByCss<span class="symbol">$</span>(<span class="symbol">$</span>GetClassName<span class="symbol">$</span>(<span class="symbol">$</span>index<span class="symbol">$</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (x in <span class="symbol">$</span>tempArray<span class="symbol">$</span>) &#123;</span><br><span class="line">try &#123;</span><br><span class="line"><span class="symbol">$</span>tempArray<span class="symbol">$</span>[x].currentStyle = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125; catch (e) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="symbol">$</span>GetClassName<span class="symbol">$</span>(<span class="symbol">$</span>index<span class="symbol">$</span>) &#123;</span><br><span class="line"><span class="comment">// 可见class变化的数字index是文字对应的索引</span></span><br><span class="line">return <span class="string">&#x27;.hs_kw&#x27;</span> + <span class="symbol">$</span>index<span class="symbol">$</span> + <span class="string">&#x27;_configAC&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="symbol">$</span>RuleCalss1<span class="symbol">$</span>() &#123;</span><br><span class="line">return <span class="string">&#x27;::before &#123; content:&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、重要混淆函数还原</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">混淆：$GetWindow$()[<span class="string">&#x27;&#x27;</span> + LD_() + ti_() + SE_() + YO_() + Je_() + ee_() + <span class="string">&#x27;St&#x27;</span> + CH_(<span class="string">&#x27;yl&#x27;</span>) + FZ_] </span><br><span class="line">解析：this.window.getComputedStyle</span><br><span class="line">混淆：<span class="symbol">$s</span>heet$[<span class="string">&#x27;&#x27;</span> + kj_() + jE_() + (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="string">&#x27;return si_&#x27;</span>; <span class="keyword">return</span> <span class="string">&#x27;R&#x27;</span>&#125;)() + qe_()]</span><br><span class="line">解析：style.sheet.insertRule</span><br></pre></td></tr></table></figure><p>7、document是浏览器中特有的一个全局变量，Jsdom可用来模拟浏览器的dom操作，添加如下Js代码并运行。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const jsdom = <span class="built_in">require</span>(<span class="string">&quot;jsdom&quot;</span>);</span><br><span class="line">const &#123;JSDOM&#125; = jsdom;</span><br><span class="line">const dom = <span class="keyword">new</span> JSDOM();</span><br><span class="line"><span class="regexp">//</span> 存储返回 <span class="class"><span class="keyword">class</span> 和 文字</span></span><br><span class="line">var mydict= &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span> = dom.<span class="built_in">window</span>;</span><br><span class="line"><span class="built_in">document</span> = <span class="built_in">window</span>.<span class="built_in">document</span>;</span><br><span class="line"><span class="built_in">window</span>.<span class="built_in">decodeURIComponent</span> = <span class="built_in">decodeURIComponent</span>;</span><br></pre></td></tr></table></figure><p>8、上述分析只是生成<code>&lt;style&gt;</code>的部分，呈现的效果是如何实现的呢？<br>全局搜索source中没有，但Elements中存在的元素，如类名fontf，可以找到<code>config-min.js</code>文件。</p><p>9、接下来就是利用解析出来的字典进行替换，没有什么难度。</p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JsCrack 知乎模拟登录</title>
      <link href="/2019/10/07/JsCrack%20%E7%9F%A5%E4%B9%8E%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/"/>
      <url>/2019/10/07/JsCrack%20%E7%9F%A5%E4%B9%8E%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="网址分析"><a href="#网址分析" class="headerlink" title="网址分析"></a>网址分析</h2><p>1、打上sign_in的XHR断点，可以发现此时参数已经被加密了，根据call stack不断向下回调，根据关键字body查看直到找到没加密的数据，如下图所示。<br><img src="/images/1-zhihu/zhihu-1.png"><br>2、可判断<code>r.default</code>用于将参数生成为加密字符串，追踪该函数可找到下图函数，<code>function(module, exports, __webpack_require__)&#123; &#125;</code>由这段代码可以看出是经过webpack打包后的，去掉外层函数，调用加密函数b。<br><img src="/images/1-zhihu/zhihu-2.png"><br>3、代码调试与问题解决：</p><ul><li>TypeError: __g._encrypt is not a function<br>解决：注意加密函数上方的<code>&quot;undefined&quot; != typeof window &amp;&amp; (new G).v</code>代码，通过window来判断是否在浏览器上运行，通过修改为<code>1 &amp;&amp; (new G).v</code>解决问题。</li><li>ReferenceError: atob is not defined<br>解决：atob 是将 base64 加密的字符串给解密，在 node 环境下是没有这个方法的，采用Buffer.from(e, ‘base64’).toString(‘binary’)替换。</li><li>输出与实际结果不符<br>解决：用html文件引入Js输出正常，但node下直接输出不符，考虑和环境参数有关，用Jsdom模拟window对象。</li></ul><h2 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h2><p><img src="/images/1-zhihu/zhihu-3.png"><br>1、timestamp 时间戳，直接用Python构造即可</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">timestamp</span> = str(<span class="type">int</span>(<span class="type">time</span>.time()*<span class="number">1000</span>))</span><br></pre></td></tr></table></figure><p>2、全局搜索signature，可找到下图位置<br><img src="/images/1-zhihu/zhihu-4.png"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_signature</span><span class="params">(<span class="keyword">self</span>, timestamp)</span></span><span class="symbol">:</span></span><br><span class="line">    ha = hmac.new(b<span class="string">&#x27;d1b964811afb40118a12068ff74a12f4&#x27;</span>, digestmod=hashlib.sha1)</span><br><span class="line">    grant_type = <span class="keyword">self</span>.login_data[<span class="string">&#x27;grant_type&#x27;</span>]</span><br><span class="line">    client_id = <span class="keyword">self</span>.login_data[<span class="string">&#x27;client_id&#x27;</span>]</span><br><span class="line">    source = <span class="keyword">self</span>.login_data[<span class="string">&#x27;source&#x27;</span>]</span><br><span class="line">    ha.update(bytes((grant_type + client_id + source + timestamp), <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> ha.hexdigest()</span><br></pre></td></tr></table></figure><p>3、其他参数基本是固定的，按照自己要求填写即可。<br>4、lang=’en’是字符验证码，’cn’则是中文汉字验证码。</p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JsCrack 浙江政务JS混淆处理</title>
      <link href="/2019/10/07/JsCrack%20%E6%B5%99%E6%B1%9F%E6%94%BF%E5%8A%A1JS%20%E6%B7%B7%E6%B7%86%E5%A4%84%E7%90%86/"/>
      <url>/2019/10/07/JsCrack%20%E6%B5%99%E6%B1%9F%E6%94%BF%E5%8A%A1JS%20%E6%B7%B7%E6%B7%86%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>采集浙江政务网事项时，遇到直接请求返回一堆JS代码，如下所示:<br>点击<a href="http://www.zjzwfw.gov.cn/zjservice/item/detail/index.do?localInnerCode=5d3897f3-fd52-46a3-868c-7c271ad1789d&webId=8&eventType=2">示例网址</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">var arg1=&#x27;58D144B55D654665F61C1E42FC02C0AD30D92BEC&#x27;;</span></span><br><span class="line">var _0x4818=[&#x27;\x63\x73\x4b\x48\x77\x71\x4d\x49&#x27;,&#x27;\x5a\x73\x4b\x4a\x77\x72\x38\x56\x65\x41\x73\x79&#x27;,&#x27;\x55\x63\x4b\x69\x4e\x38\x4f\x2f\x77\x70\x6c\x77\x4d\x41\x3d\x3d&#x27;,&#x27;\x4a\x52\x38\x43\x54\x67\x3d\x3d&#x27;,&#x27;\x59\x73\x4f\x6e\x62\x53\x45\x51\x77\x37\x6f\x7a\x77\x71\x5a\x4b\x65\x73\x4b\x55\x77\x37\x6b\x77\x58\x38\x4f\x52\x49\x51\x3d\x3d&#x27;,&#x27;\x77\x37\x6f\x56\x53\x38\x4f\x53\x77\x6f\x50\x43\x6c\x33\x6a\x43\x68\x4d\x4b\x68\x77\x36\x48\x44\x6c\x73\x4b\x58\x77\x34\x73\x2f\x59\x73\x4f\x47&#x27;,&#x27;\x66\x77\x56\x6d\x49\x31\x41\x74\x77\x70\x6c\x61\x59\x38\x4f\x74\x77\x35\x63\x4e\x66\x53\x67\x70\x77\x36\x4d\x3d&#x27;,&#x27;\x4f\x63\x4f\x4e\x77\x72\x6a\x43\x71\x73\x4b\x78\x54\x47\x54\x43\x68\x73\x4f\x6a\x45\x57\x45\x38\x50\x63\x4f\x63\x4a\x38\x4b\x36&#x27;,&#x27;\x55\x38\x4b\x35\x4c\x63\x4f\x74\x77\x70\x56\x30\x45\x4d\x4f\x6b\x77\x34\x37\x44\x72\x4d\x4f\x58&#x27;,&#x27;\x48\x4d\x4f\x32\x77\x6f\x48\x43\x69\x4d\x4b\x39\x53\x6c\x58\x43\x6c\x63\x4f\x6f\x43\x31\x6b\x3d&#x27;,&#x27;\x61\x73\x4b\x49\x77\x71\x4d\x44\x64\x67\x4d\x75\x50\x73\x4f\x4b\x42\x4d\x4b\x63\x77\x72\x72\x43\x74\x6b\x4c\x44\x72\x4d\x4b\x42\x77\x36\x34\x64&#x27;,&#x27;\x77\x71\x49\x6d\x4d\x54\x30\x74\x77\x36\x52\x4e\x77\x35\x6b\x3d&#x27;,&#x27;\x44\x4d\x4b\x63\x55\x30\x4a\x6d\x55\x77\x55\x76&#x27;,&#x27;\x56\x6a\x48\x44\x6c\x4d\x4f\x48\x56\x63\x4f\x4e\x58\x33\x66\x44\x69\x63\x4b\x4a\x48\x51\x3d\x3d&#x27;,&#x27;\x77\x71\x68\x42\x48\x38\x4b\x6e\x77\x34\x54\x44\x68\x53\x44\x44\x67\x4d\x4f\x64\x77\x72\x6a\x43\x6e\x63\x4f\x57\x77\x70\x68\x68\x4e\x38\x4b\x43\x47\x63\x4b\x71\x77\x36\x64\x48\x41\x55\x35\x2b\x77\x72\x67\x32\x4a\x63\x4b\x61\x77\x34\x49\x45\x4a\x63\x4f\x63\x77\x72\x52\x4a\x77\x6f\x5a\x30\x77\x71\x46\x39\x59\x67\x41\x56&#x27;,&#x27;\x64\x7a\x64\x32\x77\x35\x62\x44\x6d\x33\x6a\x44\x70\x73\x4b\x33\x77\x70\x59\x3d&#x27;,&#x27;\x77\x34\x50\x44\x67\x63\x4b\x58\x77\x6f\x33\x43\x6b\x63\x4b\x4c\x77\x72\x35\x71\x77\x72\x59\x3d&#x27;,&#x27;\x77\x72\x4a\x4f\x54\x63\x4f\x51\x57\x4d\x4f\x67&#x27;,&#x27;\x77\x71\x54\x44\x76\x63\x4f\x6a\x77\x34\x34\x37\x77\x72\x34\x3d&#x27;,&#x27;\x77\x35\x58\x44\x71\x73\x4b\x68\x4d\x46\x31\x2f&#x27;,&#x27;\x77\x72\x41\x79\x48\x73\x4f\x66\x77\x70\x70\x63&#x27;,&#x27;\x4a\x33\x64\x56\x50\x63\x4f\x78\x4c\x67\x3d\x3d&#x27;,&#x27;\x77\x72\x64\x48\x77\x37\x70\x39\x5a\x77\x3d\x3d&#x27;,&#x27;\x77\x34\x72\x44\x6f\x38\x4b\x6d\x4e\x45\x77\x3d&#x27;,&#x27;\x49\x4d\x4b\x41\x55\x6b\x42\x74&#x27;,&#x27;\x77\x36\x62\x44\x72\x63\x4b\x51\x77\x70\x56\x48\x77\x70\x4e\x51\x77\x71\x55\x3d&#x27;,&#x27;\x64\x38\x4f\x73\x57\x68\x41\x55\x77\x37\x59\x7a\x77\x72\x55\x3d&#x27;,&#x27;\x77\x71\x6e\x43\x6b\x73\x4f\x65\x65\x7a\x72\x44\x68\x77\x3d\x3d&#x27;,&#x27;\x55\x73\x4b\x6e\x49\x4d\x4b\x57\x56\x38\x4b\x2f&#x27;,&#x27;\x77\x34\x7a\x44\x6f\x63\x4b\x38\x4e\x55\x5a\x76&#x27;,&#x27;\x63\x38\x4f\x78\x5a\x68\x41\x4a\x77\x36\x73\x6b\x77\x71\x4a\x6a&#x27;,&#x27;\x50\x63\x4b\x49\x77\x34\x6e\x43\x6b\x6b\x56\x62&#x27;,&#x27;\x4b\x48\x67\x6f\x64\x4d\x4f\x32\x56\x51\x3d\x3d&#x27;,&#x27;\x77\x70\x73\x6d\x77\x71\x76\x44\x6e\x47\x46\x71&#x27;,&#x27;\x77\x71\x4c\x44\x74\x38\x4f\x6b\x77\x34\x63\x3d&#x27;,&#x27;\x77\x37\x77\x31\x77\x34\x50\x43\x70\x73\x4f\x34\x77\x71\x41\x3d&#x27;,&#x27;\x77\x71\x39\x46\x52\x73\x4f\x71\x57\x4d\x4f\x71&#x27;,&#x27;\x62\x79\x42\x68\x77\x37\x72\x44\x6d\x33\x34\x3d&#x27;,&#x27;\x4c\x48\x67\x2b\x53\x38\x4f\x74\x54\x77\x3d\x3d&#x27;,&#x27;\x77\x71\x68\x4f\x77\x37\x31\x35\x64\x73\x4f\x48&#x27;,&#x27;\x55\x38\x4f\x37\x56\x73\x4f\x30\x77\x71\x76\x44\x76\x63\x4b\x75\x4b\x73\x4f\x71\x58\x38\x4b\x72&#x27;,&#x27;\x59\x69\x74\x74\x77\x35\x44\x44\x6e\x57\x6e\x44\x72\x41\x3d\x3d&#x27;,&#x27;\x59\x4d\x4b\x49\x77\x71\x55\x55\x66\x67\x49\x6b&#x27;,&#x27;\x61\x42\x37\x44\x6c\x4d\x4f\x44\x54\x51\x3d\x3d&#x27;,&#x27;\x77\x70\x66\x44\x68\x38\x4f\x72\x77\x36\x6b\x6b&#x27;,&#x27;\x77\x37\x76\x43\x71\x4d\x4f\x72\x59\x38\x4b\x41\x56\x6b\x35\x4f\x77\x70\x6e\x43\x75\x38\x4f\x61\x58\x73\x4b\x5a\x50\x33\x44\x43\x6c\x63\x4b\x79\x77\x36\x48\x44\x72\x51\x3d\x3d&#x27;,&#x27;\x77\x6f\x77\x2b\x77\x36\x76\x44\x6d\x48\x70\x73\x77\x37\x52\x74\x77\x6f\x39\x38\x4c\x43\x37\x43\x69\x47\x37\x43\x6b\x73\x4f\x52\x54\x38\x4b\x6c\x57\x38\x4f\x35\x77\x72\x33\x44\x69\x38\x4f\x54\x48\x73\x4f\x44\x65\x48\x6a\x44\x6d\x63\x4b\x6c\x4a\x73\x4b\x71\x56\x41\x3d\x3d&#x27;,&#x27;\x4e\x77\x56\x2b&#x27;,&#x27;\x77\x37\x48\x44\x72\x63\x4b\x74\x77\x70\x4a\x61\x77\x70\x5a\x62&#x27;,&#x27;\x77\x70\x51\x73\x77\x71\x76\x44\x69\x48\x70\x75\x77\x36\x49\x3d&#x27;,&#x27;\x59\x4d\x4b\x55\x77\x71\x4d\x4a\x5a\x51\x3d\x3d&#x27;,&#x27;\x4b\x48\x31\x56\x4b\x63\x4f\x71\x4b\x73\x4b\x31&#x27;,&#x27;\x66\x51\x35\x73\x46\x55\x6b\x6b\x77\x70\x49\x3d&#x27;,&#x27;\x77\x72\x76\x43\x72\x63\x4f\x42\x52\x38\x4b\x6b&#x27;,&#x27;\x4d\x33\x77\x30\x66\x51\x3d\x3d&#x27;,&#x27;\x77\x36\x78\x58\x77\x71\x50\x44\x76\x4d\x4f\x46\x77\x6f\x35\x64&#x27;];(function(_0x4c97f0,_0x1742fd)&#123;var _0x4db1c=function(_0x48181e)&#123;while(--_0x48181e)&#123;_0x4c97f0[&#x27;\x70\x75\x73\x68&#x27;](_0x4c97f0[&#x27;\x73\x68\x69\x66\x74&#x27;]());&#125;&#125;;var _0x3cd6c6=function()&#123;var _0xb8360b=&#123;&#x27;\x64\x61\x74\x61&#x27;:&#123;&#x27;\x6b\x65\x79&#x27;:&#x27;\x63\x6f\x6f\x6b\x69\x65&#x27;,&#x27;\x76\x61\x6c\x75\x65&#x27;:&#x27;\x74\x69\x6d\x65\x6f\x75\x74&#x27;&#125;,&#x27;\x73\x65\x74\x43\x6f\x6f\x6b\x69\x65&#x27;:function(_0x20bf34,_0x3e840e,_0x5693d3,_0x5e8b26)&#123;_0x5e8b26=_0x5e8b26||&#123;&#125;;var _0xba82f0=_0x3e840e+&#x27;\x3d&#x27;+_0x5693d3;var _0x5afe31=0x0;for(var _0x5afe31=0x0,_0x178627=_0x20bf34[&#x27;\x6c\x65\x6e\x67\x74\x68&#x27;];_0x5afe31&lt;_0x178627;_0x5afe31++)&#123;var _0x41b2ff=_0x20bf34[_0x5afe31];_0xba82f0+=&#x27;\x3b\x20&#x27;+_0x41b2ff;var _0xd79219=_0x20bf34[_0x41b2ff];_0x20bf34[&#x27;\x70\x75\x73\x68&#x27;](_0xd79219);_0x178627=_0x20bf34[&#x27;\x6c\x65\x6e\x67\x74\x68&#x27;];if(_0xd79219!==!![])&#123;_0xba82f0+=&#x27;\x3d&#x27;+_0xd79219;&#125;&#125;_0x5e8b26[&#x27;\x63\x6f\x6f\x6b\x69\x65&#x27;]=_0xba82f0;&#125;,&#x27;\x72\x65\x6d\x6f\x76\x65\x43\x6f\x6f\x6b\x69\x65&#x27;:function()&#123;return&#x27;\x64\x65\x76&#x27;;&#125;,&#x27;\x67\x65\x74\x43\x6f\x6f\x6b\x69\x65&#x27;:function(_0x4a11fe,_0x189946)&#123;_0x4a11fe=_0x4a11fe||function(_0x6259a2)&#123;return _0x6259a2;&#125;;var _0x25af93=_0x4a11fe(new RegExp(&#x27;\x28\x3f\x3a\x5e\x7c\x3b\x20\x29&#x27;+_0x189946[&#x27;\x72\x65\x70\x6c\x61\x63\x65&#x27;](/([.$?*|&#123;&#125;()[]\/+^])/g,&#x27;\x24\x31&#x27;)+&#x27;\x3d\x28\x5b\x5e\x3b\x5d\x2a\x29&#x27;));var _0x52d57c=function(_0x105f59,_0x3fd789)&#123;_0x105f59(++_0x3fd789);&#125;;_0x52d57c(_0x4db1c,_0x1742fd);return _0x25af93?decodeURIComponent(_0x25af93[0x1]):undefined;&#125;&#125;;var _0x4a2aed=function()&#123;var _0x124d17=new RegExp(&#x27;\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d&#x27;);return _0x124d17[&#x27;\x74\x65\x73\x74&#x27;](_0xb8360b[&#x27;\x72\x65\x6d\x6f\x76\x65\x43\x6f\x6f\x6b\x69\x65&#x27;][&#x27;\x74\x6f\x53\x74\x72\x69\x6e\x67&#x27;]());&#125;;_0xb8360b[&#x27;\x75\x70\x64\x61\x74\x65\x43\x6f\x6f\x6b\x69\x65&#x27;]=_0x4a2aed;var _0x2d67ec=&#x27;&#x27;;var _0x120551=_0xb8360b[&#x27;\x75\x70\x64\x61\x74\x65\x43\x6f\x6f\x6b\x69\x65&#x27;]();if(!_0x120551)&#123;_0xb8360b[&#x27;\x73\x65\x74\x43\x6f\x6f\x6b\x69\x65&#x27;]([&#x27;\x2a&#x27;],&#x27;\x63\x6f\x75\x6e\x74\x65\x72&#x27;,0x1);&#125;else if(_0x120551)&#123;_0x2d67ec=_0xb8360b[&#x27;\x67\x65\x74\x43\x6f\x6f\x6b\x69\x65&#x27;](null,&#x27;\x63\x6f\x75\x6e\x74\x65\x72&#x27;);&#125;else&#123;_0xb8360b[&#x27;\x72\x65\x6d\x6f\x76\x65\x43\x6f\x6f\x6b\x69\x65&#x27;]();&#125;&#125;;_0x3cd6c6();&#125;(_0x4818,0x15b));var _0x55f3=function(_0x4c97f0,_0x1742fd)&#123;var _0x4c97f0=parseInt(_0x4c97f0,0x10);var _0x48181e=_0x4818[_0x4c97f0];if(!_0x55f3[&#x27;\x61\x74\x6f\x62\x50\x6f\x6c\x79\x66\x69\x6c\x6c\x41\x70\x70\x65\x6e\x64\x65\x64&#x27;])&#123;(function()&#123;var _0xdf49c6=Function(&#x27;\x72\x65\x74\x75\x72\x6e\x20\x28\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x28\x29\x20&#x27;+&#x27;\x7b\x7d\x2e\x63\x6f\x6e\x73\x74\x72\x75\x63\x74\x6f\x72\x28\x22\x72\x65\x74\x75\x72\x6e\x20\x74\x68\x69\x73\x22\x29\x28\x29&#x27;+&#x27;\x29\x3b&#x27;);var _0xb8360b=_0xdf49c6();var _0x389f44=&#x27;\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x2b\x2f\x3d&#x27;;_0xb8360b[&#x27;\x61\x74\x6f\x62&#x27;]||(_0xb8360b[&#x27;\x61\x74\x6f\x62&#x27;]=function(_0xba82f0)&#123;var _0xec6bb4=String(_0xba82f0)[&#x27;\x72\x65\x70\x6c\x61\x63\x65&#x27;](/=+$/,&#x27;&#x27;);for(var _0x1a0f04=0x0,_0x18c94e,_0x41b2ff,_0xd79219=0x0,_0x5792f7=&#x27;&#x27;;_0x41b2ff=_0xec6bb4[&#x27;\x63\x68\x61\x72\x41\x74&#x27;](_0xd79219++);~_0x41b2ff&amp;&amp;(_0x18c94e=_0x1a0f04%0x4?_0x18c94e*0x40+_0x41b2ff:_0x41b2ff,_0x1a0f04++%0x4)?_0x5792f7+=String[&#x27;\x66\x72\x6f\x6d\x43\x68\x61\x72\x43\x6f\x64\x65&#x27;](0xff&amp;_0x18c94e&gt;&gt;(-0x2*_0x1a0f04&amp;0x6)):0x0)&#123;_0x41b2ff=_0x389f44[&#x27;\x69\x6e\x64\x65\x78\x4f\x66&#x27;](_0x41b2ff);&#125;return _0x5792f7;&#125;);&#125;());_0x55f3[&#x27;\x61\x74\x6f\x62\x50\x6f\x6c\x79\x66\x69\x6c\x6c\x41\x70\x70\x65\x6e\x64\x65\x64&#x27;]=!![];&#125;if(!_0x55f3[&#x27;\x72\x63\x34&#x27;])&#123;var _0x232678=function(_0x401af1,_0x532ac0)&#123;var _0x45079a=[],_0x52d57c=0x0,_0x105f59,_0x3fd789=&#x27;&#x27;,_0x4a2aed=&#x27;&#x27;;_0x401af1=atob(_0x401af1);for(var _0x124d17=0x0,_0x1b9115=_0x401af1[&#x27;\x6c\x65\x6e\x67\x74\x68&#x27;];_0x124d17&lt;_0x1b9115;_0x124d17++)&#123;_0x4a2aed+=&#x27;\x25&#x27;+(&#x27;\x30\x30&#x27;+_0x401af1[&#x27;\x63\x68\x61\x72\x43\x6f\x64\x65\x41\x74&#x27;](_0x124d17)[&#x27;\x74\x6f\x53\x74\x72\x69\x6e\x67&#x27;](0x10))[&#x27;\x73\x6c\x69\x63\x65&#x27;](-0x2);&#125;_0x401af1=decodeURIComponent(_0x4a2aed);for(var _0x2d67ec=0x0;_0x2d67ec&lt;0x100;_0x2d67ec++)&#123;_0x45079a[_0x2d67ec]=_0x2d67ec;&#125;for(_0x2d67ec=0x0;_0x2d67ec&lt;0x100;_0x2d67ec++)&#123;_0x52d57c=(_0x52d57c+_0x45079a[_0x2d67ec]+_0x532ac0[&#x27;\x63\x68\x61\x72\x43\x6f\x64\x65\x41\x74&#x27;](_0x2d67ec%_0x532ac0[&#x27;\x6c\x65\x6e\x67\x74\x68&#x27;]))%0x100;_0x105f59=_0x45079a[_0x2d67ec];_0x45079a[_0x2d67ec]=_0x45079a[_0x52d57c];_0x45079a[_0x52d57c]=_0x105f59;&#125;_0x2d67ec=0x0;_0x52d57c=0x0;for(var _0x4e5ce2=0x0;_0x4e5ce2&lt;_0x401af1[&#x27;\x6c\x65\x6e\x67\x74\x68&#x27;];_0x4e5ce2++)&#123;_0x2d67ec=(_0x2d67ec+0x1)%0x100;_0x52d57c=(_0x52d57c+_0x45079a[_0x2d67ec])%0x100;_0x105f59=_0x45079a[_0x2d67ec];_0x45079a[_0x2d67ec]=_0x45079a[_0x52d57c];_0x45079a[_0x52d57c]=_0x105f59;_0x3fd789+=String[&#x27;\x66\x72\x6f\x6d\x43\x68\x61\x72\x43\x6f\x64\x65&#x27;](_0x401af1[&#x27;\x63\x68\x61\x72\x43\x6f\x64\x65\x41\x74&#x27;](_0x4e5ce2)^_0x45079a[(_0x45079a[_0x2d67ec]+_0x45079a[_0x52d57c])%0x100]);&#125;return _0x3fd789;&#125;;_0x55f3[&#x27;\x72\x63\x34&#x27;]=_0x232678;&#125;if(!_0x55f3[&#x27;\x64\x61\x74\x61&#x27;])&#123;_0x55f3[&#x27;\x64\x61\x74\x61&#x27;]=&#123;&#125;;&#125;if(_0x55f3[&#x27;\x64\x61\x74\x61&#x27;][_0x4c97f0]===undefined)&#123;if(!_0x55f3[&#x27;\x6f\x6e\x63\x65&#x27;])&#123;var _0x5f325c=function(_0x23a392)&#123;this[&#x27;\x72\x63\x34\x42\x79\x74\x65\x73&#x27;]=_0x23a392;this[&#x27;\x73\x74\x61\x74\x65\x73&#x27;]=[0x1,0x0,0x0];this[&#x27;\x6e\x65\x77\x53\x74\x61\x74\x65&#x27;]=function()&#123;return&#x27;\x6e\x65\x77\x53\x74\x61\x74\x65&#x27;;&#125;;this[&#x27;\x66\x69\x72\x73\x74\x53\x74\x61\x74\x65&#x27;]=&#x27;\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a&#x27;;this[&#x27;\x73\x65\x63\x6f\x6e\x64\x53\x74\x61\x74\x65&#x27;]=&#x27;\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d&#x27;;&#125;;_0x5f325c[&#x27;\x70\x72\x6f\x74\x6f\x74\x79\x70\x65&#x27;][&#x27;\x63\x68\x65\x63\x6b\x53\x74\x61\x74\x65&#x27;]=function()&#123;var _0x19f809=new RegExp(this[&#x27;\x66\x69\x72\x73\x74\x53\x74\x61\x74\x65&#x27;]+this[&#x27;\x73\x65\x63\x6f\x6e\x64\x53\x74\x61\x74\x65&#x27;]);return this[&#x27;\x72\x75\x6e\x53\x74\x61\x74\x65&#x27;](_0x19f809[&#x27;\x74\x65\x73\x74&#x27;](this[&#x27;\x6e\x65\x77\x53\x74\x61\x74\x65&#x27;][&#x27;\x74\x6f\x53\x74\x72\x69\x6e\x67&#x27;]())?--this[&#x27;\x73\x74\x61\x74\x65\x73&#x27;][0x1]:--this[&#x27;\x73\x74\x61\x74\x65\x73&#x27;][0x0]);&#125;;_0x5f325c[&#x27;\x70\x72\x6f\x74\x6f\x74\x79\x70\x65&#x27;][&#x27;\x72\x75\x6e\x53\x74\x61\x74\x65&#x27;]=function(_0x4380bd)&#123;if(!Boolean(~_0x4380bd))&#123;return _0x4380bd;&#125;return this[&#x27;\x67\x65\x74\x53\x74\x61\x74\x65&#x27;](this[&#x27;\x72\x63\x34\x42\x79\x74\x65\x73&#x27;]);&#125;;_0x5f325c[&#x27;\x70\x72\x6f\x74\x6f\x74\x79\x70\x65&#x27;][&#x27;\x67\x65\x74\x53\x74\x61\x74\x65&#x27;]=function(_0x58d85e)&#123;for(var _0x1c9f5b=0x0,_0x1ce9e0=this[&#x27;\x73\x74\x61\x74\x65\x73&#x27;][&#x27;\x6c\x65\x6e\x67\x74\x68&#x27;];_0x1c9f5b&lt;_0x1ce9e0;_0x1c9f5b++)&#123;this[&#x27;\x73\x74\x61\x74\x65\x73&#x27;][&#x27;\x70\x75\x73\x68&#x27;](Math[&#x27;\x72\x6f\x75\x6e\x64&#x27;](Math[&#x27;\x72\x61\x6e\x64\x6f\x6d&#x27;]()));_0x1ce9e0=this[&#x27;\x73\x74\x61\x74\x65\x73&#x27;][&#x27;\x6c\x65\x6e\x67\x74\x68&#x27;];&#125;return _0x58d85e(this[&#x27;\x73\x74\x61\x74\x65\x73&#x27;][0x0]);&#125;;new _0x5f325c(_0x55f3)[&#x27;\x63\x68\x65\x63\x6b\x53\x74\x61\x74\x65&#x27;]();_0x55f3[&#x27;\x6f\x6e\x63\x65&#x27;]=!![];&#125;_0x48181e=_0x55f3[&#x27;\x72\x63\x34&#x27;](_0x48181e,_0x1742fd);_0x55f3[&#x27;\x64\x61\x74\x61&#x27;][_0x4c97f0]=_0x48181e;&#125;else&#123;_0x48181e=_0x55f3[&#x27;\x64\x61\x74\x61&#x27;][_0x4c97f0];&#125;return _0x48181e;&#125;;var arg3=null;var arg4=null;var arg5=null;var arg6=null;var arg7=null;var arg8=null;var arg9=null;var arg10=null;var l=function()&#123;while(window[_0x55f3(&#x27;0x1&#x27;, &#x27;\x58\x4d\x57\x5e&#x27;)]||window[&#x27;\x5f\x5f\x70\x68\x61\x6e\x74\x6f\x6d\x61\x73&#x27;])&#123;&#125;;var _0x5e8b26=_0x55f3(&#x27;0x3&#x27;, &#x27;\x6a\x53\x31\x59&#x27;);String[_0x55f3(&#x27;0x5&#x27;, &#x27;\x6e\x5d\x66\x52&#x27;)][_0x55f3(&#x27;0x6&#x27;, &#x27;\x50\x67\x35\x34&#x27;)]=function(_0x4e08d8)&#123;var _0x5a5d3b=&#x27;&#x27;;for(var _0xe89588=0x0;_0xe89588&lt;this[_0x55f3(&#x27;0x8&#x27;, &#x27;\x29\x68\x52\x63&#x27;)]&amp;&amp;_0xe89588&lt;_0x4e08d8[_0x55f3(&#x27;0xa&#x27;, &#x27;\x6a\x45\x26\x5e&#x27;)];_0xe89588+=0x2)&#123;var _0x401af1=parseInt(this[_0x55f3(&#x27;0xb&#x27;, &#x27;\x56\x32\x4b\x45&#x27;)](_0xe89588,_0xe89588+0x2),0x10);var _0x105f59=parseInt(_0x4e08d8[_0x55f3(&#x27;0xd&#x27;, &#x27;\x58\x4d\x57\x5e&#x27;)](_0xe89588,_0xe89588+0x2),0x10);var _0x189e2c=(_0x401af1^_0x105f59)[_0x55f3(&#x27;0xf&#x27;, &#x27;\x57\x31\x46\x45&#x27;)](0x10);if(_0x189e2c[_0x55f3(&#x27;0x11&#x27;, &#x27;\x4d\x47\x72\x76&#x27;)]==0x1)&#123;_0x189e2c=&#x27;\x30&#x27;+_0x189e2c;&#125;_0x5a5d3b+=_0x189e2c;&#125;return _0x5a5d3b;&#125;;String[&#x27;\x70\x72\x6f\x74\x6f\x74\x79\x70\x65&#x27;][_0x55f3(&#x27;0x14&#x27;, &#x27;\x5a\x2a\x44\x4d&#x27;)]=function()&#123;var _0x4b082b=[0xf,0x23,0x1d,0x18,0x21,0x10,0x1,0x26,0xa,0x9,0x13,0x1f,0x28,0x1b,0x16,0x17,0x19,0xd,0x6,0xb,0x27,0x12,0x14,0x8,0xe,0x15,0x20,0x1a,0x2,0x1e,0x7,0x4,0x11,0x5,0x3,0x1c,0x22,0x25,0xc,0x24];var _0x4da0dc=[];var _0x12605e=&#x27;&#x27;;for(var _0x20a7bf=0x0;_0x20a7bf&lt;this[&#x27;\x6c\x65\x6e\x67\x74\x68&#x27;];_0x20a7bf++)&#123;var _0x385ee3=this[_0x20a7bf];for(var _0x217721=0x0;_0x217721&lt;_0x4b082b[_0x55f3(&#x27;0x16&#x27;, &#x27;\x61\x48\x2a\x4e&#x27;)];_0x217721++)&#123;if(_0x4b082b[_0x217721]==_0x20a7bf+0x1)&#123;_0x4da0dc[_0x217721]=_0x385ee3;&#125;&#125;&#125;_0x12605e=_0x4da0dc[&#x27;\x6a\x6f\x69\x6e&#x27;](&#x27;&#x27;);return _0x12605e;&#125;;var _0x23a392=arg1[_0x55f3(&#x27;0x19&#x27;, &#x27;\x50\x67\x35\x34&#x27;)]();arg2=_0x23a392[_0x55f3(&#x27;0x1b&#x27;, &#x27;\x7a\x35\x4f\x26&#x27;)](_0x5e8b26);setTimeout(&#x27;\x72\x65\x6c\x6f\x61\x64\x28\x61\x72\x67\x32\x29&#x27;,0x66a);&#125;;var _0x4db1c=function()&#123;function _0x355d23(_0x450614)&#123;if((&#x27;&#x27;+_0x450614/_0x450614)[_0x55f3(&#x27;0x1c&#x27;, &#x27;\x56\x32\x4b\x45&#x27;)]!==0x1||_0x450614%0x14===0x0)&#123;(function()&#123;&#125;[_0x55f3(&#x27;0x1d&#x27;, &#x27;\x43\x4e\x55\x59&#x27;)]((undefined+&#x27;&#x27;)[0x2]+(!![]+&#x27;&#x27;)[0x3]+([][_0x55f3(&#x27;0x1e&#x27;, &#x27;\x77\x38\x50\x52&#x27;)]()+&#x27;&#x27;)[0x2]+(undefined+&#x27;&#x27;)[0x0]+(![]+[0x0]+String)[0x14]+(![]+[0x0]+String)[0x14]+(!![]+&#x27;&#x27;)[0x3]+(!![]+&#x27;&#x27;)[0x1])());&#125;else&#123;(function()&#123;&#125;[&#x27;\x63\x6f\x6e\x73\x74\x72\x75\x63\x74\x6f\x72&#x27;]((undefined+&#x27;&#x27;)[0x2]+(!![]+&#x27;&#x27;)[0x3]+([][_0x55f3(&#x27;0x1f&#x27;, &#x27;\x4c\x24\x28\x44&#x27;)]()+&#x27;&#x27;)[0x2]+(undefined+&#x27;&#x27;)[0x0]+(![]+[0x0]+String)[0x14]+(![]+[0x0]+String)[0x14]+(!![]+&#x27;&#x27;)[0x3]+(!![]+&#x27;&#x27;)[0x1])());&#125;_0x355d23(++_0x450614);&#125;try&#123;_0x355d23(0x0);&#125;catch(_0x54c483)&#123;&#125;&#125;;if(function()&#123;var _0x470d8f=function()&#123;var _0x4c97f0=!![];return function(_0x1742fd,_0x4db1c)&#123;var _0x48181e=_0x4c97f0?function()&#123;if(_0x4db1c)&#123;var _0x55f3be=_0x4db1c[&#x27;\x61\x70\x70\x6c\x79&#x27;](_0x1742fd,arguments);_0x4db1c=null;return _0x55f3be;&#125;&#125;:function()&#123;&#125;;_0x4c97f0=![];return _0x48181e;&#125;;&#125;();var _0x501fd7=_0x470d8f(this,function()&#123;var _0x4c97f0=function()&#123;return&#x27;\x64\x65\x76&#x27;;&#125;,_0x1742fd=function()&#123;return&#x27;\x77\x69\x6e\x64\x6f\x77&#x27;;&#125;;var _0x55f3be=function()&#123;var _0x3ad9a1=new RegExp(&#x27;\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d&#x27;);return!_0x3ad9a1[&#x27;\x74\x65\x73\x74&#x27;](_0x4c97f0[&#x27;\x74\x6f\x53\x74\x72\x69\x6e\x67&#x27;]());&#125;;var _0x1b93ad=function()&#123;var _0x20bf34=new RegExp(&#x27;\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b&#x27;);return _0x20bf34[&#x27;\x74\x65\x73\x74&#x27;](_0x1742fd[&#x27;\x74\x6f\x53\x74\x72\x69\x6e\x67&#x27;]());&#125;;var _0x5afe31=function(_0x178627)&#123;var _0x1a0f04=~-0x1&gt;&gt;0x1+0xff%0x0;if(_0x178627[&#x27;\x69\x6e\x64\x65\x78\x4f\x66&#x27;](&#x27;\x69&#x27;===_0x1a0f04))&#123;_0xd79219(_0x178627);&#125;&#125;;var _0xd79219=function(_0x5792f7)&#123;var _0x4e08d8=~-0x4&gt;&gt;0x1+0xff%0x0;if(_0x5792f7[&#x27;\x69\x6e\x64\x65\x78\x4f\x66&#x27;]((!![]+&#x27;&#x27;)[0x3])!==_0x4e08d8)&#123;_0x5afe31(_0x5792f7);&#125;&#125;;if(!_0x55f3be())&#123;if(!_0x1b93ad())&#123;_0x5afe31(&#x27;\x69\x6e\x64\u0435\x78\x4f\x66&#x27;);&#125;else&#123;_0x5afe31(&#x27;\x69\x6e\x64\x65\x78\x4f\x66&#x27;);&#125;&#125;else&#123;_0x5afe31(&#x27;\x69\x6e\x64\u0435\x78\x4f\x66&#x27;);&#125;&#125;);_0x501fd7();var _0x3a394d=function()&#123;var _0x1ab151=!![];return function(_0x372617,_0x42d229)&#123;var _0x3b3503=_0x1ab151?function()&#123;if(_0x42d229)&#123;var _0x7086d9=_0x42d229[_0x55f3(&#x27;0x21&#x27;, &#x27;\x4b\x4e\x29\x46&#x27;)](_0x372617,arguments);_0x42d229=null;return _0x7086d9;&#125;&#125;:function()&#123;&#125;;_0x1ab151=![];return _0x3b3503;&#125;;&#125;();var _0x5b6351=_0x3a394d(this,function()&#123;var _0x46cbaa=Function(_0x55f3(&#x27;0x22&#x27;, &#x27;\x26\x68\x5a\x59&#x27;)+_0x55f3(&#x27;0x23&#x27;, &#x27;\x61\x48\x2a\x4e&#x27;)+&#x27;\x29\x3b&#x27;);var _0x1766ff=function()&#123;&#125;;var _0x9b5e29=_0x46cbaa();_0x9b5e29[_0x55f3(&#x27;0x26&#x27;, &#x27;\x61\x48\x2a\x4e&#x27;)][&#x27;\x6c\x6f\x67&#x27;]=_0x1766ff;_0x9b5e29[_0x55f3(&#x27;0x29&#x27;, &#x27;\x56\x25\x59\x52&#x27;)][_0x55f3(&#x27;0x2a&#x27;, &#x27;\x50\x5e\x45\x71&#x27;)]=_0x1766ff;_0x9b5e29[_0x55f3(&#x27;0x2c&#x27;, &#x27;\x6c\x67\x4d\x30&#x27;)][_0x55f3(&#x27;0x2d&#x27;, &#x27;\x4c\x24\x28\x44&#x27;)]=_0x1766ff;_0x9b5e29[_0x55f3(&#x27;0x2f&#x27;, &#x27;\x43\x5a\x63\x38&#x27;)][_0x55f3(&#x27;0x30&#x27;, &#x27;\x57\x75\x36\x25&#x27;)]=_0x1766ff;&#125;);_0x5b6351();try&#123;return!!window[&#x27;\x61\x64\x64\x45\x76\x65\x6e\x74\x4c\x69\x73\x74\x65\x6e\x65\x72&#x27;];&#125;catch(_0x35538d)&#123;return![];&#125;&#125;())&#123;document[_0x55f3(&#x27;0x33&#x27;, &#x27;\x56\x25\x59\x52&#x27;)](_0x55f3(&#x27;0x34&#x27;, &#x27;\x79\x41\x70\x7a&#x27;),l,![]);&#125;else&#123;document[_0x55f3(&#x27;0x36&#x27;, &#x27;\x79\x41\x70\x7a&#x27;)](_0x55f3(&#x27;0x37&#x27;, &#x27;\x4c\x24\x28\x44&#x27;),l);&#125;_0x4db1c();setInterval(function()&#123;_0x4db1c();&#125;,0xfa0);</span><br><span class="line">        </span><br><span class="line">function setCookie(name,value)&#123;var expiredate=new Date();expiredate.setTime(expiredate.getTime()+(3600*1000));document.cookie=name+&quot;=&quot;+value+&quot;;expires=&quot;+expiredate.toGMTString()+&quot;;max-age=3600;path=/&quot;;&#125;</span><br><span class="line">function reload(x) &#123;setCookie(&quot;acw_sc__v2&quot;, x);document.location.reload();&#125;</span><br><span class="line">&lt;/script&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="反调试处理"><a href="#反调试处理" class="headerlink" title="反调试处理"></a>反调试处理</h2><p>1、重写函数表达式即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_0x355d23 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/5-zjzw/zjzw1.png" alt="断点"></p><h2 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h2><p>1、工具：<a href="https://beautifier.io/">https://beautifier.io/</a><br><img src="/images/5-zjzw/zjzw2.png"><br><strong>注</strong>：勾选箭头所示选项否则不能解析”\x”字符</p><p>2、自己写的解析脚本（有Bug无法处理正则部分转义）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse16</span>():</span></span><br><span class="line">    content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;xxx.js&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line">        <span class="comment"># 匹配16进制字符串</span></span><br><span class="line">        pattern = re.compile(<span class="string">r&#x27;\\x[a-zA-Z0-9]&#123;2&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> pattern.findall(content):</span><br><span class="line">            <span class="comment"># 解码并替换16进制字符串</span></span><br><span class="line">            content = content.replace(i, i.encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&#x27;unicode_escape&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;xxx.js&#x27;</span>, <span class="string">&#x27;w+&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(content)</span><br></pre></td></tr></table></figure><h2 id="Cookie分析"><a href="#Cookie分析" class="headerlink" title="Cookie分析"></a>Cookie分析</h2><p>从如下函数即可看出，设置cookie后刷新该页，从此图可验证：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reload</span>(<span class="params">x</span>) </span>&#123;setCookie(<span class="string">&quot;acw_sc__v2&quot;</span>, x);<span class="built_in">document</span>.location.reload();&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/5-zjzw/zjzw3.png"></p><h2 id="acw-sc-v2如何生成"><a href="#acw-sc-v2如何生成" class="headerlink" title="acw_sc__v2如何生成"></a>acw_sc__v2如何生成</h2><p>arg2是通过执行_0x23a392[_0x55f3(‘0x1b’, ‘z5O&amp;’)] 函数返回得到，实参是 _0x5e8b26。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _0x23a392 = arg1[_0x55f3(<span class="string">&#x27;0x19&#x27;</span>, <span class="string">&#x27;Pg54&#x27;</span>)]();</span><br><span class="line">arg2 = _0x23a392[_0x55f3(<span class="string">&#x27;0x1b&#x27;</span>, <span class="string">&#x27;z5O&amp;&#x27;</span>)](_0x5e8b26);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&#x27;reload(arg2)&#x27;</span>, <span class="number">0x66a</span>);</span><br></pre></td></tr></table></figure><h3 id="第一部分（匿名函数）：此函数是用于对大数组-0x4818-进行操作。"><a href="#第一部分（匿名函数）：此函数是用于对大数组-0x4818-进行操作。" class="headerlink" title="第一部分（匿名函数）：此函数是用于对大数组 _0x4818 进行操作。"></a>第一部分（匿名函数）：此函数是用于对大数组 _0x4818 进行操作。</h3><p>代码压缩：<a href="https://www.sojson.com/yasuojs.html">https://www.sojson.com/yasuojs.html</a><br><strong>注</strong>：实参是数组和一个十六进制数，正则不匹配换行，所以需要将此函数压缩后再运行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _0x4db1c = <span class="function"><span class="keyword">function</span>(<span class="params">_0x48181e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (--_0x48181e) &#123;</span><br><span class="line"><span class="comment">// shift将数组第一个元素删除,并返回第一个元素的值,push在末尾添加值</span></span><br><span class="line">qs_base_data[<span class="string">&#x27;push&#x27;</span>](qs_base_data[<span class="string">&#x27;shift&#x27;</span>]());</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">_0x52d57c(_0x4db1c, _0x1742fd);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于防代码格式化</span></span><br><span class="line"><span class="keyword">var</span> _0x4a2aed = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> _0x124d17 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;\\w+ *\\(\\) *&#123;\\w+ *[\&#x27;|\&quot;].+[\&#x27;|\&quot;];? *&#125;&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> _0x124d17[<span class="string">&#x27;test&#x27;</span>](_0xb8360b[<span class="string">&#x27;removeCookie&#x27;</span>][<span class="string">&#x27;toString&#x27;</span>]());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>得到处理后的数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&quot;wqImMT0tw6RNw5k=&quot;</span>, <span class="string">&quot;DMKcU0JmUwUv&quot;</span>, <span class="string">&quot;VjHDlMOHVcONX3fDicKJHQ==&quot;</span>, <span class="string">&quot;wqhBH8Knw4TDhSDDgMOdwrjCncOWwphhN8KCGcKqw6dHAU5+wrg2JcKaw4IEJcOcwrRJwoZ0wqF9YgAV&quot;</span>, <span class="string">&quot;dzd2w5bDm3jDpsK3wpY=&quot;</span>, <span class="string">&quot;w4PDgcKXwo3CkcKLwr5qwrY=&quot;</span>, <span class="string">&quot;wrJOTcOQWMOg&quot;</span>, <span class="string">&quot;wqTDvcOjw447wr4=&quot;</span>, <span class="string">&quot;w5XDqsKhMF1/&quot;</span>, <span class="string">&quot;wrAyHsOfwppc&quot;</span>, <span class="string">&quot;J3dVPcOxLg==&quot;</span>, <span class="string">&quot;wrdHw7p9Zw==&quot;</span>, <span class="string">&quot;w4rDo8KmNEw=&quot;</span>, <span class="string">&quot;IMKAUkBt&quot;</span>, <span class="string">&quot;w6bDrcKQwpVHwpNQwqU=&quot;</span>, <span class="string">&quot;d8OsWhAUw7YzwrU=&quot;</span>, <span class="string">&quot;wqnCksOeezrDhw==&quot;</span>, <span class="string">&quot;UsKnIMKWV8K/&quot;</span>, <span class="string">&quot;w4zDocK8NUZv&quot;</span>, <span class="string">&quot;c8OxZhAJw6skwqJj&quot;</span>, <span class="string">&quot;PcKIw4nCkkVb&quot;</span>, <span class="string">&quot;KHgodMO2VQ==&quot;</span>, <span class="string">&quot;wpsmwqvDnGFq&quot;</span>, <span class="string">&quot;wqLDt8Okw4c=&quot;</span>, <span class="string">&quot;w7w1w4PCpsO4wqA=&quot;</span>, <span class="string">&quot;wq9FRsOqWMOq&quot;</span>, <span class="string">&quot;byBhw7rDm34=&quot;</span>, <span class="string">&quot;LHg+S8OtTw==&quot;</span>, <span class="string">&quot;wqhOw715dsOH&quot;</span>, <span class="string">&quot;U8O7VsO0wqvDvcKuKsOqX8Kr&quot;</span>, <span class="string">&quot;Yittw5DDnWnDrA==&quot;</span>, <span class="string">&quot;YMKIwqUUfgIk&quot;</span>, <span class="string">&quot;aB7DlMODTQ==&quot;</span>, <span class="string">&quot;wpfDh8Orw6kk&quot;</span>, <span class="string">&quot;w7vCqMOrY8KAVk5OwpnCu8OaXsKZP3DClcKyw6HDrQ==&quot;</span>, <span class="string">&quot;wow+w6vDmHpsw7Rtwo98LC7CiG7CksORT8KlW8O5wr3Di8OTHsODeHjDmcKlJsKqVA==&quot;</span>, <span class="string">&quot;NwV+&quot;</span>, <span class="string">&quot;w7HDrcKtwpJawpZb&quot;</span>, <span class="string">&quot;wpQswqvDiHpuw6I=&quot;</span>, <span class="string">&quot;YMKUwqMJZQ==&quot;</span>, <span class="string">&quot;KH1VKcOqKsK1&quot;</span>, <span class="string">&quot;fQ5sFUkkwpI=&quot;</span>, <span class="string">&quot;wrvCrcOBR8Kk&quot;</span>, <span class="string">&quot;M3w0fQ==&quot;</span>, <span class="string">&quot;w6xXwqPDvMOFwo5d&quot;</span>, <span class="string">&quot;csKHwqMI&quot;</span>, <span class="string">&quot;ZsKJwr8VeAsy&quot;</span>, <span class="string">&quot;UcKiN8O/wplwMA==&quot;</span>, <span class="string">&quot;JR8CTg==&quot;</span>, <span class="string">&quot;YsOnbSEQw7ozwqZKesKUw7kwX8ORIQ==&quot;</span>, <span class="string">&quot;w7oVS8OSwoPCl3jChMKhw6HDlsKXw4s/YsOG&quot;</span>, <span class="string">&quot;fwVmI1AtwplaY8Otw5cNfSgpw6M=&quot;</span>, <span class="string">&quot;OcONwrjCqsKxTGTChsOjEWE8PcOcJ8K6&quot;</span>, <span class="string">&quot;U8K5LcOtwpV0EMOkw47DrMOX&quot;</span>, <span class="string">&quot;HMO2woHCiMK9SlXClcOoC1k=&quot;</span>, <span class="string">&quot;asKIwqMDdgMuPsOKBMKcwrrCtkLDrMKBw64d&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="第二部分（解密字符串函数）"><a href="#第二部分（解密字符串函数）" class="headerlink" title="第二部分（解密字符串函数）"></a>第二部分（解密字符串函数）</h3><p>什么也不用改，压缩后调用即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _0x55f3=<span class="function"><span class="keyword">function</span>(<span class="params">_0x4c97f0,_0x1742fd</span>)</span>&#123;<span class="keyword">var</span> _0x4c97f0=<span class="built_in">parseInt</span>(_0x4c97f0,<span class="number">0x10</span>);<span class="keyword">var</span> _0x48181e=_0x4818[_0x4c97f0];<span class="keyword">if</span>(!_0x55f3[<span class="string">&#x27;atobPolyfillAppended&#x27;</span>])&#123;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> _0xdf49c6=<span class="built_in">Function</span>(<span class="string">&#x27;return (function () &#123;&#125;.constructor(\&quot;return this\&quot;)());&#x27;</span>);<span class="keyword">var</span> _0xb8360b=_0xdf49c6();<span class="keyword">var</span> _0x389f44=<span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&#x27;</span>;_0xb8360b[<span class="string">&#x27;atob&#x27;</span>]||(_0xb8360b[<span class="string">&#x27;atob&#x27;</span>]=<span class="function"><span class="keyword">function</span>(<span class="params">_0xba82f0</span>)</span>&#123;<span class="keyword">var</span> _0xec6bb4=<span class="built_in">String</span>(_0xba82f0)[<span class="string">&#x27;replace&#x27;</span>](<span class="regexp">/=+$/</span>,<span class="string">&#x27;&#x27;</span>);<span class="keyword">for</span>(<span class="keyword">var</span> _0x1a0f04=<span class="number">0x0</span>,_0x18c94e,_0x41b2ff,_0xd79219=<span class="number">0x0</span>,_0x5792f7=<span class="string">&#x27;&#x27;</span>;_0x41b2ff=_0xec6bb4[<span class="string">&#x27;charAt&#x27;</span>](_0xd79219++);~_0x41b2ff&amp;&amp;(_0x18c94e=_0x1a0f04%<span class="number">0x4</span>?_0x18c94e*<span class="number">0x40</span>+_0x41b2ff:_0x41b2ff,_0x1a0f04++%<span class="number">0x4</span>)?_0x5792f7+=<span class="built_in">String</span>[<span class="string">&#x27;fromCharCode&#x27;</span>](<span class="number">0xff</span>&amp;_0x18c94e&gt;&gt;(<span class="number">-0x2</span>*_0x1a0f04&amp;<span class="number">0x6</span>)):<span class="number">0x0</span>)&#123;_0x41b2ff=_0x389f44[<span class="string">&#x27;indexOf&#x27;</span>](_0x41b2ff)&#125;<span class="keyword">return</span> _0x5792f7&#125;)&#125;());_0x55f3[<span class="string">&#x27;atobPolyfillAppended&#x27;</span>]=!![]&#125;<span class="keyword">if</span>(!_0x55f3[<span class="string">&#x27;rc4&#x27;</span>])&#123;<span class="keyword">var</span> _0x232678=<span class="function"><span class="keyword">function</span>(<span class="params">_0x401af1,_0x532ac0</span>)</span>&#123;<span class="keyword">var</span> _0x45079a=[],_0x52d57c=<span class="number">0x0</span>,_0x105f59,_0x3fd789=<span class="string">&#x27;&#x27;</span>,_0x4a2aed=<span class="string">&#x27;&#x27;</span>;_0x401af1=atob(_0x401af1);<span class="keyword">for</span>(<span class="keyword">var</span> _0x124d17=<span class="number">0x0</span>,_0x1b9115=_0x401af1[<span class="string">&#x27;length&#x27;</span>];_0x124d17&lt;_0x1b9115;_0x124d17++)&#123;_0x4a2aed+=<span class="string">&#x27;%&#x27;</span>+(<span class="string">&#x27;00&#x27;</span>+_0x401af1[<span class="string">&#x27;charCodeAt&#x27;</span>](_0x124d17)[<span class="string">&#x27;toString&#x27;</span>](<span class="number">0x10</span>))[<span class="string">&#x27;slice&#x27;</span>](<span class="number">-0x2</span>)&#125;_0x401af1=<span class="built_in">decodeURIComponent</span>(_0x4a2aed);<span class="keyword">for</span>(<span class="keyword">var</span> _0x2d67ec=<span class="number">0x0</span>;_0x2d67ec&lt;<span class="number">0x100</span>;_0x2d67ec++)&#123;_0x45079a[_0x2d67ec]=_0x2d67ec&#125;<span class="keyword">for</span>(_0x2d67ec=<span class="number">0x0</span>;_0x2d67ec&lt;<span class="number">0x100</span>;_0x2d67ec++)&#123;_0x52d57c=(_0x52d57c+_0x45079a[_0x2d67ec]+_0x532ac0[<span class="string">&#x27;charCodeAt&#x27;</span>](_0x2d67ec%_0x532ac0[<span class="string">&#x27;length&#x27;</span>]))%<span class="number">0x100</span>;_0x105f59=_0x45079a[_0x2d67ec];_0x45079a[_0x2d67ec]=_0x45079a[_0x52d57c];_0x45079a[_0x52d57c]=_0x105f59&#125;_0x2d67ec=<span class="number">0x0</span>;_0x52d57c=<span class="number">0x0</span>;<span class="keyword">for</span>(<span class="keyword">var</span> _0x4e5ce2=<span class="number">0x0</span>;_0x4e5ce2&lt;_0x401af1[<span class="string">&#x27;length&#x27;</span>];_0x4e5ce2++)&#123;_0x2d67ec=(_0x2d67ec+<span class="number">0x1</span>)%<span class="number">0x100</span>;_0x52d57c=(_0x52d57c+_0x45079a[_0x2d67ec])%<span class="number">0x100</span>;_0x105f59=_0x45079a[_0x2d67ec];_0x45079a[_0x2d67ec]=_0x45079a[_0x52d57c];_0x45079a[_0x52d57c]=_0x105f59;_0x3fd789+=<span class="built_in">String</span>[<span class="string">&#x27;fromCharCode&#x27;</span>](_0x401af1[<span class="string">&#x27;charCodeAt&#x27;</span>](_0x4e5ce2)^_0x45079a[(_0x45079a[_0x2d67ec]+_0x45079a[_0x52d57c])%<span class="number">0x100</span>])&#125;<span class="keyword">return</span> _0x3fd789&#125;;_0x55f3[<span class="string">&#x27;rc4&#x27;</span>]=_0x232678&#125;<span class="keyword">if</span>(!_0x55f3[<span class="string">&#x27;data&#x27;</span>])&#123;_0x55f3[<span class="string">&#x27;data&#x27;</span>]=&#123;&#125;&#125;<span class="keyword">if</span>(_0x55f3[<span class="string">&#x27;data&#x27;</span>][_0x4c97f0]===<span class="literal">undefined</span>)&#123;<span class="keyword">if</span>(!_0x55f3[<span class="string">&#x27;once&#x27;</span>])&#123;<span class="keyword">var</span> _0x5f325c=<span class="function"><span class="keyword">function</span>(<span class="params">_0x23a392</span>)</span>&#123;<span class="built_in">this</span>[<span class="string">&#x27;rc4Bytes&#x27;</span>]=_0x23a392;<span class="built_in">this</span>[<span class="string">&#x27;states&#x27;</span>]=[<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x0</span>];<span class="built_in">this</span>[<span class="string">&#x27;newState&#x27;</span>]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">&#x27;newState&#x27;</span>&#125;;<span class="built_in">this</span>[<span class="string">&#x27;firstState&#x27;</span>]=<span class="string">&#x27;\\w+ *\\(\\) *&#123;\\w+ *&#x27;</span>;<span class="built_in">this</span>[<span class="string">&#x27;secondState&#x27;</span>]=<span class="string">&#x27;[\&#x27;|\&quot;].+[\&#x27;|\&quot;];? *&#125;&#x27;</span>&#125;;_0x5f325c[<span class="string">&#x27;prototype&#x27;</span>][<span class="string">&#x27;checkState&#x27;</span>]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> _0x19f809=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="built_in">this</span>[<span class="string">&#x27;firstState&#x27;</span>]+<span class="built_in">this</span>[<span class="string">&#x27;secondState&#x27;</span>]);<span class="keyword">return</span> <span class="built_in">this</span>[<span class="string">&#x27;runState&#x27;</span>](_0x19f809[<span class="string">&#x27;test&#x27;</span>](<span class="built_in">this</span>[<span class="string">&#x27;newState&#x27;</span>][<span class="string">&#x27;toString&#x27;</span>]())?--<span class="built_in">this</span>[<span class="string">&#x27;states&#x27;</span>][<span class="number">0x1</span>]:--<span class="built_in">this</span>[<span class="string">&#x27;states&#x27;</span>][<span class="number">0x0</span>])&#125;;_0x5f325c[<span class="string">&#x27;prototype&#x27;</span>][<span class="string">&#x27;runState&#x27;</span>]=<span class="function"><span class="keyword">function</span>(<span class="params">_0x4380bd</span>)</span>&#123;<span class="keyword">if</span>(!<span class="built_in">Boolean</span>(~_0x4380bd))&#123;<span class="keyword">return</span> _0x4380bd&#125;<span class="keyword">return</span> <span class="built_in">this</span>[<span class="string">&#x27;getState&#x27;</span>](<span class="built_in">this</span>[<span class="string">&#x27;rc4Bytes&#x27;</span>])&#125;;_0x5f325c[<span class="string">&#x27;prototype&#x27;</span>][<span class="string">&#x27;getState&#x27;</span>]=<span class="function"><span class="keyword">function</span>(<span class="params">_0x58d85e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> _0x1c9f5b=<span class="number">0x0</span>,_0x1ce9e0=<span class="built_in">this</span>[<span class="string">&#x27;states&#x27;</span>][<span class="string">&#x27;length&#x27;</span>];_0x1c9f5b&lt;_0x1ce9e0;_0x1c9f5b++)&#123;<span class="built_in">this</span>[<span class="string">&#x27;states&#x27;</span>][<span class="string">&#x27;push&#x27;</span>](<span class="built_in">Math</span>[<span class="string">&#x27;round&#x27;</span>](<span class="built_in">Math</span>[<span class="string">&#x27;random&#x27;</span>]()));_0x1ce9e0=<span class="built_in">this</span>[<span class="string">&#x27;states&#x27;</span>][<span class="string">&#x27;length&#x27;</span>]&#125;<span class="keyword">return</span> _0x58d85e(<span class="built_in">this</span>[<span class="string">&#x27;states&#x27;</span>][<span class="number">0x0</span>])&#125;;<span class="keyword">new</span> _0x5f325c(_0x55f3)[<span class="string">&#x27;checkState&#x27;</span>]();_0x55f3[<span class="string">&#x27;once&#x27;</span>]=!![]&#125;_0x48181e=_0x55f3[<span class="string">&#x27;rc4&#x27;</span>](_0x48181e,_0x1742fd);_0x55f3[<span class="string">&#x27;data&#x27;</span>][_0x4c97f0]=_0x48181e&#125;<span class="keyword">else</span>&#123;_0x48181e=_0x55f3[<span class="string">&#x27;data&#x27;</span>][_0x4c97f0]&#125;<span class="keyword">return</span> _0x48181e&#125;;</span><br><span class="line"> _0x55f3(<span class="string">&#x27;0x3&#x27;</span>, <span class="string">&#x27;jS1Y&#x27;</span>);</span><br><span class="line"><span class="string">&quot;3000176000856006061501533003690027800375&quot;</span></span><br></pre></td></tr></table></figure><h3 id="第三部分-生成arg2"><a href="#第三部分-生成arg2" class="headerlink" title="第三部分 生成arg2"></a>第三部分 生成arg2</h3><p>将arg2的值返回即可。</p><h3 id="第四部分-反调试"><a href="#第四部分-反调试" class="headerlink" title="第四部分 反调试"></a>第四部分 反调试</h3><p>可直接删除该部分代码。</p><h2 id="改写后的JS文件"><a href="#改写后的JS文件" class="headerlink" title="改写后的JS文件"></a>改写后的JS文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arg1 = <span class="string">&#x27;3BCA0C4E465FE26F5624EE022F71C91FD4D78682&#x27;</span>;</span><br><span class="line"><span class="comment">// var _0x4818 = [&#x27;csKHwqMI&#x27;, &#x27;ZsKJwr8VeAsy&#x27;, &#x27;UcKiN8O/wplwMA==&#x27;, &#x27;JR8CTg==&#x27;, &#x27;YsOnbSEQw7ozwqZKesKUw7kwX8ORIQ==&#x27;, &#x27;w7oVS8OSwoPCl3jChMKhw6HDlsKXw4s/YsOG&#x27;, &#x27;fwVmI1AtwplaY8Otw5cNfSgpw6M=&#x27;, &#x27;OcONwrjCqsKxTGTChsOjEWE8PcOcJ8K6&#x27;, &#x27;U8K5LcOtwpV0EMOkw47DrMOX&#x27;, &#x27;HMO2woHCiMK9SlXClcOoC1k=&#x27;, &#x27;asKIwqMDdgMuPsOKBMKcwrrCtkLDrMKBw64d&#x27;, &#x27;wqImMT0tw6RNw5k=&#x27;, &#x27;DMKcU0JmUwUv&#x27;, &#x27;VjHDlMOHVcONX3fDicKJHQ==&#x27;, &#x27;wqhBH8Knw4TDhSDDgMOdwrjCncOWwphhN8KCGcKqw6dHAU5+wrg2JcKaw4IEJcOcwrRJwoZ0wqF9YgAV&#x27;, &#x27;dzd2w5bDm3jDpsK3wpY=&#x27;, &#x27;w4PDgcKXwo3CkcKLwr5qwrY=&#x27;, &#x27;wrJOTcOQWMOg&#x27;, &#x27;wqTDvcOjw447wr4=&#x27;, &#x27;w5XDqsKhMF1/&#x27;, &#x27;wrAyHsOfwppc&#x27;, &#x27;J3dVPcOxLg==&#x27;, &#x27;wrdHw7p9Zw==&#x27;, &#x27;w4rDo8KmNEw=&#x27;, &#x27;IMKAUkBt&#x27;, &#x27;w6bDrcKQwpVHwpNQwqU=&#x27;, &#x27;d8OsWhAUw7YzwrU=&#x27;, &#x27;wqnCksOeezrDhw==&#x27;, &#x27;UsKnIMKWV8K/&#x27;, &#x27;w4zDocK8NUZv&#x27;, &#x27;c8OxZhAJw6skwqJj&#x27;, &#x27;PcKIw4nCkkVb&#x27;, &#x27;KHgodMO2VQ==&#x27;, &#x27;wpsmwqvDnGFq&#x27;, &#x27;wqLDt8Okw4c=&#x27;, &#x27;w7w1w4PCpsO4wqA=&#x27;, &#x27;wq9FRsOqWMOq&#x27;, &#x27;byBhw7rDm34=&#x27;, &#x27;LHg+S8OtTw==&#x27;, &#x27;wqhOw715dsOH&#x27;, &#x27;U8O7VsO0wqvDvcKuKsOqX8Kr&#x27;, &#x27;Yittw5DDnWnDrA==&#x27;, &#x27;YMKIwqUUfgIk&#x27;, &#x27;aB7DlMODTQ==&#x27;, &#x27;wpfDh8Orw6kk&#x27;, &#x27;w7vCqMOrY8KAVk5OwpnCu8OaXsKZP3DClcKyw6HDrQ==&#x27;, &#x27;wow+w6vDmHpsw7Rtwo98LC7CiG7CksORT8KlW8O5wr3Di8OTHsODeHjDmcKlJsKqVA==&#x27;, &#x27;NwV+&#x27;, &#x27;w7HDrcKtwpJawpZb&#x27;, &#x27;wpQswqvDiHpuw6I=&#x27;, &#x27;YMKUwqMJZQ==&#x27;, &#x27;KH1VKcOqKsK1&#x27;, &#x27;fQ5sFUkkwpI=&#x27;, &#x27;wrvCrcOBR8Kk&#x27;, &#x27;M3w0fQ==&#x27;, &#x27;w6xXwqPDvMOFwo5d&#x27;];</span></span><br><span class="line"><span class="keyword">var</span> _0x4818 = [<span class="string">&quot;wqImMT0tw6RNw5k=&quot;</span>, <span class="string">&quot;DMKcU0JmUwUv&quot;</span>, <span class="string">&quot;VjHDlMOHVcONX3fDicKJHQ==&quot;</span>, <span class="string">&quot;wqhBH8Knw4TDhSDDgMOdwrjCncOWwphhN8KCGcKqw6dHAU5+wrg2JcKaw4IEJcOcwrRJwoZ0wqF9YgAV&quot;</span>, <span class="string">&quot;dzd2w5bDm3jDpsK3wpY=&quot;</span>, <span class="string">&quot;w4PDgcKXwo3CkcKLwr5qwrY=&quot;</span>, <span class="string">&quot;wrJOTcOQWMOg&quot;</span>, <span class="string">&quot;wqTDvcOjw447wr4=&quot;</span>, <span class="string">&quot;w5XDqsKhMF1/&quot;</span>, <span class="string">&quot;wrAyHsOfwppc&quot;</span>, <span class="string">&quot;J3dVPcOxLg==&quot;</span>, <span class="string">&quot;wrdHw7p9Zw==&quot;</span>, <span class="string">&quot;w4rDo8KmNEw=&quot;</span>, <span class="string">&quot;IMKAUkBt&quot;</span>, <span class="string">&quot;w6bDrcKQwpVHwpNQwqU=&quot;</span>, <span class="string">&quot;d8OsWhAUw7YzwrU=&quot;</span>, <span class="string">&quot;wqnCksOeezrDhw==&quot;</span>, <span class="string">&quot;UsKnIMKWV8K/&quot;</span>, <span class="string">&quot;w4zDocK8NUZv&quot;</span>, <span class="string">&quot;c8OxZhAJw6skwqJj&quot;</span>, <span class="string">&quot;PcKIw4nCkkVb&quot;</span>, <span class="string">&quot;KHgodMO2VQ==&quot;</span>, <span class="string">&quot;wpsmwqvDnGFq&quot;</span>, <span class="string">&quot;wqLDt8Okw4c=&quot;</span>, <span class="string">&quot;w7w1w4PCpsO4wqA=&quot;</span>, <span class="string">&quot;wq9FRsOqWMOq&quot;</span>, <span class="string">&quot;byBhw7rDm34=&quot;</span>, <span class="string">&quot;LHg+S8OtTw==&quot;</span>, <span class="string">&quot;wqhOw715dsOH&quot;</span>, <span class="string">&quot;U8O7VsO0wqvDvcKuKsOqX8Kr&quot;</span>, <span class="string">&quot;Yittw5DDnWnDrA==&quot;</span>, <span class="string">&quot;YMKIwqUUfgIk&quot;</span>, <span class="string">&quot;aB7DlMODTQ==&quot;</span>, <span class="string">&quot;wpfDh8Orw6kk&quot;</span>, <span class="string">&quot;w7vCqMOrY8KAVk5OwpnCu8OaXsKZP3DClcKyw6HDrQ==&quot;</span>, <span class="string">&quot;wow+w6vDmHpsw7Rtwo98LC7CiG7CksORT8KlW8O5wr3Di8OTHsODeHjDmcKlJsKqVA==&quot;</span>, <span class="string">&quot;NwV+&quot;</span>, <span class="string">&quot;w7HDrcKtwpJawpZb&quot;</span>, <span class="string">&quot;wpQswqvDiHpuw6I=&quot;</span>, <span class="string">&quot;YMKUwqMJZQ==&quot;</span>, <span class="string">&quot;KH1VKcOqKsK1&quot;</span>, <span class="string">&quot;fQ5sFUkkwpI=&quot;</span>, <span class="string">&quot;wrvCrcOBR8Kk&quot;</span>, <span class="string">&quot;M3w0fQ==&quot;</span>, <span class="string">&quot;w6xXwqPDvMOFwo5d&quot;</span>, <span class="string">&quot;csKHwqMI&quot;</span>, <span class="string">&quot;ZsKJwr8VeAsy&quot;</span>, <span class="string">&quot;UcKiN8O/wplwMA==&quot;</span>, <span class="string">&quot;JR8CTg==&quot;</span>, <span class="string">&quot;YsOnbSEQw7ozwqZKesKUw7kwX8ORIQ==&quot;</span>, <span class="string">&quot;w7oVS8OSwoPCl3jChMKhw6HDlsKXw4s/YsOG&quot;</span>, <span class="string">&quot;fwVmI1AtwplaY8Otw5cNfSgpw6M=&quot;</span>, <span class="string">&quot;OcONwrjCqsKxTGTChsOjEWE8PcOcJ8K6&quot;</span>, <span class="string">&quot;U8K5LcOtwpV0EMOkw47DrMOX&quot;</span>, <span class="string">&quot;HMO2woHCiMK9SlXClcOoC1k=&quot;</span>, <span class="string">&quot;asKIwqMDdgMuPsOKBMKcwrrCtkLDrMKBw64d&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> _0x55f3=<span class="function"><span class="keyword">function</span>(<span class="params">_0x4c97f0,_0x1742fd</span>)</span>&#123;<span class="keyword">var</span> _0x4c97f0=<span class="built_in">parseInt</span>(_0x4c97f0,<span class="number">0x10</span>);<span class="keyword">var</span> _0x48181e=_0x4818[_0x4c97f0];<span class="keyword">if</span>(!_0x55f3[<span class="string">&#x27;atobPolyfillAppended&#x27;</span>])&#123;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> _0xdf49c6=<span class="built_in">Function</span>(<span class="string">&#x27;return (function () &#123;&#125;.constructor(\&quot;return this\&quot;)());&#x27;</span>);<span class="keyword">var</span> _0xb8360b=_0xdf49c6();<span class="keyword">var</span> _0x389f44=<span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&#x27;</span>;_0xb8360b[<span class="string">&#x27;atob&#x27;</span>]||(_0xb8360b[<span class="string">&#x27;atob&#x27;</span>]=<span class="function"><span class="keyword">function</span>(<span class="params">_0xba82f0</span>)</span>&#123;<span class="keyword">var</span> _0xec6bb4=<span class="built_in">String</span>(_0xba82f0)[<span class="string">&#x27;replace&#x27;</span>](<span class="regexp">/=+$/</span>,<span class="string">&#x27;&#x27;</span>);<span class="keyword">for</span>(<span class="keyword">var</span> _0x1a0f04=<span class="number">0x0</span>,_0x18c94e,_0x41b2ff,_0xd79219=<span class="number">0x0</span>,_0x5792f7=<span class="string">&#x27;&#x27;</span>;_0x41b2ff=_0xec6bb4[<span class="string">&#x27;charAt&#x27;</span>](_0xd79219++);~_0x41b2ff&amp;&amp;(_0x18c94e=_0x1a0f04%<span class="number">0x4</span>?_0x18c94e*<span class="number">0x40</span>+_0x41b2ff:_0x41b2ff,_0x1a0f04++%<span class="number">0x4</span>)?_0x5792f7+=<span class="built_in">String</span>[<span class="string">&#x27;fromCharCode&#x27;</span>](<span class="number">0xff</span>&amp;_0x18c94e&gt;&gt;(<span class="number">-0x2</span>*_0x1a0f04&amp;<span class="number">0x6</span>)):<span class="number">0x0</span>)&#123;_0x41b2ff=_0x389f44[<span class="string">&#x27;indexOf&#x27;</span>](_0x41b2ff)&#125;<span class="keyword">return</span> _0x5792f7&#125;)&#125;());_0x55f3[<span class="string">&#x27;atobPolyfillAppended&#x27;</span>]=!![]&#125;<span class="keyword">if</span>(!_0x55f3[<span class="string">&#x27;rc4&#x27;</span>])&#123;<span class="keyword">var</span> _0x232678=<span class="function"><span class="keyword">function</span>(<span class="params">_0x401af1,_0x532ac0</span>)</span>&#123;<span class="keyword">var</span> _0x45079a=[],_0x52d57c=<span class="number">0x0</span>,_0x105f59,_0x3fd789=<span class="string">&#x27;&#x27;</span>,_0x4a2aed=<span class="string">&#x27;&#x27;</span>;_0x401af1=atob(_0x401af1);<span class="keyword">for</span>(<span class="keyword">var</span> _0x124d17=<span class="number">0x0</span>,_0x1b9115=_0x401af1[<span class="string">&#x27;length&#x27;</span>];_0x124d17&lt;_0x1b9115;_0x124d17++)&#123;_0x4a2aed+=<span class="string">&#x27;%&#x27;</span>+(<span class="string">&#x27;00&#x27;</span>+_0x401af1[<span class="string">&#x27;charCodeAt&#x27;</span>](_0x124d17)[<span class="string">&#x27;toString&#x27;</span>](<span class="number">0x10</span>))[<span class="string">&#x27;slice&#x27;</span>](<span class="number">-0x2</span>)&#125;_0x401af1=<span class="built_in">decodeURIComponent</span>(_0x4a2aed);<span class="keyword">for</span>(<span class="keyword">var</span> _0x2d67ec=<span class="number">0x0</span>;_0x2d67ec&lt;<span class="number">0x100</span>;_0x2d67ec++)&#123;_0x45079a[_0x2d67ec]=_0x2d67ec&#125;<span class="keyword">for</span>(_0x2d67ec=<span class="number">0x0</span>;_0x2d67ec&lt;<span class="number">0x100</span>;_0x2d67ec++)&#123;_0x52d57c=(_0x52d57c+_0x45079a[_0x2d67ec]+_0x532ac0[<span class="string">&#x27;charCodeAt&#x27;</span>](_0x2d67ec%_0x532ac0[<span class="string">&#x27;length&#x27;</span>]))%<span class="number">0x100</span>;_0x105f59=_0x45079a[_0x2d67ec];_0x45079a[_0x2d67ec]=_0x45079a[_0x52d57c];_0x45079a[_0x52d57c]=_0x105f59&#125;_0x2d67ec=<span class="number">0x0</span>;_0x52d57c=<span class="number">0x0</span>;<span class="keyword">for</span>(<span class="keyword">var</span> _0x4e5ce2=<span class="number">0x0</span>;_0x4e5ce2&lt;_0x401af1[<span class="string">&#x27;length&#x27;</span>];_0x4e5ce2++)&#123;_0x2d67ec=(_0x2d67ec+<span class="number">0x1</span>)%<span class="number">0x100</span>;_0x52d57c=(_0x52d57c+_0x45079a[_0x2d67ec])%<span class="number">0x100</span>;_0x105f59=_0x45079a[_0x2d67ec];_0x45079a[_0x2d67ec]=_0x45079a[_0x52d57c];_0x45079a[_0x52d57c]=_0x105f59;_0x3fd789+=<span class="built_in">String</span>[<span class="string">&#x27;fromCharCode&#x27;</span>](_0x401af1[<span class="string">&#x27;charCodeAt&#x27;</span>](_0x4e5ce2)^_0x45079a[(_0x45079a[_0x2d67ec]+_0x45079a[_0x52d57c])%<span class="number">0x100</span>])&#125;<span class="keyword">return</span> _0x3fd789&#125;;_0x55f3[<span class="string">&#x27;rc4&#x27;</span>]=_0x232678&#125;<span class="keyword">if</span>(!_0x55f3[<span class="string">&#x27;data&#x27;</span>])&#123;_0x55f3[<span class="string">&#x27;data&#x27;</span>]=&#123;&#125;&#125;<span class="keyword">if</span>(_0x55f3[<span class="string">&#x27;data&#x27;</span>][_0x4c97f0]===<span class="literal">undefined</span>)&#123;<span class="keyword">if</span>(!_0x55f3[<span class="string">&#x27;once&#x27;</span>])&#123;<span class="keyword">var</span> _0x5f325c=<span class="function"><span class="keyword">function</span>(<span class="params">_0x23a392</span>)</span>&#123;<span class="built_in">this</span>[<span class="string">&#x27;rc4Bytes&#x27;</span>]=_0x23a392;<span class="built_in">this</span>[<span class="string">&#x27;states&#x27;</span>]=[<span class="number">0x1</span>,<span class="number">0x0</span>,<span class="number">0x0</span>];<span class="built_in">this</span>[<span class="string">&#x27;newState&#x27;</span>]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">&#x27;newState&#x27;</span>&#125;;<span class="built_in">this</span>[<span class="string">&#x27;firstState&#x27;</span>]=<span class="string">&#x27;\\w+ *\\(\\) *&#123;\\w+ *&#x27;</span>;<span class="built_in">this</span>[<span class="string">&#x27;secondState&#x27;</span>]=<span class="string">&#x27;[\&#x27;|\&quot;].+[\&#x27;|\&quot;];? *&#125;&#x27;</span>&#125;;_0x5f325c[<span class="string">&#x27;prototype&#x27;</span>][<span class="string">&#x27;checkState&#x27;</span>]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> _0x19f809=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="built_in">this</span>[<span class="string">&#x27;firstState&#x27;</span>]+<span class="built_in">this</span>[<span class="string">&#x27;secondState&#x27;</span>]);<span class="keyword">return</span> <span class="built_in">this</span>[<span class="string">&#x27;runState&#x27;</span>](_0x19f809[<span class="string">&#x27;test&#x27;</span>](<span class="built_in">this</span>[<span class="string">&#x27;newState&#x27;</span>][<span class="string">&#x27;toString&#x27;</span>]())?--<span class="built_in">this</span>[<span class="string">&#x27;states&#x27;</span>][<span class="number">0x1</span>]:--<span class="built_in">this</span>[<span class="string">&#x27;states&#x27;</span>][<span class="number">0x0</span>])&#125;;_0x5f325c[<span class="string">&#x27;prototype&#x27;</span>][<span class="string">&#x27;runState&#x27;</span>]=<span class="function"><span class="keyword">function</span>(<span class="params">_0x4380bd</span>)</span>&#123;<span class="keyword">if</span>(!<span class="built_in">Boolean</span>(~_0x4380bd))&#123;<span class="keyword">return</span> _0x4380bd&#125;<span class="keyword">return</span> <span class="built_in">this</span>[<span class="string">&#x27;getState&#x27;</span>](<span class="built_in">this</span>[<span class="string">&#x27;rc4Bytes&#x27;</span>])&#125;;_0x5f325c[<span class="string">&#x27;prototype&#x27;</span>][<span class="string">&#x27;getState&#x27;</span>]=<span class="function"><span class="keyword">function</span>(<span class="params">_0x58d85e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> _0x1c9f5b=<span class="number">0x0</span>,_0x1ce9e0=<span class="built_in">this</span>[<span class="string">&#x27;states&#x27;</span>][<span class="string">&#x27;length&#x27;</span>];_0x1c9f5b&lt;_0x1ce9e0;_0x1c9f5b++)&#123;<span class="built_in">this</span>[<span class="string">&#x27;states&#x27;</span>][<span class="string">&#x27;push&#x27;</span>](<span class="built_in">Math</span>[<span class="string">&#x27;round&#x27;</span>](<span class="built_in">Math</span>[<span class="string">&#x27;random&#x27;</span>]()));_0x1ce9e0=<span class="built_in">this</span>[<span class="string">&#x27;states&#x27;</span>][<span class="string">&#x27;length&#x27;</span>]&#125;<span class="keyword">return</span> _0x58d85e(<span class="built_in">this</span>[<span class="string">&#x27;states&#x27;</span>][<span class="number">0x0</span>])&#125;;<span class="keyword">new</span> _0x5f325c(_0x55f3)[<span class="string">&#x27;checkState&#x27;</span>]();_0x55f3[<span class="string">&#x27;once&#x27;</span>]=!![]&#125;_0x48181e=_0x55f3[<span class="string">&#x27;rc4&#x27;</span>](_0x48181e,_0x1742fd);_0x55f3[<span class="string">&#x27;data&#x27;</span>][_0x4c97f0]=_0x48181e&#125;<span class="keyword">else</span>&#123;_0x48181e=_0x55f3[<span class="string">&#x27;data&#x27;</span>][_0x4c97f0]&#125;<span class="keyword">return</span> _0x48181e&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> l = <span class="function"><span class="keyword">function</span> (<span class="params">arg1</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _0x5e8b26 = <span class="string">&quot;3000176000856006061501533003690027800375&quot;</span>;</span><br><span class="line">    <span class="built_in">String</span>[<span class="string">&quot;prototype&quot;</span>][<span class="string">&quot;hexXor&quot;</span>] = <span class="function"><span class="keyword">function</span> (<span class="params">_0x4e08d8</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _0x5a5d3b = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> _0xe89588 = <span class="number">0x0</span>; _0xe89588 &lt; <span class="built_in">this</span>[_0x55f3(<span class="string">&#x27;0x8&#x27;</span>, <span class="string">&#x27;)hRc&#x27;</span>)] &amp;&amp; _0xe89588 &lt; _0x4e08d8[_0x55f3(<span class="string">&#x27;0xa&#x27;</span>, <span class="string">&#x27;jE&amp;^&#x27;</span>)]; _0xe89588 += <span class="number">0x2</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> _0x401af1 = <span class="built_in">parseInt</span>(<span class="built_in">this</span>[_0x55f3(<span class="string">&#x27;0xb&#x27;</span>, <span class="string">&#x27;V2KE&#x27;</span>)](_0xe89588, _0xe89588 + <span class="number">0x2</span>), <span class="number">0x10</span>);</span><br><span class="line">            <span class="keyword">var</span> _0x105f59 = <span class="built_in">parseInt</span>(_0x4e08d8[_0x55f3(<span class="string">&#x27;0xd&#x27;</span>, <span class="string">&#x27;XMW^&#x27;</span>)](_0xe89588, _0xe89588 + <span class="number">0x2</span>), <span class="number">0x10</span>);</span><br><span class="line">            <span class="keyword">var</span> _0x189e2c = (_0x401af1 ^ _0x105f59)[_0x55f3(<span class="string">&#x27;0xf&#x27;</span>, <span class="string">&#x27;W1FE&#x27;</span>)](<span class="number">0x10</span>);</span><br><span class="line">            <span class="keyword">if</span> (_0x189e2c[_0x55f3(<span class="string">&#x27;0x11&#x27;</span>, <span class="string">&#x27;MGrv&#x27;</span>)] == <span class="number">0x1</span>) &#123;</span><br><span class="line">                _0x189e2c = <span class="string">&#x27;0&#x27;</span> + _0x189e2c;</span><br><span class="line">            &#125;</span><br><span class="line">            _0x5a5d3b += _0x189e2c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _0x5a5d3b;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">String</span>[<span class="string">&#x27;prototype&#x27;</span>][_0x55f3(<span class="string">&#x27;0x14&#x27;</span>, <span class="string">&#x27;Z*DM&#x27;</span>)] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _0x4b082b = [<span class="number">0xf</span>, <span class="number">0x23</span>, <span class="number">0x1d</span>, <span class="number">0x18</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0x1</span>, <span class="number">0x26</span>, <span class="number">0xa</span>, <span class="number">0x9</span>, <span class="number">0x13</span>, <span class="number">0x1f</span>, <span class="number">0x28</span>, <span class="number">0x1b</span>, <span class="number">0x16</span>, <span class="number">0x17</span>, <span class="number">0x19</span>, <span class="number">0xd</span>, <span class="number">0x6</span>, <span class="number">0xb</span>, <span class="number">0x27</span>, <span class="number">0x12</span>, <span class="number">0x14</span>, <span class="number">0x8</span>, <span class="number">0xe</span>, <span class="number">0x15</span>, <span class="number">0x20</span>, <span class="number">0x1a</span>, <span class="number">0x2</span>, <span class="number">0x1e</span>, <span class="number">0x7</span>, <span class="number">0x4</span>, <span class="number">0x11</span>, <span class="number">0x5</span>, <span class="number">0x3</span>, <span class="number">0x1c</span>, <span class="number">0x22</span>, <span class="number">0x25</span>, <span class="number">0xc</span>, <span class="number">0x24</span>];</span><br><span class="line">        <span class="keyword">var</span> _0x4da0dc = [];</span><br><span class="line">        <span class="keyword">var</span> _0x12605e = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> _0x20a7bf = <span class="number">0x0</span>; _0x20a7bf &lt; <span class="built_in">this</span>[<span class="string">&#x27;length&#x27;</span>]; _0x20a7bf++) &#123;</span><br><span class="line">            <span class="keyword">var</span> _0x385ee3 = <span class="built_in">this</span>[_0x20a7bf];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> _0x217721 = <span class="number">0x0</span>; _0x217721 &lt; _0x4b082b[_0x55f3(<span class="string">&#x27;0x16&#x27;</span>, <span class="string">&#x27;aH*N&#x27;</span>)]; _0x217721++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (_0x4b082b[_0x217721] == _0x20a7bf + <span class="number">0x1</span>) &#123;</span><br><span class="line">                    _0x4da0dc[_0x217721] = _0x385ee3;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        _0x12605e = _0x4da0dc[<span class="string">&#x27;join&#x27;</span>](<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> _0x12605e;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> _0x23a392 = arg1[_0x55f3(<span class="string">&#x27;0x19&#x27;</span>, <span class="string">&#x27;Pg54&#x27;</span>)]();</span><br><span class="line">    arg2 = _0x23a392[_0x55f3(<span class="string">&#x27;0x1b&#x27;</span>, <span class="string">&#x27;z5O&amp;&#x27;</span>)](_0x5e8b26);</span><br><span class="line">    <span class="comment">// console.info(arg2)</span></span><br><span class="line">    <span class="keyword">return</span> arg2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(l(arg1));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JsCrack 爱奇艺登录</title>
      <link href="/2019/10/06/JsCrack%20%E7%88%B1%E5%A5%87%E8%89%BA%E7%99%BB%E5%BD%95/"/>
      <url>/2019/10/06/JsCrack%20%E7%88%B1%E5%A5%87%E8%89%BA%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h2><p>进行XHR断点，Call stack 调试找到如下位置，e.passwd &amp;&amp; (e.passwd = r.rsaFun(e.passwd))，得到公钥和偏移量t,a，继续追踪getKeyPair函数，即可发现生成函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rsaFun: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> t = <span class="string">&quot;ab86b6371b5318aaa1d3c9e612a9f1264f372323c8c0f19875b5fc3b3fd3afcc1e5bec527aa94bfa85bffc157e4245aebda05389a5357b75115ac94f074aefcd&quot;</span></span><br><span class="line">  , a = <span class="string">&quot;10001&quot;</span></span><br><span class="line">  , n = Q.crypto.rsa.RSAUtils.getKeyPair(a, <span class="string">&quot;&quot;</span>, t)</span><br><span class="line">  , i = Q.crypto.rsa.RSAUtils.encryptedString(n, <span class="built_in">encodeURIComponent</span>(e)).replace(<span class="regexp">/\s/g</span>, <span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>未删减直接将整个对象内容取出来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#125;;b=&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = f</span><br><span class="line">        , c = b.biDivideByRadixPower(a, <span class="built_in">this</span>.k - <span class="number">1</span>)</span><br><span class="line">        , d = b.biMultiply(c, <span class="built_in">this</span>.mu)</span><br><span class="line">        , e = b.biDivideByRadixPower(d, <span class="built_in">this</span>.k + <span class="number">1</span>)</span><br><span class="line">        , g = b.biModuloByRadixPower(a, <span class="built_in">this</span>.k + <span class="number">1</span>)</span><br><span class="line">        , h = b.biMultiply(e, <span class="built_in">this</span>.modulus)</span><br><span class="line">        , i = b.biModuloByRadixPower(h, <span class="built_in">this</span>.k + <span class="number">1</span>)</span><br><span class="line">        , j = b.biSubtract(g, i);</span><br><span class="line">    j.isNeg &amp;&amp; (j = b.biAdd(j, <span class="built_in">this</span>.bkplus1));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k = b.biCompare(j, <span class="built_in">this</span>.modulus) &gt;= <span class="number">0</span>; k; )</span><br><span class="line">        j = b.biSubtract(j, <span class="built_in">this</span>.modulus),</span><br><span class="line">            k = b.biCompare(j, <span class="built_in">this</span>.modulus) &gt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> j</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = f.biMultiply(a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.modulo(c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="keyword">new</span> t;</span><br><span class="line">    c.digits[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> d = a, e = b; ; ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> != (<span class="number">1</span> &amp; e.digits[<span class="number">0</span>]) &amp;&amp; (c = <span class="built_in">this</span>.multiplyMod(c, d)),</span><br><span class="line">            e = f.biShiftRight(e, <span class="number">1</span>),</span><br><span class="line">        <span class="number">0</span> == e.digits[<span class="number">0</span>] &amp;&amp; <span class="number">0</span> == f.biHighIndex(e))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        d = <span class="built_in">this</span>.multiplyMod(d, d)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f, g = &#123;&#125;;</span><br><span class="line"><span class="string">&quot;undefined&quot;</span> == <span class="keyword">typeof</span> g.RSAUtils &amp;&amp; (f = g.RSAUtils = &#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> h, k, l, m, n = <span class="number">16</span>, o = n, p = <span class="number">65536</span>, q = p &gt;&gt;&gt; <span class="number">1</span>, r = p * p, s = p - <span class="number">1</span>, t = g.BigInt = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.digits = <span class="string">&quot;boolean&quot;</span> == <span class="keyword">typeof</span> a &amp;&amp; a === !<span class="number">0</span> ? <span class="literal">null</span> : k.slice(<span class="number">0</span>),</span><br><span class="line">            <span class="built_in">this</span>.isNeg = !<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">;</span><br><span class="line">f.setMaxDigits = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    h = a,</span><br><span class="line">        k = <span class="keyword">new</span> <span class="built_in">Array</span>(h);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> b = <span class="number">0</span>; b &lt; k.length; b++)</span><br><span class="line">        k[b] = <span class="number">0</span>;</span><br><span class="line">    l = <span class="keyword">new</span> t,</span><br><span class="line">        m = <span class="keyword">new</span> t,</span><br><span class="line">        m.digits[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">    ,</span><br><span class="line">    f.setMaxDigits(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> u = <span class="number">15</span>;</span><br><span class="line">f.biFromNumber = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="keyword">new</span> t;</span><br><span class="line">    b.isNeg = <span class="number">0</span> &gt; a,</span><br><span class="line">        a = <span class="built_in">Math</span>.abs(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">0</span>; a &gt; <span class="number">0</span>; )</span><br><span class="line">        b.digits[c++] = a &amp; s,</span><br><span class="line">            a = <span class="built_in">Math</span>.floor(a / p);</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="keyword">var</span> v = f.biFromNumber(<span class="number">1e15</span>);</span><br><span class="line">f.biFromDecimal = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> b, c = <span class="string">&quot;-&quot;</span> == a.charAt(<span class="number">0</span>), d = c ? <span class="number">1</span> : <span class="number">0</span>; d &lt; a.length &amp;&amp; <span class="string">&quot;0&quot;</span> == a.charAt(d); )</span><br><span class="line">        ++d;</span><br><span class="line">    <span class="keyword">if</span> (d == a.length)</span><br><span class="line">        b = <span class="keyword">new</span> t;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> e = a.length - d</span><br><span class="line">            , g = e % u;</span><br><span class="line">        <span class="keyword">for</span> (<span class="number">0</span> == g &amp;&amp; (g = u),</span><br><span class="line">                 b = f.biFromNumber(<span class="built_in">Number</span>(a.substr(d, g))),</span><br><span class="line">                 d += g; d &lt; a.length; )</span><br><span class="line">            b = f.biAdd(f.biMultiply(b, v), f.biFromNumber(<span class="built_in">Number</span>(a.substr(d, u)))),</span><br><span class="line">                d += u;</span><br><span class="line">        b.isNeg = c</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biCopy = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="keyword">new</span> t(!<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> b.digits = a.digits.slice(<span class="number">0</span>),</span><br><span class="line">            b.isNeg = a.isNeg,</span><br><span class="line">            b</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.reverseStr = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> b = <span class="string">&quot;&quot;</span>, c = a.length - <span class="number">1</span>; c &gt; <span class="number">-1</span>; --c)</span><br><span class="line">            b += a.charAt(c);</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">;</span><br><span class="line"><span class="keyword">var</span> w = [<span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>];</span><br><span class="line">f.biToString = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="keyword">new</span> t;</span><br><span class="line">    c.digits[<span class="number">0</span>] = b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> d = f.biDivideModulo(a, c), e = w[d[<span class="number">1</span>].digits[<span class="number">0</span>]]; <span class="number">1</span> == f.biCompare(d[<span class="number">0</span>], l); )</span><br><span class="line">        d = f.biDivideModulo(d[<span class="number">0</span>], c),</span><br><span class="line">            digit = d[<span class="number">1</span>].digits[<span class="number">0</span>],</span><br><span class="line">            e += w[d[<span class="number">1</span>].digits[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">return</span> (a.isNeg ? <span class="string">&quot;-&quot;</span> : <span class="string">&quot;&quot;</span>) + f.reverseStr(e)</span><br><span class="line">&#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biToDecimal = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="keyword">new</span> t;</span><br><span class="line">        b.digits[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> c = f.biDivideModulo(a, b), d = <span class="built_in">String</span>(c[<span class="number">1</span>].digits[<span class="number">0</span>]); <span class="number">1</span> == f.biCompare(c[<span class="number">0</span>], l); )</span><br><span class="line">            c = f.biDivideModulo(c[<span class="number">0</span>], b),</span><br><span class="line">                d += <span class="built_in">String</span>(c[<span class="number">1</span>].digits[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> (a.isNeg ? <span class="string">&quot;-&quot;</span> : <span class="string">&quot;&quot;</span>) + f.reverseStr(d)</span><br><span class="line">    &#125;</span><br><span class="line">;</span><br><span class="line"><span class="keyword">var</span> x = [<span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>];</span><br><span class="line">f.digitToHex = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">15</span></span><br><span class="line">        , c = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; <span class="number">4</span> &gt; i; ++i)</span><br><span class="line">        c += x[a &amp; b],</span><br><span class="line">            a &gt;&gt;&gt;= <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> f.reverseStr(c)</span><br><span class="line">&#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biToHex = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        f.biHighIndex(a);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> c = f.biHighIndex(a); c &gt; <span class="number">-1</span>; --c)</span><br><span class="line">            b += f.digitToHex(a.digits[c]);</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.charToHex = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b, c = <span class="number">48</span>, d = c + <span class="number">9</span>, e = <span class="number">97</span>, f = e + <span class="number">25</span>, g = <span class="number">65</span>, h = <span class="number">90</span>;</span><br><span class="line">        <span class="keyword">return</span> b = a &gt;= c &amp;&amp; d &gt;= a ? a - c : a &gt;= g &amp;&amp; h &gt;= a ? <span class="number">10</span> + a - g : a &gt;= e &amp;&amp; f &gt;= a ? <span class="number">10</span> + a - e : <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.hexToDigit = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> b = <span class="number">0</span>, c = <span class="built_in">Math</span>.min(a.length, <span class="number">4</span>), d = <span class="number">0</span>; c &gt; d; ++d)</span><br><span class="line">            b &lt;&lt;= <span class="number">4</span>,</span><br><span class="line">                b |= f.charToHex(a.charCodeAt(d));</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biFromHex = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> b = <span class="keyword">new</span> t, c = a.length, d = c, e = <span class="number">0</span>; d &gt; <span class="number">0</span>; d -= <span class="number">4</span>,</span><br><span class="line">            ++e)</span><br><span class="line">            b.digits[e] = f.hexToDigit(a.substr(<span class="built_in">Math</span>.max(d - <span class="number">4</span>, <span class="number">0</span>), <span class="built_in">Math</span>.min(d, <span class="number">4</span>)));</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biFromString = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = <span class="string">&quot;-&quot;</span> == a.charAt(<span class="number">0</span>)</span><br><span class="line">            , d = c ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">            , e = <span class="keyword">new</span> t</span><br><span class="line">            , g = <span class="keyword">new</span> t;</span><br><span class="line">        g.digits[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> h = a.length - <span class="number">1</span>; h &gt;= d; h--) &#123;</span><br><span class="line">            <span class="keyword">var</span> i = a.charCodeAt(h)</span><br><span class="line">                , j = f.charToHex(i)</span><br><span class="line">                , k = f.biMultiplyDigit(g, j);</span><br><span class="line">            e = f.biAdd(e, k),</span><br><span class="line">                g = f.biMultiplyDigit(g, b)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e.isNeg = c,</span><br><span class="line">            e</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biDump = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (a.isNeg ? <span class="string">&quot;-&quot;</span> : <span class="string">&quot;&quot;</span>) + a.digits.join(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biAdd = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c;</span><br><span class="line">        <span class="keyword">if</span> (a.isNeg != b.isNeg)</span><br><span class="line">            b.isNeg = !b.isNeg,</span><br><span class="line">                c = f.biSubtract(a, b),</span><br><span class="line">                b.isNeg = !b.isNeg;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            c = <span class="keyword">new</span> t;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> d, e = <span class="number">0</span>, g = <span class="number">0</span>; g &lt; a.digits.length; ++g)</span><br><span class="line">                d = a.digits[g] + b.digits[g] + e,</span><br><span class="line">                    c.digits[g] = d % p,</span><br><span class="line">                    e = <span class="built_in">Number</span>(d &gt;= p);</span><br><span class="line">            c.isNeg = a.isNeg</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biSubtract = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c;</span><br><span class="line">        <span class="keyword">if</span> (a.isNeg != b.isNeg)</span><br><span class="line">            b.isNeg = !b.isNeg,</span><br><span class="line">                c = f.biAdd(a, b),</span><br><span class="line">                b.isNeg = !b.isNeg;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            c = <span class="keyword">new</span> t;</span><br><span class="line">            <span class="keyword">var</span> d, e;</span><br><span class="line">            e = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> g = <span class="number">0</span>; g &lt; a.digits.length; ++g)</span><br><span class="line">                d = a.digits[g] - b.digits[g] + e,</span><br><span class="line">                    c.digits[g] = d % p,</span><br><span class="line">                c.digits[g] &lt; <span class="number">0</span> &amp;&amp; (c.digits[g] += p),</span><br><span class="line">                    e = <span class="number">0</span> - <span class="built_in">Number</span>(<span class="number">0</span> &gt; d);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">-1</span> == e) &#123;</span><br><span class="line">                e = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> g = <span class="number">0</span>; g &lt; a.digits.length; ++g)</span><br><span class="line">                    d = <span class="number">0</span> - c.digits[g] + e,</span><br><span class="line">                        c.digits[g] = d % p,</span><br><span class="line">                    c.digits[g] &lt; <span class="number">0</span> &amp;&amp; (c.digits[g] += p),</span><br><span class="line">                        e = <span class="number">0</span> - <span class="built_in">Number</span>(<span class="number">0</span> &gt; d);</span><br><span class="line">                c.isNeg = !a.isNeg</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">                c.isNeg = a.isNeg</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biHighIndex = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> b = a.digits.length - <span class="number">1</span>; b &gt; <span class="number">0</span> &amp;&amp; <span class="number">0</span> == a.digits[b]; )</span><br><span class="line">            --b;</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biNumBits = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b, c = f.biHighIndex(a), d = a.digits[c], e = (c + <span class="number">1</span>) * o;</span><br><span class="line">        <span class="keyword">for</span> (b = e; b &gt; e - o &amp;&amp; <span class="number">0</span> == (<span class="number">32768</span> &amp; d); --b)</span><br><span class="line">            d &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biMultiply = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> c, d, e, g = <span class="keyword">new</span> t, h = f.biHighIndex(a), i = f.biHighIndex(b), k = <span class="number">0</span>; i &gt;= k; ++k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (c = <span class="number">0</span>,</span><br><span class="line">                     e = k,</span><br><span class="line">                     j = <span class="number">0</span>; h &gt;= j; ++j,</span><br><span class="line">                     ++e)</span><br><span class="line">                d = g.digits[e] + a.digits[j] * b.digits[k] + c,</span><br><span class="line">                    g.digits[e] = d &amp; s,</span><br><span class="line">                    c = d &gt;&gt;&gt; n;</span><br><span class="line">            g.digits[k + h + <span class="number">1</span>] = c</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> g.isNeg = a.isNeg != b.isNeg,</span><br><span class="line">            g</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biMultiplyDigit = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c, d, e;</span><br><span class="line">        result = <span class="keyword">new</span> t,</span><br><span class="line">            c = f.biHighIndex(a),</span><br><span class="line">            d = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> g = <span class="number">0</span>; c &gt;= g; ++g)</span><br><span class="line">            e = result.digits[g] + a.digits[g] * b + d,</span><br><span class="line">                result.digits[g] = e &amp; s,</span><br><span class="line">                d = e &gt;&gt;&gt; n;</span><br><span class="line">        <span class="keyword">return</span> result.digits[<span class="number">1</span> + c] = d,</span><br><span class="line">            result</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.arrayCopy = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c, d, e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> f = <span class="built_in">Math</span>.min(b + e, a.length), g = b, h = d; f &gt; g; ++g,</span><br><span class="line">            ++h)</span><br><span class="line">            c[h] = a[g]</span><br><span class="line">    &#125;</span><br><span class="line">;</span><br><span class="line"><span class="keyword">var</span> y = [<span class="number">0</span>, <span class="number">32768</span>, <span class="number">49152</span>, <span class="number">57344</span>, <span class="number">61440</span>, <span class="number">63488</span>, <span class="number">64512</span>, <span class="number">65024</span>, <span class="number">65280</span>, <span class="number">65408</span>, <span class="number">65472</span>, <span class="number">65504</span>, <span class="number">65520</span>, <span class="number">65528</span>, <span class="number">65532</span>, <span class="number">65534</span>, <span class="number">65535</span>];</span><br><span class="line">f.biShiftLeft = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="built_in">Math</span>.floor(b / o)</span><br><span class="line">        , d = <span class="keyword">new</span> t;</span><br><span class="line">    f.arrayCopy(a.digits, <span class="number">0</span>, d.digits, c, d.digits.length - c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = b % o, g = o - e, h = d.digits.length - <span class="number">1</span>, i = h - <span class="number">1</span>; h &gt; <span class="number">0</span>; --h,</span><br><span class="line">        --i)</span><br><span class="line">        d.digits[h] = d.digits[h] &lt;&lt; e &amp; s | (d.digits[i] &amp; y[e]) &gt;&gt;&gt; g;</span><br><span class="line">    <span class="keyword">return</span> d.digits[<span class="number">0</span>] = d.digits[h] &lt;&lt; e &amp; s,</span><br><span class="line">        d.isNeg = a.isNeg,</span><br><span class="line">        d</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="keyword">var</span> z = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">31</span>, <span class="number">63</span>, <span class="number">127</span>, <span class="number">255</span>, <span class="number">511</span>, <span class="number">1023</span>, <span class="number">2047</span>, <span class="number">4095</span>, <span class="number">8191</span>, <span class="number">16383</span>, <span class="number">32767</span>, <span class="number">65535</span>];</span><br><span class="line">f.biShiftRight = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="built_in">Math</span>.floor(b / o)</span><br><span class="line">        , d = <span class="keyword">new</span> t;</span><br><span class="line">    f.arrayCopy(a.digits, c, d.digits, <span class="number">0</span>, a.digits.length - c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = b % o, g = o - e, h = <span class="number">0</span>, i = h + <span class="number">1</span>; h &lt; d.digits.length - <span class="number">1</span>; ++h,</span><br><span class="line">        ++i)</span><br><span class="line">        d.digits[h] = d.digits[h] &gt;&gt;&gt; e | (d.digits[i] &amp; z[e]) &lt;&lt; g;</span><br><span class="line">    <span class="keyword">return</span> d.digits[d.digits.length - <span class="number">1</span>] &gt;&gt;&gt;= e,</span><br><span class="line">        d.isNeg = a.isNeg,</span><br><span class="line">        d</span><br><span class="line">&#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biMultiplyByRadixPower = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = <span class="keyword">new</span> t;</span><br><span class="line">        <span class="keyword">return</span> f.arrayCopy(a.digits, <span class="number">0</span>, c.digits, b, c.digits.length - b),</span><br><span class="line">            c</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biDivideByRadixPower = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = <span class="keyword">new</span> t;</span><br><span class="line">        <span class="keyword">return</span> f.arrayCopy(a.digits, b, c.digits, <span class="number">0</span>, c.digits.length - b),</span><br><span class="line">            c</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biModuloByRadixPower = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c = <span class="keyword">new</span> t;</span><br><span class="line">        <span class="keyword">return</span> f.arrayCopy(a.digits, <span class="number">0</span>, c.digits, <span class="number">0</span>, b),</span><br><span class="line">            c</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biCompare = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a.isNeg != b.isNeg)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> - <span class="number">2</span> * <span class="built_in">Number</span>(a.isNeg);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> c = a.digits.length - <span class="number">1</span>; c &gt;= <span class="number">0</span>; --c)</span><br><span class="line">            <span class="keyword">if</span> (a.digits[c] != b.digits[c])</span><br><span class="line">                <span class="keyword">return</span> a.isNeg ? <span class="number">1</span> - <span class="number">2</span> * <span class="built_in">Number</span>(a.digits[c] &gt; b.digits[c]) : <span class="number">1</span> - <span class="number">2</span> * <span class="built_in">Number</span>(a.digits[c] &lt; b.digits[c]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biDivideModulo = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c, d, e = f.biNumBits(a), g = f.biNumBits(b), h = b.isNeg;</span><br><span class="line">        <span class="keyword">if</span> (g &gt; e)</span><br><span class="line">            <span class="keyword">return</span> a.isNeg ? (c = f.biCopy(m),</span><br><span class="line">                c.isNeg = !b.isNeg,</span><br><span class="line">                a.isNeg = !<span class="number">1</span>,</span><br><span class="line">                b.isNeg = !<span class="number">1</span>,</span><br><span class="line">                d = biSubtract(b, a),</span><br><span class="line">                a.isNeg = !<span class="number">0</span>,</span><br><span class="line">                b.isNeg = h) : (c = <span class="keyword">new</span> t,</span><br><span class="line">                d = f.biCopy(a)),</span><br><span class="line">                [c, d];</span><br><span class="line">        c = <span class="keyword">new</span> t,</span><br><span class="line">            d = a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="built_in">Math</span>.ceil(g / o) - <span class="number">1</span>, j = <span class="number">0</span>; b.digits[i] &lt; q; )</span><br><span class="line">            b = f.biShiftLeft(b, <span class="number">1</span>),</span><br><span class="line">                ++j,</span><br><span class="line">                ++g,</span><br><span class="line">                i = <span class="built_in">Math</span>.ceil(g / o) - <span class="number">1</span>;</span><br><span class="line">        d = f.biShiftLeft(d, j),</span><br><span class="line">            e += j;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="built_in">Math</span>.ceil(e / o) - <span class="number">1</span>, l = f.biMultiplyByRadixPower(b, k - i); <span class="number">-1</span> != f.biCompare(d, l); )</span><br><span class="line">            ++c.digits[k - i],</span><br><span class="line">                d = f.biSubtract(d, l);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> n = k; n &gt; i; --n) &#123;</span><br><span class="line">            <span class="keyword">var</span> u = n &gt;= d.digits.length ? <span class="number">0</span> : d.digits[n]</span><br><span class="line">                , v = n - <span class="number">1</span> &gt;= d.digits.length ? <span class="number">0</span> : d.digits[n - <span class="number">1</span>]</span><br><span class="line">                , w = n - <span class="number">2</span> &gt;= d.digits.length ? <span class="number">0</span> : d.digits[n - <span class="number">2</span>]</span><br><span class="line">                , x = i &gt;= b.digits.length ? <span class="number">0</span> : b.digits[i]</span><br><span class="line">                , y = i - <span class="number">1</span> &gt;= b.digits.length ? <span class="number">0</span> : b.digits[i - <span class="number">1</span>];</span><br><span class="line">            c.digits[n - i - <span class="number">1</span>] = u == x ? s : <span class="built_in">Math</span>.floor((u * p + v) / x);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> z = c.digits[n - i - <span class="number">1</span>] * (x * p + y), A = u * r + (v * p + w); z &gt; A; )</span><br><span class="line">                --c.digits[n - i - <span class="number">1</span>],</span><br><span class="line">                    z = c.digits[n - i - <span class="number">1</span>] * (x * p | y),</span><br><span class="line">                    A = u * p * p + (v * p + w);</span><br><span class="line">            l = f.biMultiplyByRadixPower(b, n - i - <span class="number">1</span>),</span><br><span class="line">                d = f.biSubtract(d, f.biMultiplyDigit(l, c.digits[n - i - <span class="number">1</span>])),</span><br><span class="line">            d.isNeg &amp;&amp; (d = f.biAdd(d, l),</span><br><span class="line">                --c.digits[n - i - <span class="number">1</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d = f.biShiftRight(d, j),</span><br><span class="line">            c.isNeg = a.isNeg != h,</span><br><span class="line">        a.isNeg &amp;&amp; (c = h ? f.biAdd(c, m) : f.biSubtract(c, m),</span><br><span class="line">            b = f.biShiftRight(b, j),</span><br><span class="line">            d = f.biSubtract(b, d)),</span><br><span class="line">        <span class="number">0</span> == d.digits[<span class="number">0</span>] &amp;&amp; <span class="number">0</span> == f.biHighIndex(d) &amp;&amp; (d.isNeg = !<span class="number">1</span>),</span><br><span class="line">            [c, d]</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biDivide = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f.biDivideModulo(a, b)[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biModulo = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f.biDivideModulo(a, b)[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biMultiplyMod = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f.biModulo(f.biMultiply(a, b), c)</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biPow = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> c = m, d = a; ; ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> != (<span class="number">1</span> &amp; b) &amp;&amp; (c = f.biMultiply(c, d)),</span><br><span class="line">                b &gt;&gt;= <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span> == b)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            d = f.biMultiply(d, d)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.biPowMod = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> d = m, e = a, g = b; ; ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> != (<span class="number">1</span> &amp; g.digits[<span class="number">0</span>]) &amp;&amp; (d = f.biMultiplyMod(d, e, c)),</span><br><span class="line">                g = f.biShiftRight(g, <span class="number">1</span>),</span><br><span class="line">            <span class="number">0</span> == g.digits[<span class="number">0</span>] &amp;&amp; <span class="number">0</span> == f.biHighIndex(g))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            e = f.biMultiplyMod(e, e, c)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    g.BarrettMu = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.modulus = f.biCopy(a),</span><br><span class="line">            <span class="built_in">this</span>.k = f.biHighIndex(<span class="built_in">this</span>.modulus) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="keyword">new</span> t;</span><br><span class="line">        b.digits[<span class="number">2</span> * <span class="built_in">this</span>.k] = <span class="number">1</span>,</span><br><span class="line">            <span class="built_in">this</span>.mu = f.biDivide(b, <span class="built_in">this</span>.modulus),</span><br><span class="line">            <span class="built_in">this</span>.bkplus1 = <span class="keyword">new</span> t,</span><br><span class="line">            <span class="built_in">this</span>.bkplus1.digits[<span class="built_in">this</span>.k + <span class="number">1</span>] = <span class="number">1</span>,</span><br><span class="line">            <span class="built_in">this</span>.modulo = c,</span><br><span class="line">            <span class="built_in">this</span>.multiplyMod = d,</span><br><span class="line">            <span class="built_in">this</span>.powMod = e</span><br><span class="line">    &#125;</span><br><span class="line">;</span><br><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = f;</span><br><span class="line">    <span class="built_in">this</span>.e = d.biFromHex(a),</span><br><span class="line">        <span class="built_in">this</span>.d = d.biFromHex(b),</span><br><span class="line">        <span class="built_in">this</span>.m = d.biFromHex(c),</span><br><span class="line">        <span class="built_in">this</span>.chunkSize = <span class="number">2</span> * d.biHighIndex(<span class="built_in">this</span>.m),</span><br><span class="line">        <span class="built_in">this</span>.radix = <span class="number">16</span>,</span><br><span class="line">        <span class="built_in">this</span>.barrett = <span class="keyword">new</span> g.BarrettMu(<span class="built_in">this</span>.m)</span><br><span class="line">&#125;;</span><br><span class="line">f.getKeyPair = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> A(a,b,c)</span><br><span class="line">&#125;</span><br><span class="line">    ,</span><br><span class="line"><span class="string">&quot;undefined&quot;</span> == <span class="keyword">typeof</span> g.twoDigit &amp;&amp; (g.twoDigit = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">10</span> &gt; a ? <span class="string">&quot;0&quot;</span> : <span class="string">&quot;&quot;</span>) + <span class="built_in">String</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line">),</span><br><span class="line">    f.encryptedString = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> c = [], d = b.length, e = <span class="number">0</span>; d &gt; e; )</span><br><span class="line">            c[e] = b.charCodeAt(e),</span><br><span class="line">                e++;</span><br><span class="line">        <span class="keyword">for</span> (; <span class="number">0</span> != c.length % a.chunkSize; )</span><br><span class="line">            c[e++] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> g, h, i, j = c.length, k = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (e = <span class="number">0</span>; j &gt; e; e += a.chunkSize) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="keyword">new</span> t,</span><br><span class="line">                     g = <span class="number">0</span>,</span><br><span class="line">                     h = e; h &lt; e + a.chunkSize; ++g)</span><br><span class="line">                i.digits[g] = c[h++],</span><br><span class="line">                    i.digits[g] += c[h++] &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            <span class="keyword">var</span> l = a.barrett.powMod(i, a.e)</span><br><span class="line">                , m = <span class="number">16</span> == a.radix ? f.biToHex(l) : f.biToString(l, a.radix);</span><br><span class="line">            k += m + <span class="string">&quot; &quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k.substring(<span class="number">0</span>, k.length - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.decryptedString = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c, d, e, g = b.split(<span class="string">&quot; &quot;</span>), h = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (c = <span class="number">0</span>; c &lt; g.length; ++c) &#123;</span><br><span class="line">            <span class="keyword">var</span> i;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">16</span> == a.radix ? f.biFromHex(g[c]) : f.biFromString(g[c], a.radix),</span><br><span class="line">                     e = a.barrett.powMod(i, a.d),</span><br><span class="line">                     d = <span class="number">0</span>; d &lt;= f.biHighIndex(e); ++d)</span><br><span class="line">                h += <span class="built_in">String</span>.fromCharCode(<span class="number">255</span> &amp; e.digits[d], e.digits[d] &gt;&gt; <span class="number">8</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> == h.charCodeAt(h.length - <span class="number">1</span>) &amp;&amp; (h = h.substring(<span class="number">0</span>, h.length - <span class="number">1</span>)),</span><br><span class="line">            h</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    f.setMaxDigits(<span class="number">130</span>),</span><br><span class="line">    b[a] = g</span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getpwd</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">&quot;ab86b6371b5318aaa1d3c9e612a9f1264f372323c8c0f19875b5fc3b3fd3afcc1e5bec527aa94bfa85bffc157e4245aebda05389a5357b75115ac94f074aefcd&quot;</span>,</span><br><span class="line">        n = <span class="string">&quot;10001&quot;</span>,</span><br><span class="line">        a = f.getKeyPair(n, <span class="string">&quot;&quot;</span>, t),</span><br><span class="line">        i = f.encryptedString(a, <span class="built_in">encodeURIComponent</span>(e)).replace(<span class="regexp">/\s/g</span>, <span class="string">&quot;-&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(getpwd(<span class="string">&quot;1111111111111&quot;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Encrypt Python RSA文件加密</title>
      <link href="/2019/10/06/Encrypt%20Python%20RSA%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86/"/>
      <url>/2019/10/06/Encrypt%20Python%20RSA%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>如果前面有了解RSA算法的话，那么肯定知道，我们第一步就是要生成公钥和私钥，用公钥对文件进行加密，用私钥对文件进行解密。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, PKCS1_OAEP</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CreateRSAKeys</span>():</span></span><br><span class="line">    code = <span class="string">&#x27;nooneknows&#x27;</span></span><br><span class="line">    <span class="comment"># 生成2048位的RSA密钥</span></span><br><span class="line">    key = RSA.generate(<span class="number">2048</span>)</span><br><span class="line">    encrypted_key = key.exportKey(passphrase=code, pkcs=<span class="number">8</span>, protection=<span class="string">&quot;scryptAndAES128-CBC&quot;</span>)</span><br><span class="line">    <span class="comment"># 生成私钥</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;my_private_rsa_key.bin&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(encrypted_key)</span><br><span class="line">    <span class="comment"># 生成公钥</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;my_rsa_public.pem&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(key.publickey().exportKey())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Encrypt</span>(<span class="params">filename</span>):</span></span><br><span class="line">    data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 二进制只读打开文件,读取文件数据</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> out_file:</span><br><span class="line">        <span class="comment"># 收件人秘钥 - 公钥</span></span><br><span class="line">        recipient_key = RSA.import_key(open(<span class="string">&#x27;my_rsa_public.pem&#x27;</span>).read())</span><br><span class="line">        <span class="comment"># 一个16字节的会话密钥</span></span><br><span class="line">        session_key = get_random_bytes(<span class="number">16</span>)</span><br><span class="line">        <span class="comment"># Encrypt the session key with the public RSA key</span></span><br><span class="line">        cipher_rsa = PKCS1_OAEP.new(recipient_key)  <span class="comment"># 最优非对称加密填充</span></span><br><span class="line">        out_file.write(cipher_rsa.encrypt(session_key))</span><br><span class="line">        <span class="comment"># Encrypt the data with the AES session key</span></span><br><span class="line">        cipher_aes = AES.new(session_key, AES.MODE_EAX)</span><br><span class="line">        <span class="comment"># 得到加密的文本和消息认证码</span></span><br><span class="line">        ciphertext, tag = cipher_aes.encrypt_and_digest(data)</span><br><span class="line">        <span class="comment"># 将随机数，消息认证码和加密的文本写入文件</span></span><br><span class="line">        out_file.write(cipher_aes.nonce)</span><br><span class="line">        out_file.write(tag)</span><br><span class="line">        out_file.write(ciphertext)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Descrypt</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    二进制模式读取加密文件导入私钥，需要提供一个密码</span></span><br><span class="line"><span class="string">    :param filename:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    code = <span class="string">&#x27;nooneknows&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fobj:</span><br><span class="line">        <span class="comment"># 导入密钥</span></span><br><span class="line">        private_key = RSA.import_key(open(<span class="string">&#x27;my_private_rsa_key.bin&#x27;</span>).read(), passphrase=code)</span><br><span class="line">        <span class="comment"># 会话密钥,随机数,消息认证码,加密数据</span></span><br><span class="line">        enc_session_key, nonce, tag, ciphertext = [fobj.read(x)</span><br><span class="line">                                                   <span class="keyword">for</span> x <span class="keyword">in</span> (private_key.size_in_bytes(),</span><br><span class="line">                                                             <span class="number">16</span>, <span class="number">16</span>, <span class="number">-1</span>)]</span><br><span class="line">        cipher_rsa = PKCS1_OAEP.new(private_key)</span><br><span class="line">        session_key = cipher_rsa.decrypt(enc_session_key)</span><br><span class="line">        cipher_aes = AES.new(session_key, AES.MODE_EAX, nonce)</span><br><span class="line">        <span class="comment"># 解密</span></span><br><span class="line">        data = cipher_aes.decrypt_and_verify(ciphertext, tag)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> wobj:</span><br><span class="line">        wobj.write(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RenameFile</span>(<span class="params">dir, filename</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    修改文件名后缀</span></span><br><span class="line"><span class="string">    :param dir:</span></span><br><span class="line"><span class="string">    :param filename:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    filename_bytes = filename.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    filename_bytes_base64 = base64.encodebytes(filename_bytes)</span><br><span class="line"></span><br><span class="line">    filename_bytes_base64 = filename_bytes_base64[::<span class="number">-1</span>][<span class="number">1</span>:]</span><br><span class="line">    new_filename = filename_bytes_base64.decode(<span class="string">&#x27;utf-8&#x27;</span>) + <span class="string">&#x27;.crypt1&#x27;</span></span><br><span class="line">    print(os.path.join(dir, filename))</span><br><span class="line">    print(os.path.join(dir, new_filename))</span><br><span class="line">    os.rename(os.path.join(dir, filename), os.path.join(dir, new_filename))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReserveFilename</span>(<span class="params">dir, filename</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    恢复文件名</span></span><br><span class="line"><span class="string">    :param dir:</span></span><br><span class="line"><span class="string">    :param filename:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    f = filename</span><br><span class="line">    filename = filename[::<span class="number">-1</span>][<span class="number">7</span>:][::<span class="number">-1</span>]</span><br><span class="line">    filename_base64 = filename[::<span class="number">-1</span>] + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    filename_bytes_base64 = filename_base64.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    ori_filename = base64.decodebytes(filename_bytes_base64).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    print(os.path.join(dir, f))</span><br><span class="line">    print(os.path.join(dir, ori_filename))</span><br><span class="line">    os.rename(os.path.join(dir, f), os.path.join(dir, ori_filename))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Main</span>(<span class="params">rootDir</span>):</span></span><br><span class="line">    list_dirs = os.walk(rootDir)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> list_dirs:</span><br><span class="line">        <span class="comment"># 切换加密和解密过程</span></span><br><span class="line">        <span class="comment"># if False:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="literal">False</span>:</span><br><span class="line">            <span class="comment"># 遍历文件，加密并且改名</span></span><br><span class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">                filename = os.path.join(root, f)</span><br><span class="line">                Encrypt(filename)</span><br><span class="line">                RenameFile(root, f)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 遍历文件，解密并且恢复名字</span></span><br><span class="line">            <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">                filename = os.path.join(root, f)</span><br><span class="line">                Descrypt(filename)</span><br><span class="line">                ReserveFilename(root, f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># CreateRSAKeys()</span></span><br><span class="line">    d = <span class="string">&#x27;D:/my&#x27;</span></span><br><span class="line">    Main(d)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 加密算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript异步编程的4种方法</title>
      <link href="/2019/10/05/Javascript%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%844%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2019/10/05/Javascript%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%844%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>本文总结了”异步模式”编程的4种方法，理解它们可以让你写出结构更合理、性能更出色、维护更方便的Javascript程序。</p><h2 id="一、回调函数"><a href="#一、回调函数" class="headerlink" title="一、回调函数"></a>一、回调函数</h2><p>这是异步编程最基本的方法。</p><p>假定有两个函数f1和f2，后者等待前者的执行结果。</p><p>　　f1();</p><p>　　f2();</p><p>如果f1是一个很耗时的任务，可以考虑改写f1，把f2写成f1的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　<span class="comment">// f1的任务代码</span></span><br><span class="line"></span><br><span class="line">　　　　　　callback();</span><br><span class="line"></span><br><span class="line">　　　　&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>执行代码就变成下面这样：</p><p>　　f1(f2);</p><p>采用这种方式，我们把同步操作变成了异步操作，f1不会堵塞程序运行，相当于先执行程序的主要逻辑，将耗时的操作推迟执行。</p><p>回调函数的优点是简单、容易理解和部署，缺点是不利于代码的阅读和维护，各个部分之间高度耦合（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。</p><h2 id="二、事件监听"><a href="#二、事件监听" class="headerlink" title="二、事件监听"></a>二、事件监听</h2><p>另一种思路是采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。</p><p>还是以f1和f2为例。首先，为f1绑定一个事件（这里采用的jQuery的写法）。</p><p>　　f1.on(‘done’, f2);</p><p>上面这行代码的意思是，当f1发生done事件，就执行f2。然后，对f1进行改写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　<span class="comment">// f1的任务代码</span></span><br><span class="line"></span><br><span class="line">　　　　　　f1.trigger(<span class="string">&#x27;done&#x27;</span>);</span><br><span class="line"></span><br><span class="line">　　　　&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>f1.trigger(‘done’)表示，执行完成后，立即触发done事件，从而开始执行f2。</p><p>这种方法的优点是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以”去耦合”（Decoupling），有利于实现模块化。缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。</p><h2 id="三、发布-订阅"><a href="#三、发布-订阅" class="headerlink" title="三、发布/订阅"></a>三、发布/订阅</h2><p>上一节的”事件”，完全可以理解成”信号”。</p><p>我们假定，存在一个”信号中心”，某个任务执行完成，就向信号中心”发布”（publish）一个信号，其他任务可以向信号中心”订阅”（subscribe）这个信号，从而知道什么时候自己可以开始执行。这就叫做”发布/订阅模式”（publish-subscribe pattern），又称”观察者模式”（observer pattern）。</p><p>这个模式有多种实现，下面采用的是Ben Alman的Tiny Pub/Sub，这是jQuery的一个插件。</p><p>首先，f2向”信号中心”jQuery订阅”done”信号。</p><p>　　jQuery.subscribe(“done”, f2);</p><p>然后，f1进行如下改写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　<span class="comment">// f1的任务代码</span></span><br><span class="line"></span><br><span class="line">　　　　　　jQuery.publish(<span class="string">&quot;done&quot;</span>);</span><br><span class="line"></span><br><span class="line">　　　　&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>jQuery.publish(“done”)的意思是，f1执行完成后，向”信号中心”jQuery发布”done”信号，从而引发f2的执行。</p><p>此外，f2完成执行后，也可以取消订阅（unsubscribe）。</p><p>　　jQuery.unsubscribe(“done”, f2);</p><p>这种方法的性质与”事件监听”类似，但是明显优于后者。因为我们可以通过查看”消息中心”，了解存在多少信号、每个信号有多少订阅者，从而监控程序的运行。</p><h2 id="四、Promises对象"><a href="#四、Promises对象" class="headerlink" title="四、Promises对象"></a>四、Promises对象</h2><p>Promises对象是CommonJS工作组提出的一种规范，目的是为异步编程提供统一接口。</p><p>简单说，它的思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，f1的回调函数f2,可以写成：</p><p>　　f1().then(f2);</p><p>f1要进行如下改写（这里使用的是jQuery的实现）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> dfd = $.Deferred();</span><br><span class="line"></span><br><span class="line">　　　　<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　<span class="comment">// f1的任务代码</span></span><br><span class="line"></span><br><span class="line">　　　　　　dfd.resolve();</span><br><span class="line"></span><br><span class="line">　　　　&#125;, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">return</span> dfd.promise;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>这样写的优点在于，回调函数变成了链式写法，程序的流程可以看得很清楚，而且有一整套的配套方法，可以实现许多强大的功能。</p><p>比如，指定多个回调函数：</p><p>　　f1().then(f2).then(f3);</p><p>再比如，指定发生错误时的回调函数：</p><p>　　f1().then(f2).fail(f3);</p><p>而且，它还有一个前面三种方法都没有的好处：如果一个任务已经完成，再添加回调函数，该回调函数会立即执行。<br>所以，你不用担心是否错过了某个事件或信号。这种方法的缺点就是编写和理解，都相对比较难。</p>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript函数声明的六种方法</title>
      <link href="/2019/10/05/JavaScript%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E7%9A%84%E5%85%AD%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2019/10/05/JavaScript%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E7%9A%84%E5%85%AD%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一个函数一次性定义的代码块可以多次调用。在JavaScript中，一个函数有很多元素组成，同时也受很多元素影响：</p><ul><li>函数体的代码</li><li>函数的参数列表</li><li>接受外部变量域的变量</li><li>返回值</li><li>当函数被调用时，this指上下文</li><li>命名和匿名函数</li><li>函数对象作为变量声明</li><li>arguments对象(在ES6中的箭头函数中将丢弃这个)<br>这些元素都会影响到函数，但具体影响函数的行为还是取决于函数的声明类型。在JavaScript中常见的声明类型有以下几种方法：</li></ul><p>函数声明类型对函数代码的影响只是轻微的。重要的是函数如何与外部组件交互功能（比如外部作用域、闭包、对象自身拥有的方法等）和调用方式（普通函数调用、方法调用和构造函数调用等）。</p><p>例如，你需要通过this在一个函数调用封闭的下下文（即this从外部函数继承过来）。最好的选择是使用箭头函数，很清楚的提供了必要的下下文。</p><p>比如下面示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Names</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">constructor</span> (names) &#123;</span><br><span class="line">        <span class="built_in">this</span>.names = names;</span><br><span class="line">    &#125;</span><br><span class="line">    contains(names) &#123;</span><br><span class="line">        <span class="keyword">return</span> names.every(<span class="function">(<span class="params">name</span>) =&gt;</span> <span class="built_in">this</span>.names.indexOf(name) !== <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> countries = <span class="keyword">new</span> Names([<span class="string">&#x27;UK&#x27;</span>, <span class="string">&#x27;Italy&#x27;</span>, <span class="string">&#x27;Germany&#x27;</span>, <span class="string">&#x27;France&#x27;</span>]);  </span><br><span class="line">countries.contains([<span class="string">&#x27;UK&#x27;</span>, <span class="string">&#x27;Germany&#x27;</span>]); <span class="comment">// =&gt; true  </span></span><br><span class="line">countries.contains([<span class="string">&#x27;USA&#x27;</span>, <span class="string">&#x27;Italy&#x27;</span>]);  <span class="comment">// =&gt; false  </span></span><br></pre></td></tr></table></figure><p>箭头函数传给.every()的this（一个替代Names类）其实就是一个contains()方法。使用一个箭头(=&gt;)来声明一个函数是最适当的声明方式，特别是在这个案例中，上下文需要继承来自外部的方法.contains()。</p><p>如果试图使用一个函数表达式来调用.every()，这将需要更多的手工去配置上下文。有两种方式，第一种就是给.every(function(){…}, this)第二个参数，来表示上下文。或者在function(){…}.bind(this)使用.bind()作为回调函数。这是额外的代码，而箭头函数提供的上下文透明度更容易让人理解。</p><p>这篇文章介绍了如何在JavaScript中声明一个函数的六种方法。每一种类型都将会通过简短代码来阐述。感偿趣？</p><h2 id="函数声明-Function-declaration"><a href="#函数声明-Function-declaration" class="headerlink" title="函数声明(Function declaration)"></a>函数声明(Function declaration)</h2><p>函数声明通过关键词function来声明，关键词后面紧跟的是函数的名称，名称后面有一个小括号(()),括号里面放置了函数的参数(para1,…,paramN)和一对大括号{…}，函数的代码块就放在这个大括号内。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span><span class="params">([param,[, param,[<span class="rest_arg">..., param</span>]]])</span> </span>&#123;</span><br><span class="line">   [statements]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看一个函数声明的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function declaration</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEven</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">isEven(<span class="number">24</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">isEven(<span class="number">11</span>); <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><p>function isEven(num) {…}是一个函数声明，定义了一个isEven函数。用来判断一个数是不是偶数。</p><p>函数声明创建了一个变量，在当前作用域，这个变量就是函数的名称，而且是一个函数对象。这个函数变量存在变量生命提升，它会提到当前作用域的顶部，也就是说，在函数声明之前可以调用。</p><p>函数声明创建的函数已经被命名，也就是说函数对的name属性就是他声明的名称。在调试或者错误信息阅读的时候，其很有用。</p><p>下面的示例，演示了这些属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Hoisted variable</span></span><br><span class="line"><span class="built_in">console</span>.log(hello(<span class="string">&#x27;Aliens&#x27;</span>)); <span class="comment">// =&gt; &#x27;Hello Aliens!&#x27;</span></span><br><span class="line"><span class="comment">// Named function</span></span><br><span class="line"><span class="built_in">console</span>.log(hello.name); <span class="comment">// =&gt; &#x27;hello&#x27;</span></span><br><span class="line"><span class="comment">// Variable holds the function object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> hello); <span class="comment">// =&gt; &#x27;function&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数声明function hello(name) {…}创建了一个hello变量，并且提升到当前作用域最顶部。hello变量是一个函数对象，以及hello.name包括了函数的名称hello。</p><h2 id="一个普通函数"><a href="#一个普通函数" class="headerlink" title="一个普通函数"></a>一个普通函数</h2><p>函数声明匹配的情况应该是创建一个普通函数。普通的意思意味着你声明的函数只是一次声明，但在后面可以多次调用它。它下的示例就是最基本的使用场景：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">5</span>, <span class="number">6</span>); <span class="comment">// =&gt; 11</span></span><br><span class="line">([<span class="number">3</span>, <span class="number">7</span>]).reduce(sum); <span class="comment">// =&gt; 10</span></span><br></pre></td></tr></table></figure><p>因为函数声明在当前作用域内创建了一个变量，其除了可以当作普通函数调用之外，还常用于递归或分离的事件侦听。函数表达式或箭头函数是无法创建绑定函数名称作为函数变量。</p><p>下面的示例演示了一递归的阶乘计算：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">4</span>); <span class="comment">// =&gt; 24</span></span><br></pre></td></tr></table></figure><p>有关于阶乘(Factorial)相关的详细介绍，可以点击这里。</p><p>在factorial()函数做递归计算时调用了开始声明的函数，将函数当作一个变量：factorial(n - 1)。当然也可以使用一个函数表达式，将其赋值给一个普能的变量，比如:var factorial = function (n) {…}。但函数声明function factorial(n)看起来更紧凑（不需要var和=）。</p><p>函数声明的一个重要属性是它的提升机制。它允许在相同的作用域范围内之前使用声明的函数。提升机制在很多情况下是有用的。例如，当你一个脚本内先看到了被调用的函数，但又没有仔细阅读函数的功能。而函数的功能实现可以位于下面的文件，你甚至都不用滚动代码。</p><p>你可以在这里了解函数声明的提升机制。</p><h2 id="与函数表达式区别"><a href="#与函数表达式区别" class="headerlink" title="与函数表达式区别"></a>与函数表达式区别</h2><p>函数声明和函数表达式很容易混淆。他们看起来非常相似，但他们具有不同的属性。</p><p>一个容易记住的规则：函数声明总是以function关键词开始，如果不是，那它就是一个函数表达式。</p><p>下面就是一个函数声明的示例，声明是以function关键词开始：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Function declaration: starts with &quot;function&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNil</span>(<span class="params">value</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> value == <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数表达式不是以function关键词开始（目前都一般出现在代码的中间地方）：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">Function</span> <span class="title">expression:</span> starts <span class="keyword">with</span> <span class="string">&quot;var&quot;</span></span><br><span class="line">var isTruthy = <span class="keyword">function</span>(value) &#123;  </span><br><span class="line">    <span class="keyword">return</span> !!value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// <span class="keyword">Function</span> <span class="title">expression:</span> an argument for .filter()</span><br><span class="line">var numbers = ([1, false, 5]).filter(<span class="keyword">function</span>(item) &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="type">typeof</span> item === <span class="symbol">&#x27;number</span>&#x27;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// <span class="keyword">Function</span> <span class="title">expression</span> (IIFE): starts <span class="keyword">with</span> <span class="string">&quot;(&quot;</span></span><br><span class="line">(<span class="keyword">function</span> <span class="title">messageFunction</span>(message) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">message</span> + &#x27; World!&#x27;;</span><br><span class="line">&#125;)(<span class="symbol">&#x27;Hello</span>&#x27;);</span><br></pre></td></tr></table></figure><h2 id="条件中的函数声明"><a href="#条件中的函数声明" class="headerlink" title="条件中的函数声明"></a>条件中的函数声明</h2><p>当函数声明出现if、for或while这样的条件语句块{…}时，在一些JavaScript环境内可能会抛出一个引用错误。让我们来看看在严格模式下，函数声明出现在一个条件语句块中，看看会发生什么。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">ok</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;true ok&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">ok</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;false ok&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> ok === <span class="string">&#x27;undefined&#x27;</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="built_in">console</span>.log(ok()); <span class="comment">// Throws &quot;ReferenceError: ok is not defined&quot;</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>当调用ok()函数时，JavaScript抛出一个异常错误”ReferenceError: ok is not defined”,因为函数声明出现在一个条件语句块内。注意，这种情况适用于非严格模式环境下，这让人更感到困惑。</p><p>一般来说，在这样的情况之下，当一个函数应该创建在基于某些条件内时，应该使用一个函数表达式，而不应该使用函数声明。比如下面这个示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> ok;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        ok = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;true ok&#x27;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ok = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;false ok&#x27;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> ok === <span class="string">&#x27;function&#x27;</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="built_in">console</span>.log(ok()); <span class="comment">// =&gt; &#x27;true ok&#x27;</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>因为函数是一个普通对象，根据不同的条件，将其分配给一个变量，是一个不错的选择。调用ok()函数也能正常工作，不会抛出任何错误。</p><h2 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h2><p>函数表达式是由一个function关键词，紧随其后的是一个可选的函数名，一串参数(para1,…,paramN)放在小括号内和代码主体放在大括号内{…}。</p><p>一些函数表达式的使用方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>) </span>&#123; <span class="comment">// Function expression  </span></span><br><span class="line">    <span class="keyword">return</span> array.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> methods = &#123;  </span><br><span class="line">    numbers: [<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">    sum: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// Function expression</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.numbers.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">acc, num</span>) </span>&#123; <span class="comment">// func. expression</span></span><br><span class="line">            <span class="keyword">return</span> acc + num;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">count([<span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>]); <span class="comment">// =&gt; 3  </span></span><br><span class="line">methods.sum();    <span class="comment">// =&gt; 14  </span></span><br></pre></td></tr></table></figure><p>函数表达式创建了一个函数对象，可以用在不同的情况下：</p><ul><li>当作一个对象赋值给一个变量count = function(…) {…}</li><li>在一个对象上创建一个方法sum: function() {…}</li><li>当作一个回调函数.reduce(function(…) {…})<br>函数表达式在JavaScript中经常使用。大多数的时候，开发人员处理这种类型的函数，喜欢使用箭头函数。</li></ul><h2 id="命名函数表达式"><a href="#命名函数表达式" class="headerlink" title="命名函数表达式"></a>命名函数表达式</h2><p>当函数没有一个名称（名称属性是一个空字符串）时这个函数是一个匿名函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getType = <span class="function"><span class="keyword">function</span>(<span class="params">variable</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> variable;</span><br><span class="line">&#125;;</span><br><span class="line">getType.name <span class="comment">// =&gt; &#x27;&#x27; </span></span><br></pre></td></tr></table></figure><p>getType就是一个匿名函数，其getType.name的值为’’。</p><p>当表达式指定了一个名称时，这就是一个命名函数表达式。它和简单的函数表达式相比具有一些额外的属性。</p><ul><li>创建一个命名函数，其name属性就是函数名</li><li>在函数体中具有和函数对象相同名称的一个变量<br>我们使用上面的例子，不同的是在函数表达式内指定了一个名称:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getType = <span class="function"><span class="keyword">function</span> <span class="title">funName</span>(<span class="params">variable</span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> funName === <span class="string">&#x27;function&#x27;</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> variable;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getType(<span class="number">3</span>));                    <span class="comment">// =&gt; &#x27;number&#x27;  </span></span><br><span class="line"><span class="built_in">console</span>.log(getType.name);                  <span class="comment">// =&gt; &#x27;funName&#x27;  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> funName === <span class="string">&#x27;function&#x27;</span>); <span class="comment">// =&gt; false</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funName</span>(<span class="params">variable</span>) </span>&#123;...&#125;是一个命名函数表达式。在函数作用范围内存一个funName变量。函数对象的name属性就是函数的名称funName。</span><br></pre></td></tr></table></figure><h2 id="支持命名函数表达式"><a href="#支持命名函数表达式" class="headerlink" title="支持命名函数表达式"></a>支持命名函数表达式</h2>当变量赋值时使用一个函数表达式var fun = function() {}，很多引擎可以推断这个变量的函数名。回调时常常给其传递的是一个匿名函数表达式，并没有存储到变量中，所以引擎不能确定它的名字。</li></ul><p>在很多情况之下，使用命名函数和避免匿名函数似乎是很在理的。而且这也会带来一系列的好处：</p><ul><li>在调试时，错误信息和调用堆栈时使用函数名能显示更详细的信息</li><li>调试时更舒服，可以减少anonoymous堆栈的名字出现的次数</li><li>函数名有助于快速理解其功能</li><li>在函数递归调用的范围内或事件监听时可以按名称来访问函数</li></ul><h2 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h2><p>方法定义可以在object literals和ES6 class时定义。可以使用一个函数的名称，并紧随其后跟一对小括号放置参数列表(para1,…,paramN)和函数主体代码放在一个大括内{…}。</p><p>下面的示例是基于object literals上使用方法定义函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> collection = &#123;  </span><br><span class="line">    items: [],</span><br><span class="line">    add(...items) &#123;</span><br><span class="line">        <span class="built_in">this</span>.items.push(...items);</span><br><span class="line">    &#125;,</span><br><span class="line">    get(index) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">collection.add(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;PHP&#x27;</span>);  </span><br><span class="line">collection.get(<span class="number">1</span>) <span class="comment">// =&gt; &#x27;Java&#x27;</span></span><br></pre></td></tr></table></figure><p>add()和get()方法在collection对象使用方法定义。这些方法可以像这样调用collection.add(…)和collection.get(…)。</p><p>方法定义和传统的属性定义有点类似，通一个冒号:把名称和函数表达式连接在一起，比如add:function(…) {…}。</p><ul><li>更短的语法更易读和写</li><li>方法定义创建命名函数，和函数表达式刚好相反。有利于用于调试<br>注意，使用class语法需要短形式方法来声明：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    getMessage(message) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name + message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sun = <span class="keyword">new</span> Star(<span class="string">&#x27;Sun&#x27;</span>);  </span><br><span class="line">sun.getMessage(<span class="string">&#x27; is shining&#x27;</span>) <span class="comment">// =&gt; &#x27;Sun is shining&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性名和方法"><a href="#计算属性名和方法" class="headerlink" title="计算属性名和方法"></a>计算属性名和方法</h2>ES6中增加了一个很好的特性：在object literals和class中可以计算属性。</li></ul><p>计算属性的方法和[methodNmae(){…}]略有不同，其定义的方法这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addMethod = <span class="string">&#x27;add&#x27;</span>,  </span><br><span class="line">    getMethod = <span class="string">&#x27;get&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> collection = &#123;  </span><br><span class="line">    items: [],</span><br><span class="line">    [addMethod](...items) &#123;</span><br><span class="line">        <span class="built_in">this</span>.items.push(...items);</span><br><span class="line">    &#125;,</span><br><span class="line">    [getMethod](index) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.items[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">collection[addMethod](<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;PHP&#x27;</span>);  </span><br><span class="line">collection[getMethod](<span class="number">1</span>) <span class="comment">// =&gt; &#x27;Java&#x27;  </span></span><br></pre></td></tr></table></figure><p><a href="...">addMethod</a> {…} 和 <a href="...">getMethod</a> {…}使用了计算属性名快速方法声明。</p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数的定义是使用一对小括号，括号内是一系列的参数(param1,param2,…,paramN),后面紧跟=&gt;符号和{…}，代码主体放置在这对大括号内。</p><p>当箭头函数只有一个参数时，可以省略这对小括号，另外它只包含一个声明时，大括号都可以省略。</p><p>下面的示例就是一个箭头函数的基本用法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> absValue = <span class="function">(<span class="params"><span class="built_in">number</span></span>) =&gt;</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">number</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="built_in">number</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line">absValue(<span class="number">-10</span>); <span class="comment">// =&gt; 10  </span></span><br><span class="line">absValue(<span class="number">5</span>);   <span class="comment">// =&gt; 5</span></span><br></pre></td></tr></table></figure><p>absValue是一个箭头函数，这个函数主要功能就是计算一个数的绝对值。</p><p>函数声明使用箭头函数，其中=&gt;具有以下属性：</p><ul><li>箭头函数不创建执行自己的上下文（函数表达式或函数声明式相反，创建不创建取决于this的调用）</li><li>箭头函数是一个匿名函数：name是一个空字符串’’（函数声明式相反，它有一个名字）</li><li>arguments对象不可使用箭头函数（与其它声明类型相反，其他类型提供arguments对象）<h2 id="Context-transparency"><a href="#Context-transparency" class="headerlink" title="Context transparency"></a>Context transparency</h2>this关键词的使用在JavaScript中让很多同学都感到困惑。(这篇文章详细介绍了this关键词的使用)。</li></ul><p>因为函数创建了自己的可执行的上下文(execution context)，这也造成一般情况很难确定this所指。</p><p>ES6引用箭头函数改善了这种用法（context lexically）。这是一个很好的特性，因为从现在开始函数需要封闭的上下文时没有必要使用.bind(this)或者var self = this。</p><p>来看一个示例，看this如何继承外部函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Numbers &#123;  </span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">array</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.array = array;</span><br><span class="line">    &#125;</span><br><span class="line">    addNumber(<span class="built_in">number</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">number</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.array.push(<span class="built_in">number</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params"><span class="built_in">number</span></span>) =&gt;</span> &#123; </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span> === numbersObject); <span class="comment">// =&gt; true</span></span><br><span class="line">            <span class="built_in">this</span>.array.push(<span class="built_in">number</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> numbersObject = <span class="keyword">new</span> Numbers([]);  </span><br><span class="line">numbersObject.addNumber(<span class="number">1</span>);  </span><br><span class="line"><span class="keyword">var</span> addMethod = numbersObject.addNumber();  </span><br><span class="line">addMethod(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(numbersObject.array); <span class="comment">// =&gt; [1, 5]</span></span><br></pre></td></tr></table></figure><p>Numbers类有一个数字数组，并且提供了一个addNumber()方法，将新数据插入到这个数组中。</p><p>当addNumber()不带任何参数被调用时，则返回一个闭包，允许插入新的数据。这个闭包是一个箭头函数，它的this就相当于numbersObject。因为其上下文意思取自addNumbers()方法。</p><p>如果没有箭头函数，那么需要我们自己手动去修复。这也意味着，要添加.bind()方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">number</span>) </span>&#123; </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span> === numbersObject); <span class="comment">// =&gt; true</span></span><br><span class="line">      <span class="built_in">this</span>.array.push(number);</span><br><span class="line">    &#125;.bind(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>或者将上下文(context)存给一个变量var self = this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line">    <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">number</span>) </span>&#123; </span><br><span class="line">      <span class="built_in">console</span>.log(self === numbersObject); <span class="comment">// =&gt; true</span></span><br><span class="line">      self.array.push(number);</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>context transparency这个属性可以让你在一个封闭的环境内任意使用this。</p><h2 id="短回调"><a href="#短回调" class="headerlink" title="短回调"></a>短回调</h2><p>前面也说过了，当创建的箭头函数只有一个参数，或者主体只有一个声明时，小括号()和花括号{}都可以省去。这有助于创建一个非常短的回调函数。</p><p>让我们创建一个函数，如果数组只有0这个元素，将它找出来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">0</span>];  </span><br><span class="line">numbers.some(<span class="function"><span class="params">item</span> =&gt;</span> item === <span class="number">0</span>); <span class="comment">// =&gt; true </span></span><br></pre></td></tr></table></figure><p>item =&gt; item === 0是一个箭头函数，它看上去非常简单。</p><p>有时候嵌套短的箭头函数会让代码阅读起来增加困难。所以最方便的方式是当这它是一个回调函数(没有嵌套)可以使用短的箭头函数方式。如果有必要，添加花括号之来，这样有利于代码的阅读。</p><h2 id="函数生成器"><a href="#函数生成器" class="headerlink" title="函数生成器"></a>函数生成器</h2><p>生成函数在JavaScript中会返回一个Generator对象。其语法类似于函数表达式、函数声明式和方法声明，不同的是，它需要在function后添加一个*符号。</p><p>生成器函数可以按以下这些方式来声明函数：</p><p>函数声明function* <name>():</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">indexGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">yield</span> index++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = indexGenerator();</span><br><span class="line"><span class="built_in">console</span>.log(g.next().value); <span class="comment">// =&gt; 0</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next().value); <span class="comment">// =&gt; 1</span></span><br></pre></td></tr></table></figure><p>函数表达式function* ():</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> indexGenerator = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">yield</span> index++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> g = indexGenerator();  </span><br><span class="line"><span class="built_in">console</span>.log(g.next().value); <span class="comment">// =&gt; 0  </span></span><br><span class="line"><span class="built_in">console</span>.log(g.next().value); <span class="comment">// =&gt; 1 </span></span><br></pre></td></tr></table></figure><p>方法生成*<name>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;  </span><br><span class="line">    *indexGenerator() &#123;</span><br><span class="line">        <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">yield</span> index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = obj.indexGenerator();  </span><br><span class="line"><span class="built_in">console</span>.log(g.next().value); <span class="comment">// =&gt; 0  </span></span><br><span class="line"><span class="built_in">console</span>.log(g.next().value); <span class="comment">// =&gt; 1  </span></span><br></pre></td></tr></table></figure><p>上面三种方式生成的函数都会返回一个生成器对象g。然后g可以生成一系列的数字。</p><h2 id="函数构造器-new-Function"><a href="#函数构造器-new-Function" class="headerlink" title="函数构造器: new Function"></a>函数构造器: new Function</h2><p>在JavaScript函数中第一个类(class object)对象: 函数是一个普通的对象类型是function。</p><p>这种声明的方式创建相同的函数对象类型，来看一个示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum1</span>(<span class="params">a, b</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sum2 = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sum3 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> sum1 === <span class="string">&#x27;function&#x27;</span>); <span class="comment">// =&gt; true  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> sum2 === <span class="string">&#x27;function&#x27;</span>); <span class="comment">// =&gt; true  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> sum3 === <span class="string">&#x27;function&#x27;</span>); <span class="comment">// =&gt; true  </span></span><br></pre></td></tr></table></figure><p>函数对象类型有一个构造器(constructor):Function。</p><p>当Function当作构造器(constructor)new Function(arg1,arg2,…,argN,bodyString),那么Function 构造器会创建一个新的 Function 对象(new Function)。其中参数arg1,arg2,…,argN会传递给构造器(constructor)成为新函数的参数，而且最后一个参数bodyString用作函数体代码。</p><p>来看一个示例，创建一个函数，求两个数的和：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberA = <span class="string">&#x27;numberA&#x27;</span>, numberB = <span class="string">&#x27;numberB&#x27;</span>;  </span><br><span class="line"><span class="keyword">var</span> sumFunction = <span class="keyword">new</span> <span class="built_in">Function</span>(numberA, numberB,  </span><br><span class="line">   <span class="string">&#x27;return numberA + numberB&#x27;</span></span><br><span class="line">);</span><br><span class="line">sumFunction(<span class="number">10</span>, <span class="number">15</span>) <span class="comment">// =&gt; 25  </span></span><br></pre></td></tr></table></figure><p>sumFunction创建的Function构造器调用了numberA和numberB两个参数，并且在函数主体内执行return numberA + numberB。</p><p>这种方式创建的函数不能访问当前的作用域，因为没办法创建闭包。他们总是在全局作用域内创建的。</p><p>一个可能就用new Function的最佳方式是浏览器或NodeJs脚本访问一个全局对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">global</span> = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;return this&#x27;</span>)();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">global</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="built_in">window</span>);   <span class="comment">// =&gt; false</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="哪种方式最好"><a href="#哪种方式最好" class="headerlink" title="哪种方式最好"></a>哪种方式最好</h2><p>没有孰好孰坏，函数的声明类型的决定要视实际情况而定。但有一些规则还是值得大家一起遵循。</p><p>如果要在一个闭包内使用this，那么箭头函数是一个很好的解决方案。另外回调函数是一个简短声明时，箭头函数也是一个很好的选择，因为它的代码短。</p><p>当在object literals上需要一个更短的语法时，方法声明是可取的。</p><p>new Function这种方法一般不用来声明函数。主要因为它存在很多问题。</p><p>我认为这篇文章另一个作用是让大家写出更具可读性的代码，和减少函数使用的bug。因为他们像细胞一样存在任何一个应用程序当中。</p>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript创建对象的7种方法</title>
      <link href="/2019/10/05/Javascript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%847%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2019/10/05/Javascript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%847%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>JavaScript创建对象的方式有很多，通过Object构造函数或对象字面量的方式也可以创建单个对象，显然这两种方式会产生大量的重复代码，并不适合量产。接下来介绍七种非常经典的创建对象的方式，他们也各有优缺点</p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">  o.name = name</span><br><span class="line">  o.job = job</span><br><span class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = createPerson(‘Jiang’, ‘student’)</span><br><span class="line"><span class="keyword">var</span> person2 = createPerson(‘X’, ‘Doctor’)</span><br></pre></td></tr></table></figure><p>可以无数次调用这个工厂函数，每次都会返回一个包含两个属性和一个方法的对象</p><p>工厂模式虽然解决了创建多个相似对象的问题，但是没有解决对象识别问题，即不能知道一个对象的类型</p><h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, job</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.job = job</span><br><span class="line">  <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(‘Jiang’, ‘student’)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(‘X’, ‘Doctor’)</span><br></pre></td></tr></table></figure><p>没有显示的创建对象，使用new来调用这个构造函数，使用new后会自动执行如下操作</p><ul><li>创建一个新对象</li><li>这个新对象会被执行[[prototype]]链接</li><li>这个新对象会绑定到函数调用的this</li><li>返回这个对象</li></ul><p>使用这个方式创建对象可以检测对象类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">person1 <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br><span class="line">person1 <span class="keyword">instanceof</span> Person <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>但是使用构造函数创建对象，每个方法都要在每个实例上重新创建一次</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = ‘Jiang’</span><br><span class="line">Person.prototype.job = ‘student’</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure><p>将信息直接添加到原型对象上。使用原型的好处是可以让所有的实例对象共享它所包含的属性和方法，不必在构造函数中定义对象实例信息。</p><p>原型是一个非常重要的概念，在一篇文章看懂proto和prototype的关系及区别中讲的非常详细</p><p>更简单的写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  name: ‘jiang’,</span><br><span class="line">  job: ‘student’,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure><p>将Person.prototype设置为等于一个以对象字面量形式创建的对象，但是会导致.constructor不在指向Person了。</p><p>使用这种方式，完全重写了默认的Person.prototype对象，因此 .constructor也不会存在这里</p><p>Person.prototype.constructor === Person  // false<br>如果需要这个属性的话，可以手动添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>：Person</span><br><span class="line">  name: ‘jiang’,</span><br><span class="line">  job: ‘student’,</span><br><span class="line">  sayName: function() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过这种方式还是不够好，应为constructor属性默认是不可枚举的，这样直接设置，它将是可枚举的。所以可以时候，Object.defineProperty方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(Person.prototype, ‘<span class="keyword">constructor</span>’, &#123;</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  value: Person</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>缺点:</p><p>使用原型，所有的属性都将被共享，这是个很大的优点，同样会带来一些缺点</p><p>原型中所有属性实例是被很多实例共享的，这种共享对于函数非常合适。对于那些包含基本值的属性也勉强可以，毕竟实例属性可以屏蔽原型属性。但是引用类型值，就会出现问题了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  name: ‘jiang’,</span><br><span class="line">  friends: [‘Shelby’, ‘Court’]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person()</span><br><span class="line">person1.friends.push(‘Van’)</span><br><span class="line"><span class="built_in">console</span>.log(person1.friends) <span class="comment">//[“Shelby”, “Court”, “Van”]</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.friends) <span class="comment">//[“Shelby”, “Court”, “Van”]</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.friends === person2.friends) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>friends存在与原型中，实例person1和person2指向同一个原型，person1修改了引用的数组，也会反应到实例person2中</p><h3 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h3><p>这是使用最为广泛、认同度最高的一种创建自定义类型的方法。它可以解决上面那些模式的缺点</p><p>使用此模式可以让每个实例都会有自己的一份实例属性副本，但同时又共享着对方法的引用</p><p>这样的话，即使实例属性修改引用类型的值，也不会影响其他实例的属性值了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.friends = [‘Shelby’, ‘Court’]</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person()</span><br><span class="line">person1.friends.push(‘Van’)</span><br><span class="line"><span class="built_in">console</span>.log(person1.friends)  <span class="comment">//[“Shelby”, “Court”, “Van”]</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.friends) <span class="comment">// [“Shelby”, “Court”]</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.friends === person2.friends) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h3><p>动态原型模式将所有信息都封装在了构造函数中，初始化的时候，通过检测某个应该存在的方法时候有效，来决定是否需要初始化原型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, job</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">  <span class="built_in">this</span>.job = job</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">this</span>.sayName !== ‘<span class="function"><span class="keyword">function</span>’) </span>&#123;</span><br><span class="line">    Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(‘Jiang’, ‘Student’)</span><br><span class="line">person1.sayName()</span><br></pre></td></tr></table></figure><p>只有在sayName方法不存在的时候，才会将它添加到原型中。这段代码只会初次调用构造函数的时候才会执行。</p><p>此后原型已经完成初始化，不需要在做什么修改了</p><p>这里对原型所做的修改，能够立即在所有实例中得到反映</p><p>其次，if语句检查的可以是初始化之后应该存在的任何属性或方法，所以不必用一大堆的if语句检查每一个属性和方法，只要检查一个就行</p><h3 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h3><p>这种模式的基本思想就是创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后再返回新建的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">  o.name = name</span><br><span class="line">  o.job = job</span><br><span class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(‘Jiang’, ‘student’)</span><br><span class="line">person1.sayName()</span><br></pre></td></tr></table></figure><p>这个模式，除了使用new操作符并把使用的包装函数叫做构造函数之外，和工厂模式几乎一样</p><p>构造函数如果不返回对象，默认也会返回一个新的对象，通过在构造函数的末尾添加一个return语句，可以重写调用构造函数时返回的值</p><h3 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h3><p>首先明白稳妥对象指的是没有公共属性，而且其方法也不引用this。</p><p>稳妥对象最适合在一些安全环境中（这些环境会禁止使用this和new），或防止数据被其他应用程序改动时使用</p><p>稳妥构造函数模式和寄生模式类似，有两点不同:一是创建对象的实例方法不引用this，而是不使用new操作符调用构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">  o.name = name</span><br><span class="line">  o.job = job</span><br><span class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = Person(‘Jiang’, ‘student’)</span><br><span class="line">person1.sayName()</span><br></pre></td></tr></table></figure><p>和寄生构造函数模式一样，这样创建出来的对象与构造函数之间没有什么关系，instanceof操作符对他们没有意义</p>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript混淆、压缩、加密</title>
      <link href="/2019/10/05/Javascript%E6%B7%B7%E6%B7%86%E3%80%81%E5%8E%8B%E7%BC%A9%E3%80%81%E5%8A%A0%E5%AF%86/"/>
      <url>/2019/10/05/Javascript%E6%B7%B7%E6%B7%86%E3%80%81%E5%8E%8B%E7%BC%A9%E3%80%81%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1-关于三者的定义与区别"><a href="#1-关于三者的定义与区别" class="headerlink" title="1.关于三者的定义与区别"></a>1.关于三者的定义与区别</h2><p><strong>压缩</strong>：删除 Javascript 代码中所有注释、跳格符号、换行符号及无用的空格，从而压缩 JS 文件大小，优化页面加载速度。</p><p><strong>混淆</strong>：经过编码将变量和函数原命名改为毫无意义的命名（如function(a,b,c,e,g)等），以防止他人窥视和窃取 Javascript 源代码，也有一定压缩效果。</p><p><strong>加密</strong>：一般用eval方法加密，效果与混淆相似，也做到了压缩的效果。</p><p>从定义中可以看出，压缩的主要目的是消除注释等无用字符，达到精简js代码，减小js文件大小的目的，这也是页面优化的一种方式；而混淆和加密的目的比较接近，都是为了防止他人直接查看源码，对代码（如重要的api等）起保护作用，但这也只是增加了阅读代码的代价，也就是所谓的防君子不防小人。但是当混淆和加密联合使用时，如先混淆在加密（或者先加密再混淆）时，破解时间就会增加。关于js的加密，可以参考这篇文章：<a href="http://www.cnblogs.com/top5/archive/2009/08/07/1540860.html">http://www.cnblogs.com/top5/archive/2009/08/07/1540860.html</a></p><h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2.示例"></a>2.示例</h2><p>下面以更直观的方式来体会一下这四种方式（压缩、混淆、加密、混淆&amp;加密）的不同。</p><p>源js代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这个是一个类 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xx</span>(<span class="params">num, str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//说明</span></span><br><span class="line">    <span class="keyword">var</span> a = num;</span><br><span class="line">    <span class="built_in">this</span>.aa = a;</span><br><span class="line">    <span class="built_in">this</span>.bb = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;alert(str);&#125;</span><br><span class="line">    <span class="built_in">this</span>.cc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">document</span>.title = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.yy = <span class="keyword">new</span> yy();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">xxf</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;xxf&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> ((<span class="regexp">/\&#123;\d+\&#125;/</span>).test(<span class="string">&quot;a\sdf&#123;2&#125;ab&quot;</span>))</span><br><span class="line">            alert(<span class="string">&quot;&#123;\\d&#125; is match!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xx.prototype.dd = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;dd&quot;</span>);</span><br><span class="line">    a.yy.ll();</span><br><span class="line">    <span class="keyword">var</span> fnx = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.ab = i;</span><br><span class="line">        <span class="built_in">this</span>.aa = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="built_in">this</span>.ab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> f1 = <span class="keyword">new</span> fnx(<span class="number">1</span>);</span><br><span class="line">    f1.aa();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yy</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;yy&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">yy.prototype.ll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;yyll&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> xx(<span class="number">100</span>, <span class="string">&quot;hello&quot;</span>), b = <span class="keyword">new</span> xx(<span class="number">0</span>, <span class="string">&quot;ttyp&quot;</span>);</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;a.aa=20&quot;</span>);</span><br><span class="line">a.bb();</span><br><span class="line">b.dd();</span><br><span class="line">alert(a.aa);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> k = <span class="number">9</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kk</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> k = <span class="number">0</span>;</span><br><span class="line">    alert(k);</span><br><span class="line">&#125;</span><br><span class="line">kk();</span><br><span class="line">alert(k);</span><br><span class="line"><span class="comment">//输入结果alert:&quot;yy&quot;-&gt;&quot;yy&quot;-&gt;&quot;hello&quot;-&gt;&quot;dd&quot;-&gt;&quot;yyll&quot;-&gt;&quot;12&quot;-&gt;&quot;20&quot;-&gt;&quot;0&quot;-&gt;&quot;9&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（1）经过压缩后的代码如下："><a href="#（1）经过压缩后的代码如下：" class="headerlink" title="（1）经过压缩后的代码如下："></a>（1）经过压缩后的代码如下：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="function"><span class="keyword">function</span> <span class="title">xx</span>(<span class="params">num,str</span>)</span>&#123;<span class="keyword">var</span> a=num;<span class="built_in">this</span>.aa=a;<span class="built_in">this</span>.bb=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(str)&#125;;<span class="built_in">this</span>.cc=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;<span class="built_in">document</span>.title=i&#125;&#125;;<span class="built_in">this</span>.yy=<span class="keyword">new</span> yy();<span class="function"><span class="keyword">function</span> <span class="title">xxf</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">&quot;xxf&quot;</span>);<span class="keyword">if</span>((<span class="regexp">/\&#123;\d+\&#125;/</span>).test(<span class="string">&quot;a\sdf&#123;2&#125;ab&quot;</span>))alert(<span class="string">&quot;&#123;\\d&#125; is match!&quot;</span>)&#125;&#125;;xx.prototype.dd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">&quot;dd&quot;</span>);a.yy.ll();<span class="keyword">var</span> fnx=<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;<span class="built_in">this</span>.ab=i;<span class="built_in">this</span>.aa=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="built_in">this</span>.ab)&#125;&#125;;<span class="keyword">var</span> f1=<span class="keyword">new</span> fnx(<span class="number">1</span>);f1.aa()&#125;;<span class="function"><span class="keyword">function</span> <span class="title">yy</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">&#x27;yy&#x27;</span>)&#125;;yy.prototype.ll=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">&quot;yyll&quot;</span>)&#125;;<span class="keyword">var</span> a=<span class="keyword">new</span> xx(<span class="number">100</span>,<span class="string">&quot;hello&quot;</span>),b=<span class="keyword">new</span> xx(<span class="number">0</span>,<span class="string">&quot;ttyp&quot;</span>);<span class="built_in">eval</span>(<span class="string">&quot;a.aa=20&quot;</span>);a.bb();b.dd();alert(a.aa);<span class="keyword">var</span> k=<span class="number">9</span>;<span class="function"><span class="keyword">function</span> <span class="title">kk</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> k=<span class="number">0</span>;alert(k)&#125;;kk();alert(k);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>压缩后与源码相比只是少了注释、空格、换行等。</p><h4 id="（2）经过混淆后的代码如下："><a href="#（2）经过混淆后的代码如下：" class="headerlink" title="（2）经过混淆后的代码如下："></a>（2）经过混淆后的代码如下：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="function"><span class="keyword">function</span> <span class="title">xx</span>(<span class="params">d,e</span>)</span>&#123;<span class="keyword">var</span> f=d;<span class="built_in">this</span>.aa=f;<span class="built_in">this</span>.bb=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(e)&#125;;<span class="built_in">this</span>.cc=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> g=<span class="number">0</span>;g&lt;<span class="number">10</span>;g++)&#123;<span class="built_in">document</span>.title=g&#125;&#125;;<span class="built_in">this</span>.yy=<span class="keyword">new</span> yy();<span class="function"><span class="keyword">function</span> <span class="title">xxf</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">&quot;xxf&quot;</span>);<span class="keyword">if</span>((<span class="regexp">/\&#123;\d+\&#125;/</span>).test(<span class="string">&quot;a\sdf&#123;2&#125;ab&quot;</span>))alert(<span class="string">&quot;&#123;\\d&#125; is match!&quot;</span>)&#125;&#125;;xx.prototype.dd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">&quot;dd&quot;</span>);a.yy.ll();<span class="keyword">var</span> fnx=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="built_in">this</span>.ab=e;<span class="built_in">this</span>.aa=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="built_in">this</span>.ab)&#125;&#125;;<span class="keyword">var</span> d=<span class="keyword">new</span> fnx(<span class="number">1</span>);d.aa()&#125;;<span class="function"><span class="keyword">function</span> <span class="title">yy</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">&#x27;yy&#x27;</span>)&#125;;yy.prototype.ll=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="string">&quot;yyll&quot;</span>)&#125;;<span class="keyword">var</span> a=<span class="keyword">new</span> xx(<span class="number">100</span>,<span class="string">&quot;hello&quot;</span>),b=<span class="keyword">new</span> xx(<span class="number">0</span>,<span class="string">&quot;ttyp&quot;</span>);<span class="built_in">eval</span>(<span class="string">&quot;a.aa=20&quot;</span>);a.bb();b.dd();alert(a.aa);<span class="keyword">var</span> c=<span class="number">9</span>;<span class="function"><span class="keyword">function</span> <span class="title">kk</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> d=<span class="number">0</span>;alert(d)&#125;;kk();alert(c);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>混淆后除了少了注释、空格和换行等，参数也被a，b，c，d，e等字符代替，提高了阅读的难度。</p><h4 id="（3）经过加密后的代码如下："><a href="#（3）经过加密后的代码如下：" class="headerlink" title="（3）经过加密后的代码如下："></a>（3）经过加密后的代码如下：</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span> eval(function(p,a,c,k,e,d)&#123;e=function(c)&#123;return(c&lt;a?<span class="string">&quot;&quot;</span>:e(parseInt(c/a)))+((c=c%a)&gt;<span class="number">35</span>?String.fromCharCode(c+<span class="number">29</span>):c.toString(<span class="number">36</span>))&#125;;if(!&#x27;&#x27;.replace(/^/,String))&#123;while(c--)d[e(c)]=k[c]||e(c);k=[function(e)&#123;return d[e]&#125;];e=function()&#123;return&#x27;\\w+&#x27;&#125;;c=<span class="number">1</span>;&#125;;while(c--)if(k[c])p=p.replace(new RegExp(&#x27;\\b&#x27;+e(c)+&#x27;\\b&#x27;,&#x27;g&#x27;),k[c]);return p;&#125;(&#x27;<span class="number">3</span> e(o,l)&#123;<span class="number">5</span> a=o;<span class="number">6</span>.<span class="number">8</span>=a;<span class="number">6</span>.p=<span class="number">3</span>()&#123;<span class="number">4</span>(l)&#125;;<span class="number">6</span>.B=<span class="number">3</span>()&#123;A(<span class="number">5</span> i=<span class="number">0</span>;i&lt;y;i++)&#123;x.z=i&#125;&#125;;<span class="number">6</span>.<span class="number">7</span>=c <span class="number">7</span>();<span class="number">3</span> j()&#123;<span class="number">4</span>(<span class="string">&quot;j&quot;</span>);t((/\\&#123;\\d+\\&#125;/).s(<span class="string">&quot;a\\u&#123;2&#125;g&quot;</span>))<span class="number">4</span>(<span class="string">&quot;&#123;\\\\d&#125; w v!&quot;</span>)&#125;&#125;;e.r.f=<span class="number">3</span>()&#123;<span class="number">4</span>(<span class="string">&quot;f&quot;</span>);a.<span class="number">7</span>.h();<span class="number">5</span> n=<span class="number">3</span>(i)&#123;<span class="number">6</span>.g=i;<span class="number">6</span>.<span class="number">8</span>=<span class="number">3</span>()&#123;<span class="number">4</span>(<span class="number">6</span>.g)&#125;&#125;;<span class="number">5</span> m=c n(<span class="number">1</span>);m.<span class="number">8</span>()&#125;;<span class="number">3</span> <span class="number">7</span>()&#123;<span class="number">4</span>(\&#x27;<span class="number">7</span>\&#x27;)&#125;;<span class="number">7</span>.r.h=<span class="number">3</span>()&#123;<span class="number">4</span>(<span class="string">&quot;D&quot;</span>)&#125;;<span class="number">5</span> a=c e(F,<span class="string">&quot;H&quot;</span>),b=c e(<span class="number">0</span>,<span class="string">&quot;G&quot;</span>);E(<span class="string">&quot;a.8=C&quot;</span>);a.p();b.f();<span class="number">4</span>(a.<span class="number">8</span>);<span class="number">5</span> k=<span class="number">9</span>;<span class="number">3</span> q()&#123;<span class="number">5</span> k=<span class="number">0</span>;<span class="number">4</span>(k)&#125;;q();<span class="number">4</span>(k);&#x27;,<span class="number">44</span>,<span class="number">44</span>,&#x27;|||function|alert|var|this|yy|aa||||new||xx|dd|ab|ll||xxf||str|f<span class="number">1</span>|fnx|num|bb|kk|prototype|test|if|sdf|match|is|document|<span class="number">10</span>|title|for|cc|<span class="number">20</span>|yyll|eval|<span class="number">100</span>|ttyp|hello&#x27;.split(&#x27;|&#x27;),<span class="number">0</span>,&#123;&#125;))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加密后除了有混淆的作用外，有些代码被加密了，进一步提高了阅读的难度。</p><h4 id="（4）经过混淆-amp-加密后的代码如下"><a href="#（4）经过混淆-amp-加密后的代码如下" class="headerlink" title="（4）经过混淆&amp;加密后的代码如下"></a>（4）经过混淆&amp;加密后的代码如下</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">eval</span>(function(p,a,c,k,e,d)&#123;e=function(c)&#123;return(c&lt;a?<span class="string">&quot;&quot;</span>:e(parseInt(c/a)))+((c=c%a)&gt;<span class="number">35</span>?String.fromCharCode(c+<span class="number">29</span>):c.toString(<span class="number">36</span>))&#125;;if(!&#x27;&#x27;.replace(/^/,String))&#123;while(c--)d[e(c)]=k[c]||e(c);k=[function(e)&#123;return d[e]&#125;];e=function()&#123;return&#x27;\\w+&#x27;&#125;;c=<span class="number">1</span>;&#125;;while(c--)if(k[c])p=p.replace(new RegExp(&#x27;\\b&#x27;+e(c)+&#x27;\\b&#x27;,&#x27;g&#x27;),k[c]);return p;&#125;(&#x27;<span class="number">4</span> i(d,e)&#123;<span class="number">5</span> f=d;<span class="number">6</span>.<span class="number">8</span>=f;<span class="number">6</span>.p=<span class="number">4</span>()&#123;<span class="number">3</span>(e)&#125;;<span class="number">6</span>.s=<span class="number">4</span>()&#123;t(<span class="number">5</span> g=<span class="number">0</span>;g&lt;y;g++)&#123;G.F=g&#125;&#125;;<span class="number">6</span>.<span class="number">7</span>=h <span class="number">7</span>();<span class="number">4</span> l()&#123;<span class="number">3</span>(<span class="string">&quot;l&quot;</span>);x((/\\&#123;\\d+\\&#125;/).v(<span class="string">&quot;a\\u&#123;2&#125;j&quot;</span>))<span class="number">3</span>(<span class="string">&quot;&#123;\\\\d&#125; w r!&quot;</span>)&#125;&#125;;i.o.k=<span class="number">4</span>()&#123;<span class="number">3</span>(<span class="string">&quot;k&quot;</span>);a.<span class="number">7</span>.m();<span class="number">5</span> n=<span class="number">4</span>(e)&#123;<span class="number">6</span>.j=e;<span class="number">6</span>.<span class="number">8</span>=<span class="number">4</span>()&#123;<span class="number">3</span>(<span class="number">6</span>.j)&#125;&#125;;<span class="number">5</span> d=h n(<span class="number">1</span>);d.<span class="number">8</span>()&#125;;<span class="number">4</span> <span class="number">7</span>()&#123;<span class="number">3</span>(\&#x27;<span class="number">7</span>\&#x27;)&#125;;<span class="number">7</span>.o.m=<span class="number">4</span>()&#123;<span class="number">3</span>(<span class="string">&quot;E&quot;</span>)&#125;;<span class="number">5</span> a=h i(A,<span class="string">&quot;z&quot;</span>),b=h i(<span class="number">0</span>,<span class="string">&quot;B&quot;</span>);D(<span class="string">&quot;a.8=C&quot;</span>);a.p();b.k();<span class="number">3</span>(a.<span class="number">8</span>);<span class="number">5</span> c=<span class="number">9</span>;<span class="number">4</span> q()&#123;<span class="number">5</span> d=<span class="number">0</span>;<span class="number">3</span>(d)&#125;;q();<span class="number">3</span>(c);&#x27;,<span class="number">43</span>,<span class="number">43</span>,&#x27;|||alert|function|var|this|yy|aa|||||||||new|xx|ab|dd|xxf|ll|fnx|prototype|bb|kk|match|cc|for|sdf|test|is|if|<span class="number">10</span>|hello|<span class="number">100</span>|ttyp|<span class="number">20</span>|eval|yyll|title|document&#x27;.split(&#x27;|&#x27;),<span class="number">0</span>,&#123;&#125;))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-浏览器是怎么解析混淆和加密后的js代码的"><a href="#3-浏览器是怎么解析混淆和加密后的js代码的" class="headerlink" title="3.浏览器是怎么解析混淆和加密后的js代码的"></a>3.浏览器是怎么解析混淆和加密后的js代码的</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其实变量名只要是<span class="built_in">Unicode</span>字符就行了，对于js引擎来说都是一样的，只是人类觉得他们不同而已。</span><br></pre></td></tr></table></figure><h2 id="4-js压缩工具"><a href="#4-js压缩工具" class="headerlink" title="4.js压缩工具"></a>4.js压缩工具</h2><p>其实js的压缩工具网上有很多，在线和安装版的都有，文章中使用的是HDS JSObfuscator v2.13绿色版。</p><p>在线的js压缩工具：<a href="http://tool.chinaz.com/js.aspx">http://tool.chinaz.com/js.aspx</a></p><h2 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5.注意事项"></a>5.注意事项</h2><p>源js文件一定要按照规范编写，分号，注释符，var等都要规范，否则很容易出错。</p>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JsCrack 粉笔网RSA登录</title>
      <link href="/2019/10/05/JsCrack%20%E7%B2%89%E7%AC%94%E7%BD%91RSA%E7%99%BB%E5%BD%95/"/>
      <url>/2019/10/05/JsCrack%20%E7%B2%89%E7%AC%94%E7%BD%91RSA%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>1、搜关键词打断点分析 或 XHR断点后追踪调试，发现如下位置的加密</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = &#123;</span><br><span class="line">password: <span class="built_in">this</span>.encrypt(<span class="built_in">this</span>.password),</span><br><span class="line">persistent: !<span class="number">0</span>,</span><br><span class="line">app: <span class="string">&quot;web&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2、追踪this.encrypt进行调试，函数2中三段代码类似JSEncrypt的加密用法，考虑RSA加密。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数1</span></span><br><span class="line">encrypt(n) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">window</span>.encrypt(<span class="built_in">this</span>.publicKey, n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数2</span></span><br><span class="line">av.encrypt = <span class="function"><span class="keyword">function</span>(<span class="params">aG, z</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> N();</span><br><span class="line">t.setPublic(a(aG), <span class="string">&quot;10001&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ai(t.encrypt(z))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、JSEncrypt部分源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> JSEncrypt = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">JSEncrypt</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">        options = options || &#123;&#125;;</span><br><span class="line">        <span class="built_in">this</span>.default_key_size = <span class="built_in">parseInt</span>(options.default_key_size, <span class="number">10</span>) || <span class="number">1024</span>;</span><br><span class="line">        <span class="built_in">this</span>.default_public_exponent = options.default_public_exponent || <span class="string">&quot;010001&quot;</span>; <span class="comment">// 65537 default openssl public exponent for rsa key type</span></span><br><span class="line">        <span class="built_in">this</span>.log = options.log || <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// The private and public key.</span></span><br><span class="line">        <span class="built_in">this</span>.key = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Method to set the rsa key parameter (one method is enough to set both the public</span></span><br></pre></td></tr></table></figure><h2 id="扣取JS"><a href="#扣取JS" class="headerlink" title="扣取JS"></a>扣取JS</h2><p>发现JS代码有所改动，本文不打算直接利用JSEncrypt生成。<br>直接复制该文件下的全部代码，运行报错 window is undefine<br>添加：var window = {}<br>继续报错 navigator is not defined<br>继续添加 var navigator = {}</p><h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><p>尝试为一个“定义函数”末尾加上()，解析器是无法理解的，可通过下列方式转为函数表达式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">方式一</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)()</span><br><span class="line">方式二</span><br><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Encrypt RSA原理与实现</title>
      <link href="/2019/10/04/Encrypt%20RSA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/10/04/Encrypt%20RSA%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="RSA简介"><a href="#RSA简介" class="headerlink" title="RSA简介"></a>RSA简介</h2><p>RSA是第一个既能用于数据加密也能用于数字签名的算法，非对称密钥，公开密钥。</p><p><strong>加密：</strong>公钥负责加密，私钥负责解密。</p><p><strong>数字签名：</strong>私钥负责签名，公钥负责验证</p><p>1.把内容用hash函数，生成内容的摘要。</p><p>2.再用私钥对摘要进行加密，生成『数字签名』。</p><p>3.将数字签名和内容同时发给别人。</p><p>4.接收者使用公钥解密，得到摘要。在对内容进行hash函数，对比结果是否一致，防止被篡改。</p><p><strong>签名作用：</strong></p><p>a) 对签名者进行身份认证；</p><p>b) 保证信息的完整性（在交易过程中，没有被篡改）</p><p>c) 防止交易中的抵赖发生（签名者无法否认信息是由自己发出的）</p><p>   加密的功能：</p><p>a) 重点在于“数据的安全性”，可以防止数据被监听攻击。</p><h3 id="互素数："><a href="#互素数：" class="headerlink" title="互素数："></a>互素数：</h3><p>1、两个质数一定是互质数。例如，2与7、13与19。<br>2、一个质数如果不能整除另一个合数，这两个数为互质数。例如，3与10、5与 26。</p><h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理:"></a>算法原理:</h3><p>1、选取两个<strong>大素数</strong>p和q，计算n=p*q 例n = 67 * 71 = 4751转为二进制1001010010101。</p><p>2、计算欧拉函数: φ(n) = (p-1)(q-1)，</p><p>3、选取加密密钥e，其与φ(n)互素。e的常用值为3，17，65537</p><p>4、整数 d可以使得 e<em>d 除以 φ(n) 的余数为 1。e</em>d= 1 mod φ(n) ,公钥为e和n，私钥为d</p><p>5、加密消息时将其看为大整数,并分为比n小的数据分组，c = m^e mod n</p><p>6、解密密文c时，取每一个加密后的分组c并计算即，m=c^d mod n</p><p><strong>注</strong>：φ(n) 表示在小于等于 n 的正整数之中，与 n 构成互质关系的数的个数</p><p><img src="/images/17-base64/1-rsa.png" alt="逻辑图"></p><h2 id="nodejs的RSA加密"><a href="#nodejs的RSA加密" class="headerlink" title="nodejs的RSA加密"></a>nodejs的RSA加密</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> NodeRSA = <span class="built_in">require</span>(<span class="string">&#x27;node-rsa&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key = <span class="keyword">new</span> NodeRSA(&#123;<span class="attr">b</span>: <span class="number">512</span>&#125;);</span><br><span class="line">    key.setOptions(&#123;<span class="attr">encryptionScheme</span>: <span class="string">&#x27;pkcs1&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> privatePem = key.exportKey(<span class="string">&#x27;pkcs1-private-pem&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> publicPem = key.exportKey(<span class="string">&#x27;pkcs1-public-pem&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    fs.writeFile(<span class="string">&#x27;./public.pem&#x27;</span>, publicPem, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;公钥已保存！&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    fs.writeFile(<span class="string">&#x27;./private.pem&#x27;</span>, privatePem, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;私钥已保存！&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">&#x27;./public.pem&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> key = <span class="keyword">new</span> NodeRSA(data);</span><br><span class="line">        <span class="keyword">let</span> cipherText = key.encryptPrivate(text, <span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;encrypt:&#x27;</span>, cipherText);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">&#x27;./private.pem&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> key = <span class="keyword">new</span> NodeRSA(data);</span><br><span class="line">        <span class="keyword">let</span> rawText = key.decryptPublic(text, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;decrypt:&quot;</span>, rawText);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//generator();</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">encrypt(text);</span><br><span class="line"><span class="keyword">var</span> cipherText = <span class="string">&quot;kcC3naR7VPztt+5ojZAh3r4mAi++KAGnRpDqAiCYpPB5M0sJxCU0XaYWma749AuF8QTaIK+vBqJAzN4Ego/q0g==&quot;</span>;</span><br><span class="line">decrypt(cipherText);</span><br></pre></td></tr></table></figure><h2 id="Python-RSA工具类"><a href="#Python-RSA工具类" class="headerlink" title="Python RSA工具类"></a>Python RSA工具类</h2><ul><li>安装：<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> pycryptodomex</span><br></pre></td></tr></table></figure></li><li>区别：<br>pycryptodome与pyCrypto有一定的关联，在从pyCrypto迁移到pycryptodome时，可以认为简易替换。<br>pycryptodomex是PyCryptodome的一个独立版本，具有不同的命名约定;您必须使用Cryptodome，而不是使用Crypto包。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">USE_RSA</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成密钥可保存.pem格式文件</span></span><br><span class="line"><span class="string">    1024位的证书，加密时最大支持117个字节，解密时为128；</span></span><br><span class="line"><span class="string">    2048位的证书，加密时最大支持245个字节，解密时为256。</span></span><br><span class="line"><span class="string">    加密大文件时需要先用AES或者DES加密，再用RSA加密密钥，详细见文档</span></span><br><span class="line"><span class="string">    文档:https://stuvel.eu/files/python-rsa-doc/usage.html#generating-keys</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, number=<span class="number">1024</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param number: 公钥、私钥</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.pubkey, self.privkey = rsa.newkeys(number)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rsaEncrypt</span>(<span class="params">self, text</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param test: str</span></span><br><span class="line"><span class="string">        :return: bytes</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        content = text.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        crypto = rsa.encrypt(content, self.pubkey)</span><br><span class="line">        <span class="keyword">return</span> crypto</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rsaDecrypt</span>(<span class="params">self, text</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param text:bytes </span></span><br><span class="line"><span class="string">        :return: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        content = rsa.decrypt(text, self.privkey)</span><br><span class="line">        con = content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> con</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">savePem</span>(<span class="params">self, path_name, text</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param path_name: 保存路径</span></span><br><span class="line"><span class="string">        :param text: str</span></span><br><span class="line"><span class="string">        :return:bytes</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;PEM&quot;</span> <span class="keyword">in</span> path_name.upper():</span><br><span class="line">            path_name = path_name[:<span class="number">-4</span>]</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;&#123;&#125;.pem&#x27;</span>.format(path_name), <span class="string">&#x27;bw&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(text.save_pkcs1())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">readPem</span>(<span class="params">self, path_name, key_type</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param path_name: 密钥文件</span></span><br><span class="line"><span class="string">        :param key_type:类型 </span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;pubkey&#x27;</span> <span class="keyword">in</span> key_type:</span><br><span class="line">            self.pubkey = rsa.PublicKey.load_pkcs1(path_name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.privkey = rsa.PublicKey.load_pkcs1(path_name)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sign</span>(<span class="params">self, message, priv_key=None, hash_method=<span class="string">&#x27;SHA-1&#x27;</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        生成明文的哈希签名以便还原后对照</span></span><br><span class="line"><span class="string">        :param message: str</span></span><br><span class="line"><span class="string">        :param priv_key:</span></span><br><span class="line"><span class="string">        :param hash_method: 哈希的模式</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="literal">None</span> == priv_key:</span><br><span class="line">            priv_key = self.privkey</span><br><span class="line">        <span class="keyword">return</span> rsa.sign(message.encode(), priv_key, hash_method)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkSign</span>(<span class="params">self, mess, result, pubkey=None</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        验证签名：传入解密后明文、签名、公钥，验证成功返回哈希方法，失败则报错</span></span><br><span class="line"><span class="string">        :param mess: str</span></span><br><span class="line"><span class="string">        :param result: bytes</span></span><br><span class="line"><span class="string">        :param pubkey: </span></span><br><span class="line"><span class="string">        :return: str</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="literal">None</span> == pubkey:</span><br><span class="line">            pubkey = self.privkey</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = rsa.verify(mess, result, pubkey)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><p>1、PEM： 基于ASCII(Base64)的编码。OpenSSL 使用 PEM 文件格式存储证书和密钥。<br>PEM 实质上是 base64 编码的二进制内容，再进行增加或裁剪特殊字符-、n、r、begin信息、end信息等</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">BEGIN</span> <span class="comment">CERTIFICATE</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br><span class="line"><span class="comment">内容</span></span><br><span class="line"><span class="comment"></span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">END</span> <span class="comment">CERTIFICATE</span>--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></span><br></pre></td></tr></table></figure><p>2、PKCS(The Public-Key Cryptography Standards)由美国RSA公司及其合作伙伴制定的一组公钥密码学标准，其中包括证书申请、证书更新、证书作废表发布、扩展证书内容以及数字签名、数字信封的格式等方面的一系列相关协议。<br>PCKS8 的pem格式头：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//公钥</span></span><br><span class="line">-----<span class="keyword">BEGIN</span> <span class="keyword">PUBLIC</span> KEY-----</span><br><span class="line">MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKzY3F21g7UWaTcIk/ltUy4LuuHK5Hhl</span><br><span class="line"><span class="number">9</span>ZpdxDr4+WA7pNwhCzhgBKbWUa+XotUYet841I2mYPJ6+<span class="number">6</span>X32LwotF0CAwEAAQ==</span><br><span class="line">-----<span class="keyword">END</span> <span class="keyword">PUBLIC</span> KEY-----</span><br></pre></td></tr></table></figure><p>3、<a href="https://juejin.im/post/5a76d7e3f265da4e752770a3">扩展文章</a></p>]]></content>
      
      
      <categories>
          
          <category> 加密算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Encrypt Base64编码</title>
      <link href="/2019/10/04/Encrypt%20Base64%E7%BC%96%E7%A0%81/"/>
      <url>/2019/10/04/Encrypt%20Base64%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="Base64介绍"><a href="#Base64介绍" class="headerlink" title="Base64介绍"></a>Base64介绍</h2><p>1、由来<br>ASCII码中规定，0-31、128这33个字符属于控制字符，32~127这95个字符属可打印字符。</p><p>Base64被设计用来把任意序列的8位字节描述为一种不易被人直接识别的形式。本质是将二进制数据转成可打印字符数据的方案，它是可逆的。</p><p>因在网络上只能准确传输可打印字符或由于某些系统中只能使用ASCII字符，为降低不可见字符被错误的处理的风险，采用Base64编码将不可打印的二进制数据转换成可打印的字符串。</p><p>2、应用</p><p>广泛用于邮件编码、数据签名/数据校验编码以及HTML/XML复杂数据编码。</p><p>3、邮件</p><p>传统邮件规范：规定电子邮件只能使用ASCII字符。</p><p>导致三个结果：</p><ul><li>1）非英语字符都不能在电子邮件中使用；</li><li>2）电子邮件中不能插入二进制文件（如图片）；</li><li>3）电子邮件不能有附件。</li></ul><p>MIME规范进行了补充：但附件数据往往有不可见字符，例如传数图片、视频等二进制文件，同时MIME使用的不是标准Base64编码。</p><p>4、图片base64编码</p><p>前端为了减少外部资源加载，降低页面加载时间，采用base64将图片编码成字符串，直接内嵌到页面中。这种内嵌方式的实现，得益于大部分浏览器对Data URI scheme特性的支持，该特性通常用在CSS设置背景图片，其格式为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">background:url(data:文件类型;编码方式,编码后的文件内容);</span><br><span class="line">data:[&lt;mime type&gt;][;charset=&lt;charset&gt;][;&lt;encoding&gt;],&lt;encoded data&gt;</span><br><span class="line">1.  data ：协议名称；</span><br><span class="line">2.  [&lt;mime type&gt;] ：可选项，数据类型（image/png、text/plain等）</span><br><span class="line">3.  [;charset=&lt;charset&gt;] ：可选项，源文本的字符集编码方式</span><br><span class="line">4.  [;&lt;encoding&gt;] ：数据编码方式（默认US-ASCII，BASE64两种）</span><br><span class="line">5.  &lt;encoded data&gt; ：编码后的数据</span><br></pre></td></tr></table></figure><p>5、编码原理<br>表中的可打印字符包括A-Z、a-z、0-9加上+、/共64个字符，因此称为Base64编码，实际还有填充字符=来作为填充符。<br>标准Base64编码不是 url/filename safe 的，对于URL来说&amp;、/都是具有特殊含义的字符，不能将该 Base64 编码直接与url拼接或用来命名文件。<br>根据最后两位字符的不同编码又有很多变种，Base64 URL是标准Base64编码的一个变种，去除了末尾’=’将表中的“+”和“/”分别替换为“-”和“_”。<br><img src="/images/17-base64/base1.png"></p><p>Base64编码是每3个原始字符编码成4个字符，每连续6bit计算其十进制值，根据该值在上面的索引表中找到对应的字符，得到文本字符串。<br><img src="/images/17-base64/base2.png"></p><p>*若字节数不是3的倍数，则添加1个或2个零值字节。标准Base64编码通常用 = 字符来替换最后的 A，=作为Base64编码字符串结束符号。<br>如果Base64编码字符串不会相互拼接再传输，那么最后的=也可以省略。<br><img src="/images/17-base64/base3.png"></p><p>汉字本身可以有多种编码，比如gb2312、utf-8、gbk等等，每一种编码的Base64对应值都不一样，以”汉”的utf8为例E6B189。</p><h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line"><span class="comment"># - - - - - 对普通字符串进行base64编解码  - - - - - #</span></span><br><span class="line">encodeStrTest = base64.encodebytes(bytes(<span class="string">&quot;this is a test&quot;</span>, <span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">decodeStrTest = base64.decodebytes(encodeStrTest)</span><br><span class="line">print(str(decodeStrTest, <span class="string">&quot;utf8&quot;</span>))</span><br><span class="line"><span class="comment"># - - - - - 对url进行base64编解码  - - - - - #</span></span><br><span class="line">url = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">urlEncodeTest = base64.urlsafe_b64encode(bytes(url, <span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">urlDecodeTest = base64.urlsafe_b64decode(urlEncodeTest)</span><br><span class="line">print(str(urlDecodeTest, <span class="string">&quot;utf8&quot;</span>))</span><br><span class="line"><span class="comment"># - - - - -  b64.encode和b64.decode 替换+和/ - - - - - #</span></span><br><span class="line">str2 = <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line">binIO = BytesIO()</span><br><span class="line">binIO.write(bytes(str2, <span class="string">&quot;utf8&quot;</span>))</span><br><span class="line"></span><br><span class="line">encodeTest = BytesIO()</span><br><span class="line">decodeTest = BytesIO()</span><br><span class="line"><span class="comment"># 对BytesIO内的数据进行编码</span></span><br><span class="line">binIO.seek(<span class="number">0</span>)</span><br><span class="line">base64.encode(binIO, encodeTest)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对BytesIO内的数据进行解码</span></span><br><span class="line">encodeTest.seek(<span class="number">0</span>)</span><br><span class="line">base64.decode(encodeTest, decodeTest)</span><br><span class="line">print(str(decodeTest.getvalue(), <span class="string">&quot;utf8&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># - - - - - 对图片进行 Base64 编解码 - - - - - #</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_local_image</span>():</span></span><br><span class="line">    <span class="comment"># 原始图片 ==&gt; base64 编码</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;/path/alpha.png&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fin:</span><br><span class="line">        image_data = fin.read()</span><br><span class="line">        base64_data = base64.b64encode(image_data)</span><br><span class="line">        fout = open(<span class="string">&#x27;/path/base64_content.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        fout.write(base64_data)</span><br><span class="line">        fout.close()</span><br><span class="line">    <span class="comment"># base64 编码 ==&gt; 原始图片</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&#x27;/path/base64_content.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fin:</span><br><span class="line">        base64_data = fin.read()</span><br><span class="line">        ori_image_data = base64.b64decode(base64_data)</span><br><span class="line">        fout = open(<span class="string">&#x27;/path/beta.png&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        fout.write(ori_image_data)</span><br><span class="line">        fout.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 加密算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Encrypt Jsencrypt RSA</title>
      <link href="/2019/10/04/Encrypt%20Jsencrypt%20RSA/"/>
      <url>/2019/10/04/Encrypt%20Jsencrypt%20RSA/</url>
      
        <content type="html"><![CDATA[<h2 id="How-to-use-this-library"><a href="#How-to-use-this-library" class="headerlink" title="How to use this library"></a>How to use this library</h2><p>安装openssl使用命令行进行动态生成</p><p>Within your terminal (Unix based OS) type the following:</p><p><code>openssl genrsa -out rsa_1024_priv.pem 1024</code></p><p>This generates a private key, which you can see by doing the following…</p><p><code>cat rsa_1024_priv.pem #if you are on mac you can | pbcopy to copy to the clipboard</code></p><p>You can then copy and paste this in the Private Key section of the demo page.</p><p>Next, you can then get the public key by executing the following command.</p><p><code>openssl rsa -pubout -in rsa_1024_priv.pem -out rsa_1024_pub.pem</code></p><p>You can see the public key by typing…</p><p><code>cat rsa_1024_pub.pem</code></p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>jsencrypt在加密或者解密的时候需要用到密钥，所以需要先生成一对密钥：公钥（加密），私钥（解密），自身使用的是pkcs1加密方案。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;JavaScript RSA Encryption&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;http://code.jquery.com/jquery-1.8.3.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;bin/jsencrypt.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Call this code when the page is done loading.</span></span><br><span class="line">      $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Run a quick encryption/decryption when they click.</span></span><br><span class="line">        $(<span class="string">&#x27;#testme&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// Encrypt with the public key...</span></span><br><span class="line">          <span class="keyword">var</span> encrypt = <span class="keyword">new</span> JSEncrypt();</span><br><span class="line">          encrypt.setPublicKey($(<span class="string">&#x27;#pubkey&#x27;</span>).val());</span><br><span class="line">          <span class="keyword">var</span> encrypted = encrypt.encrypt($(<span class="string">&#x27;#input&#x27;</span>).val());</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Decrypt with the private key...</span></span><br><span class="line">          <span class="keyword">var</span> decrypt = <span class="keyword">new</span> JSEncrypt();</span><br><span class="line">          decrypt.setPrivateKey($(<span class="string">&#x27;#privkey&#x27;</span>).val());</span><br><span class="line">          <span class="keyword">var</span> uncrypted = decrypt.decrypt(encrypted);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Now a simple check to see if the round-trip worked.</span></span><br><span class="line">          <span class="keyword">if</span> (uncrypted == $(<span class="string">&#x27;#input&#x27;</span>).val()) &#123;</span><br><span class="line">            alert(<span class="string">&#x27;It works!!!&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">&#x27;Something went wrong....&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">&quot;privkey&quot;</span>&gt;Private Key&lt;<span class="regexp">/label&gt;&lt;br/</span>&gt;</span><br><span class="line">    &lt;textarea id=<span class="string">&quot;privkey&quot;</span> rows=<span class="string">&quot;15&quot;</span> cols=<span class="string">&quot;65&quot;</span>&gt;-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIICeQIBADANBgkqhkiG9w0BAQEFAASCAmMwggJfAgEAAoGBAMDl6LIyW/Wu0cdl</span><br><span class="line">ZMlUcBTwTJnfDv2sydVzhNP4EXQK/Cx8682SZUpcWLkqVwDc3wii69gXdNJbx+TH</span><br><span class="line">ILiI8phtCiOmVWMB/<span class="number">8</span>lch8uCQKnvrwE/xfsPbieOoeauG0a24k0bhLWUwb1t9ha5</span><br><span class="line">W1NY+gA7CiEy7hrtB<span class="comment">//y9y1BS+PvAgMBAAECgYEAhJzKd891NxcDc0B6pIqfL1Xw</span></span><br><span class="line">Y4xc4vrqGwt60rrlTNDMgs0y0zYE2rVX7Zx1CcvOrUJMP1gI4SFl8BsRnKvRktUS</span><br><span class="line">SnkDO+<span class="number">4</span>ePUe0NykW8lk6eCpzx9Awd8bPSjtTWXCgJJNS1cf45pUlEe/<span class="number">2</span>jm5BibqG</span><br><span class="line">csG3K8YDc2ficZz7otECQQDl79JA0loXNNcQJd5D/CKVKjtUK0Ks0xxLjn2YaRuk</span><br><span class="line"><span class="number">4</span>m1JW+JmtMTp2IBYTmsE64UrRhAiOvCIWP9binhKPtx3AkEA1sNRkLUpSQKCCOsB</span><br><span class="line">INiRvTtqv5BdwiJzWolD4Dm/Fz2aD6FN5NinaWgfaQ2wfL1NiCR+S0OagLBKK7fz</span><br><span class="line">NsiqSQJBAIBGPyRcdVf26XefuJRyx5QxoDF/hM3HZESedGCfWoWsr806Dl6/wA64</span><br><span class="line"><span class="number">8</span>jjRXpC7F2qhxoRiHyfhhmu6HwtEcFcCQQDM0GcoT205ILgskxp3XbLXuiOa365a</span><br><span class="line"><span class="number">54</span>oFbOUboVbZbjlP8LCdr/UwtElIYfLPc6XOUadUVfuyAO4rdXnw5DxpAkEAhG6O</span><br><span class="line">ibo8nSlcYn6Co60IIx/cARqC1J1pRMnYpB062eoLrHpRBW8G5Y8XBfETFMHU6WzY</span><br><span class="line">+SZwal49Jf9+FiG2qQ==</span><br><span class="line">-----END PRIVATE KEY-----&lt;<span class="regexp">/textarea&gt;&lt;br/</span>&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">&quot;pubkey&quot;</span>&gt;Public Key&lt;<span class="regexp">/label&gt;&lt;br/</span>&gt;</span><br><span class="line">    &lt;textarea id=<span class="string">&quot;pubkey&quot;</span> rows=<span class="string">&quot;15&quot;</span> cols=<span class="string">&quot;65&quot;</span>&gt;-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDA5eiyMlv1rtHHZWTJVHAU8EyZ</span><br><span class="line"><span class="number">3</span>w79rMnVc4TT+BF0CvwsfOvNkmVKXFi5KlcA3N8IouvYF3TSW8fkxyC4iPKYbQoj</span><br><span class="line">plVjAf/JXIfLgkCp768BP8X7D24njqHmrhtGtuJNG4S1lMG9bfYWuVtTWPoAOwoh</span><br><span class="line">Mu4a7Qf/<span class="number">8</span>vctQUvj7wIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----&lt;<span class="regexp">/textarea&gt;&lt;br/</span>&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">&quot;input&quot;</span>&gt;Text to encrypt:&lt;<span class="regexp">/label&gt;&lt;br/</span>&gt;</span><br><span class="line">    &lt;textarea id=<span class="string">&quot;input&quot;</span> name=<span class="string">&quot;input&quot;</span> type=<span class="string">&quot;text&quot;</span> rows=<span class="number">4</span> cols=<span class="number">70</span>&gt;This is a test!&lt;<span class="regexp">/textarea&gt;&lt;br/</span>&gt;</span><br><span class="line">    &lt;input id=<span class="string">&quot;testme&quot;</span> type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;Test Me!!!&quot;</span> /&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="长字符分段加解密"><a href="#长字符分段加解密" class="headerlink" title="长字符分段加解密"></a>长字符分段加解密</h2><p>由于RSA的特性，一个1024位的密钥只能加密117位字节数据，当数据量超过117位字节的时候，程序就会抛出异常。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">JSEncrypt.prototype.encryptLong = <span class="function"><span class="keyword">function</span> (<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> k = <span class="built_in">this</span>.getKey();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> lt = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> ct = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//RSA每次加密117bytes，需要辅助方法判断字符串截取位置</span></span><br><span class="line">        <span class="comment">//1.获取字符串截取点</span></span><br><span class="line">        <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">        bytes.push(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">var</span> byteNo = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> len, c;</span><br><span class="line">        len = string.length;</span><br><span class="line">        <span class="keyword">var</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            c = string.charCodeAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c &gt;= <span class="number">0x010000</span> &amp;&amp; c &lt;= <span class="number">0x10FFFF</span>) &#123;</span><br><span class="line">                byteNo += <span class="number">4</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="number">0x000800</span> &amp;&amp; c &lt;= <span class="number">0x00FFFF</span>) &#123;</span><br><span class="line">                byteNo += <span class="number">3</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="number">0x000080</span> &amp;&amp; c &lt;= <span class="number">0x0007FF</span>) &#123;</span><br><span class="line">                byteNo += <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                byteNo += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((byteNo % <span class="number">117</span>) &gt;= <span class="number">114</span> || (byteNo % <span class="number">117</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (byteNo - temp &gt;= <span class="number">114</span>) &#123;</span><br><span class="line">                    bytes.push(i);</span><br><span class="line">                    temp = byteNo;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.截取字符串并分段加密</span></span><br><span class="line">        <span class="keyword">if</span> (bytes.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bytes.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> str;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                    str = string.substring(<span class="number">0</span>, bytes[i + <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    str = string.substring(bytes[i] + <span class="number">1</span>, bytes[i + <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> t1 = k.encrypt(str);</span><br><span class="line">                ct += t1;</span><br><span class="line">            &#125;</span><br><span class="line">            ;</span><br><span class="line">            <span class="keyword">if</span> (bytes[bytes.length - <span class="number">1</span>] != string.length - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> lastStr = string.substring(bytes[bytes.length - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                ct += k.encrypt(lastStr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> hexToBytes(ct);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> t = k.encrypt(string);</span><br><span class="line">        <span class="keyword">var</span> y = hexToBytes(t);</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">JSEncrypt.prototype.decryptLong = <span class="function"><span class="keyword">function</span> (<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> k = <span class="built_in">this</span>.getKey();</span><br><span class="line">    <span class="comment">// var maxLength = ((k.n.bitLength()+7)&gt;&gt;3);</span></span><br><span class="line">    <span class="keyword">var</span> MAX_DECRYPT_BLOCK = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> ct = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> t1;</span><br><span class="line">        <span class="keyword">var</span> bufTmp;</span><br><span class="line">        <span class="keyword">var</span> hexTmp;</span><br><span class="line">        <span class="keyword">var</span> str = bytesToHex(string);</span><br><span class="line">        <span class="keyword">var</span> buf = hexToBytes(str);</span><br><span class="line">        <span class="keyword">var</span> inputLen = buf.length;</span><br><span class="line">        <span class="comment">//开始长度</span></span><br><span class="line">        <span class="keyword">var</span> offSet = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//结束长度</span></span><br><span class="line">        <span class="keyword">var</span> endOffSet = MAX_DECRYPT_BLOCK;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分段加密</span></span><br><span class="line">        <span class="keyword">while</span> (inputLen - offSet &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputLen - offSet &gt; MAX_DECRYPT_BLOCK) &#123;</span><br><span class="line">                bufTmp = buf.slice(offSet, endOffSet);</span><br><span class="line">                hexTmp = bytesToHex(bufTmp);</span><br><span class="line">                t1 = k.decrypt(hexTmp);</span><br><span class="line">                ct += t1;</span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                bufTmp = buf.slice(offSet, inputLen);</span><br><span class="line">                hexTmp = bytesToHex(bufTmp);</span><br><span class="line">                t1 = k.decrypt(hexTmp);</span><br><span class="line">                ct += t1;</span><br><span class="line">             </span><br><span class="line">            &#125;</span><br><span class="line">            offSet += MAX_DECRYPT_BLOCK;</span><br><span class="line">            endOffSet += MAX_DECRYPT_BLOCK;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ct;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Python简易实现"><a href="#Python简易实现" class="headerlink" title="Python简易实现"></a>Python简易实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Cryptodome <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> PKCS1_v1_5 <span class="keyword">as</span> Cipher_pkcs1_v1_5</span><br><span class="line"><span class="keyword">from</span> Cryptodome.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 伪随机数生成器</span></span><br><span class="line">random_generator = Random.new().read</span><br><span class="line"></span><br><span class="line"><span class="comment"># rsa算法生成实例</span></span><br><span class="line">rsa = RSA.generate(<span class="number">1024</span>, random_generator)</span><br><span class="line"></span><br><span class="line"><span class="comment"># master的秘钥对的生成</span></span><br><span class="line">private_pem = rsa.exportKey()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产私钥私钥并放到文件里</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;master-private.pem&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(private_pem)</span><br><span class="line">public_pem = rsa.publickey().exportKey()</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;master-public.pem&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(public_pem)</span><br><span class="line"></span><br><span class="line">message = <span class="string">&#x27;I_LOVE_YAYA&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开公钥文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;master-public.pem&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = f.read()</span><br><span class="line">rsakey = RSA.importKey(key)</span><br><span class="line">cipher = Cipher_pkcs1_v1_5.new(rsakey)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密时使用base64加密</span></span><br><span class="line">cipher_text = base64.b64encode(cipher.encrypt(bytes(message, <span class="string">&quot;utf8&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用私钥解密</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;master-private.pem&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = f.read()</span><br><span class="line">rsakey = RSA.importKey(key)</span><br><span class="line">cipher = Cipher_pkcs1_v1_5.new(rsakey)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用base64解密，(在前端js加密时自动是base64加密)</span></span><br><span class="line">text = cipher.decrypt(base64.b64decode(cipher_text), random_generator)</span><br><span class="line">print(str(text, <span class="string">&quot;utf8&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> base64传输到后台的时候<span class="string">&quot;+&quot;</span>号被会转为空格，故而需要先替换，后台解析的时候转回来</span><br><span class="line">var rr =&#123;imfor:btoa(encryptoPasswd).replace(<span class="regexp">/\+/g</span>,<span class="string">&quot;%$#%&quot;</span>)&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 加密算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Encrypt MD5 案例</title>
      <link href="/2019/10/04/Encrypt%20MD5%20%E6%A1%88%E4%BE%8B/"/>
      <url>/2019/10/04/Encrypt%20MD5%20%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="MD5介绍"><a href="#MD5介绍" class="headerlink" title="MD5介绍"></a>MD5介绍</h2><p>MD5 消息摘要算法对输入的任意长度的消息进行运算，产生一个128位的消息摘要，运用在数字签名、文件完整性验证以及口令加密等方面。<br><strong>用途：</strong></p><ul><li>防篡改</li><li>防明文暴露</li><li>防抵赖(数字签名)</li></ul><p><strong>算法原理：</strong><br>1、数据填充，添加长度<br>首先，我们计算出原文长度(bit)对512求余的结果，如果不等于448，就需要填充原文使得原文对512求余的结果等于448。填充的方法是第一位填充1，其余位填充0。填充完后，信息的长度就是512<em>N+448。<br>之后，用剩余的位置（512-448=64位）记录原文的真正长度，把长度的二进制值补在最后。这样处理后的信息长度就是512</em>(N+1)。</p><p>2、初始化变量<br>用4个变量(A、B、C、D)来计算消息摘要，这里的A、B、C、D都是32位的寄存器，A=0x01234567 ，B=0x89ABCDEF ， C=0xFEDCBA98 ，D=0x76543210。</p><p>3、数据处理</p><h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5value</span>(<span class="params">s</span>):</span></span><br><span class="line">    a = md5(s.encode()).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">print(md5value(<span class="string">&#x27;11111111&#x27;</span>).upper())</span><br><span class="line"></span><br><span class="line"><span class="comment">## output:1bbd886460827015e5d605ed44252251</span></span><br></pre></td></tr></table></figure><h2 id="爬虫实战"><a href="#爬虫实战" class="headerlink" title="爬虫实战"></a>爬虫实战</h2><p>目标网址: 一品威客网<br>其密码是MD5，用扣JS方式进行验证。<br>formhash: 04988f<br>txt_account: 12345678<br>pwd_password: 1bbd886460827015e5d605ed44252251<br>login_type: 3<br>ckb_cookie: 0<br>….</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_js_function</span>(<span class="params">js_path, func_name, func_args</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取指定目录下的js代码, 并且指定js代码中函数的名字以及函数的参数。</span></span><br><span class="line"><span class="string">    :param js_path: js代码的位置</span></span><br><span class="line"><span class="string">    :param func_name: js代码中函数的名字</span></span><br><span class="line"><span class="string">    :param func_args: js代码中函数的参数</span></span><br><span class="line"><span class="string">    :return: 返回调用js函数的结果</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> open(js_path, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        js = fp.read()</span><br><span class="line">        ctx = execjs.compile(js)</span><br><span class="line">        <span class="keyword">return</span> ctx.call(func_name, func_args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 给个star吧</span></span><br><span class="line">    passwd = get_js_function(<span class="string">&#x27;epwk.js&#x27;</span>, <span class="string">&#x27;hex_md5&#x27;</span>, <span class="string">&#x27;11111111&#x27;</span>)</span><br><span class="line">    print(passwd)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">epwk.js </span><br><span class="line">复制md5.js?version下所有代码</span><br><span class="line"><span class="keyword">var</span> hexcase = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> b64pad = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> chrsz = <span class="number">8</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex_md5</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binl2hex(core_md5(str2binl(r), r.length * chrsz))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_md5</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binl2b64(core_md5(str2binl(r), r.length * chrsz))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_md5</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binl2str(core_md5(str2binl(r), r.length * chrsz))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex_hmac_md5</span>(<span class="params">r, d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binl2hex(core_hmac_md5(r, d))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_hmac_md5</span>(<span class="params">r, d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binl2b64(core_hmac_md5(r, d))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_hmac_md5</span>(<span class="params">r, d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binl2str(core_hmac_md5(r, d))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_vm_test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hex_md5(<span class="string">&quot;abc&quot;</span>) == <span class="string">&quot;900150983cd24fb0d6963f7d28e17f72&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">core_md5</span>(<span class="params">r, d</span>) </span>&#123;</span><br><span class="line">    r[d &gt;&gt; <span class="number">5</span>] |= <span class="number">128</span> &lt;&lt; d % <span class="number">32</span>;</span><br><span class="line">    r[(d + <span class="number">64</span> &gt;&gt;&gt; <span class="number">9</span> &lt;&lt; <span class="number">4</span>) + <span class="number">14</span>] = d;</span><br><span class="line">    <span class="keyword">var</span> _ = <span class="number">1732584193</span>;</span><br><span class="line">    <span class="keyword">var</span> m = <span class="number">-271733879</span>;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">-1732584194</span>;</span><br><span class="line">    <span class="keyword">var</span> h = <span class="number">271733878</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> f = <span class="number">0</span>; f &lt; r.length; f += <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = _;</span><br><span class="line">以下略...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 加密算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>EncryptAES原理与实现</title>
      <link href="/2019/10/03/Encrypt%20AES%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/10/03/Encrypt%20AES%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="AES-简介"><a href="#AES-简介" class="headerlink" title="AES 简介"></a>AES 简介</h2><p>AES(Advanced Encryption Standard)是对称加密算法，即加密和解密使用相同的密钥，用于保护私密信息不被泄露。<br><strong>加密流程：</strong><br>1.把明文按照128bit拆分成若干个明文块。</p><p>2.按照选择的填充方式来填充最后一个明文块。</p><p>3.每一个明文块利用AES加密器和密钥，加密成密文块。</p><p>4.拼接所有的密文块，成为最终的密文结果。<br><img src="https://i.loli.net/2019/10/02/XE9oOHBsGLRy5d2.png"><br>实际中，一般是通过RSA加密AES的密钥，传输到接收方，接收方解密得到AES密钥，然后发送方和接收方用AES密钥来通信。</p><p>5、密钥<br>| AES      | 密钥长度（32位比特字) | 分组长度(32位比特字) | 加密轮数 |<br>|———-|—————|—————-|——|<br>| AES-128 | 4             | 4              | 10   |<br>| AES-192 | 6             | 4              | 12   |<br>| AES-256 | 8             | 4              | 14   |</p><h3 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h3><p><strong>分组加密：</strong>并不是把整个明文一股脑加密成一整段密文，而是把明文拆分成一个个独立的明文块，每块的长度是 16 个字节，如果原文不到 16 个字节，则需要填充至 16 个字节后再进行处理。</p><p><strong>填充方式：</strong></p><p>NoPadding：不做任何填充，但是要求明文必须是16字节的整数倍。</p><p>PKCS5Padding（默认）：如果明文块少于16个字节（128bit），在明文块末尾补足相应数量的字符，且每个字节的值等于缺少的字符数。</p><p>比如明文：{1,2,3,4,5,a,b,c,d,e},缺少6个字节，则补全为{1,2,3,4,5,a,b,c,d,e,6,6,6,6,6,6}</p><p><img src="https://i.loli.net/2019/10/02/gmFrqAn3t15vKD7.png"></p><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><p>AES的工作模式，体现在把明文块加密成密文块的处理过程中。如果AES在加密时使用了某一种工作模式，解密时也必须采用同样的工作模式。</p><p>CBC模式：</p><p>电码本模式(Electronic Codebook Book)引入了一个新的概念：初始向量IV（Initialization Vector）。</p><p>IV的作用:对于每个块来说key是不变的，但是只有第一个块的IV是用户提供的，其他块IV都是自动生成。</p><p>ECB模式（默认）：</p><p>密码分组链接模式(Cipher Block Chaining)在该模式下，每一个明文块的加密都是完全独立，互不干涉的。</p><p>CTR模式：</p><p>计算器模式(Counter)</p><p>CFB模式：</p><p>密码反馈模式(Cipher FeedBack)</p><p>OFB模式：</p><p>输出反馈模式(Output FeedBack)</p><h2 id="前端加密JS库CryptoJS"><a href="#前端加密JS库CryptoJS" class="headerlink" title="前端加密JS库CryptoJS"></a>前端加密JS库CryptoJS</h2><p>注:JavaScript 只能 pkcs7padding,但与pkcs5padding效果一致</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CryptoJS = <span class="built_in">require</span>(<span class="string">&quot;crypto-js&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> key = <span class="string">&quot;aaaabbbbccccddddeeeeffffgggghhhh&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> iv = <span class="string">&quot;1234567812345678&quot;</span>; <span class="comment">// 用来加密或者解密的初始向量(必须是16位)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// CryptoJS.enc.Utf8.parse 将数据转为128bits</span></span><br><span class="line">    <span class="comment">// 16位十六进制数作为密钥key</span></span><br><span class="line">    <span class="comment">// 16位十六进制数作为密钥偏移量iv</span></span><br><span class="line">    <span class="keyword">return</span> CryptoJS.AES.encrypt(text, CryptoJS.enc.Utf8.parse(key), &#123;</span><br><span class="line">        iv: CryptoJS.enc.Utf8.parse(iv),</span><br><span class="line">        mode: CryptoJS.mode.CBC,</span><br><span class="line">        padding: CryptoJS.pad.Pkcs7</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> decryptedStr = CryptoJS.AES.decrypt(text, CryptoJS.enc.Utf8.parse(key), &#123;</span><br><span class="line">        iv: CryptoJS.enc.Utf8.parse(iv),</span><br><span class="line">        mode: CryptoJS.mode.CBC,</span><br><span class="line">        padding: CryptoJS.pad.Pkcs7</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> decryptedStr.toString(CryptoJS.enc.Utf8)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> text = <span class="string">&quot;你好&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> encoded = encrypt(text)</span><br><span class="line"><span class="comment">//由于CryptoJS生成的密文是一个对象，直接将其转为字符串得到Base64编码字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(encoded.toString());</span><br><span class="line"><span class="built_in">console</span>.log(decrypt(encoded));</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;CryptoJS v3.1.2/components/core-min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;CryptoJS v3.1.2/rollups/aes.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> pwd = <span class="string">&quot;eos&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> str=<span class="string">&quot;longzhoufeng&quot;</span></span><br><span class="line">    <span class="keyword">var</span> mi = CryptoJS.AES.encrypt(str, pwd);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;加密密文:&quot;</span> + mi);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = CryptoJS.AES.decrypt(mi, pwd).toString(CryptoJS.enc.Utf8);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;解密结果：&quot;</span> + result);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加密：填充加密文本和密钥为16字节,对aes加密后的文本进行base64编码，转为字符串形式。</span></span><br><span class="line"><span class="comment"># 解密：先逆向解密base64成bytes转字符串，将多余位数的’\0’替换为空。</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aes128</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key=None, iv=None</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> key:</span><br><span class="line">            self.key = self.get_key(<span class="number">16</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> len(key) &gt; <span class="number">32</span>:</span><br><span class="line">                key = key[:<span class="number">32</span>]</span><br><span class="line"></span><br><span class="line">            self.key = self.to_16(key)</span><br><span class="line"></span><br><span class="line">        self.iv = iv</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">n=<span class="number">16</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取密钥 n 密钥长度</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        c_length = int(n)</span><br><span class="line"></span><br><span class="line">        source = <span class="string">&#x27;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678&#x27;</span></span><br><span class="line">        length = len(source) - <span class="number">1</span></span><br><span class="line">        result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(c_length):</span><br><span class="line">            result += source[random.randint(<span class="number">0</span>, length)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pkcs7padding</span>(<span class="params">text</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        明文使用PKCS7填充</span></span><br><span class="line"><span class="string">        最终调用AES加密方法时，传入的是一个byte数组，要求是16的整数倍，因此需要对明文进行处理</span></span><br><span class="line"><span class="string">        :param text: 待加密内容(明文)</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        bs = AES.block_size  <span class="comment"># 16</span></span><br><span class="line">        length = len(text)</span><br><span class="line">        bytes_length = len(bytes(text, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="comment"># tips：utf-8编码时，英文占1个byte，而中文占3个byte</span></span><br><span class="line">        padding_size = length <span class="keyword">if</span> (bytes_length == length) <span class="keyword">else</span> bytes_length</span><br><span class="line"></span><br><span class="line">        padding = bs - padding_size % bs</span><br><span class="line">        <span class="comment"># tips：chr(padding)看与其它语言的约定，有的会使用&#x27;\0&#x27;</span></span><br><span class="line">        padding_text = chr(padding) * padding</span><br><span class="line">        <span class="comment"># bytes_length = len(bytes(text + padding_text, encoding=&#x27;utf-8&#x27;))</span></span><br><span class="line">        <span class="comment"># print(bytes_length)</span></span><br><span class="line">        <span class="keyword">return</span> text + padding_text</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pkcs7unpadding</span>(<span class="params">text</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        处理使用PKCS7填充过的数据</span></span><br><span class="line"><span class="string">        :param text: 解密后的字符串</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        length = len(text)</span><br><span class="line">        unpadding = ord(text[length - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> text[<span class="number">0</span>:length - unpadding]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_16</span>(<span class="params">key</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将key转为16倍数的bytes数据</span></span><br><span class="line"><span class="string">        :param key:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        key_bytes = bytes(key, encoding=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> len(key_bytes) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">            key_bytes += <span class="string">b&#x27;\0&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> key  <span class="comment"># 返回bytes</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt_CBC</span>(<span class="params">self, content</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        AES加密</span></span><br><span class="line"><span class="string">        key,iv使用同一个</span></span><br><span class="line"><span class="string">        模式cbc</span></span><br><span class="line"><span class="string">        填充pkcs7</span></span><br><span class="line"><span class="string">        :param key: 密钥</span></span><br><span class="line"><span class="string">        :param content: 加密内容</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        key_bytes = bytes(self.key, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.iv:</span><br><span class="line">            iv = key_bytes</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            iv = self.iv</span><br><span class="line">        cipher = AES.new(key_bytes, AES.MODE_CBC, iv)  <span class="comment"># 初始化加密器</span></span><br><span class="line">        <span class="comment"># 处理明文</span></span><br><span class="line">        content_padding = self.pkcs7padding(content)</span><br><span class="line">        <span class="comment"># 加密</span></span><br><span class="line">        encrypt_bytes = cipher.encrypt(bytes(content_padding, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        <span class="comment"># 重新编码</span></span><br><span class="line">        result = str(base64.b64encode(encrypt_bytes), encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt_CBC</span>(<span class="params">self, content</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        AES解密</span></span><br><span class="line"><span class="string">         key,iv使用同一个</span></span><br><span class="line"><span class="string">        模式cbc</span></span><br><span class="line"><span class="string">        去填充pkcs7</span></span><br><span class="line"><span class="string">        :param key:</span></span><br><span class="line"><span class="string">        :param content:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        key_bytes = bytes(self.key, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.iv:</span><br><span class="line">            iv = key_bytes</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            iv = self.iv</span><br><span class="line">        cipher = AES.new(key_bytes, AES.MODE_CBC, iv)</span><br><span class="line">        <span class="comment"># base64解码</span></span><br><span class="line">        encrypt_bytes = base64.b64decode(content)</span><br><span class="line">        <span class="comment"># 解密</span></span><br><span class="line">        decrypt_bytes = cipher.decrypt(encrypt_bytes)</span><br><span class="line">        <span class="comment"># 重新编码</span></span><br><span class="line">        result = str(decrypt_bytes, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="comment"># 去除填充内容</span></span><br><span class="line">        result = self.pkcs7unpadding(result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt_ECB</span>(<span class="params">self, text</span>):</span></span><br><span class="line">        aes = AES.new(self.key, AES.MODE_ECB)  <span class="comment"># 初始化加密器</span></span><br><span class="line">        <span class="keyword">return</span> str(base64.encodebytes(aes.encrypt(self.to_16(text))),</span><br><span class="line">                   encoding=<span class="string">&#x27;utf8&#x27;</span>).replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 加密</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decodebytes_ECB</span>(<span class="params">self, text</span>):</span></span><br><span class="line">        aes = AES.new(self.key, AES.MODE_ECB)  <span class="comment"># 初始化加密器</span></span><br><span class="line">        <span class="keyword">return</span> str(aes.decrypt(base64.decodebytes(bytes(</span><br><span class="line">            text, encoding=<span class="string">&#x27;utf8&#x27;</span>))).rstrip(<span class="string">b&#x27;\0&#x27;</span>).decode(<span class="string">&quot;utf8&quot;</span>))  <span class="comment"># 解密</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># AesCbc128.pkcs7padding(&quot;你好&quot;)</span></span><br><span class="line">    iv = <span class="string">b&quot;1234567812345678&quot;</span></span><br><span class="line">    key = <span class="string">&quot;aaaabbbbccccdddd&quot;</span></span><br><span class="line">    content = <span class="string">&quot;Hello,你好&quot;</span></span><br><span class="line">    aes = Aes128(key, iv)</span><br><span class="line">    encrypt_en = aes.encrypt_CBC(content)</span><br><span class="line">    print(encrypt_en)</span><br><span class="line">    decrypt_en = aes.decrypt_CBC(encrypt_en)</span><br><span class="line">    print(decrypt_en)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 加密算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Numpy速查手册</title>
      <link href="/2019/10/01/Numpy%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/"/>
      <url>/2019/10/01/Numpy%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="分布类型"><a href="#分布类型" class="headerlink" title="分布类型"></a>分布类型</h2><p><strong>均匀分布：</strong><br>均匀分布也叫矩形分布，它是对称概率分布，在相同长度间隔的分布概率是等可能的。 均匀分布由两个参数a和b定义，它们是数轴上的最小值和最大值，通常缩写为U（a，b）。</p><p><strong>正态分布：</strong><br>又名高斯分布，正态分布的概率密度函数曲线呈钟形，因此人们又经常称之为钟形曲线。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>固定内存块的解释：</p><ul><li>数据类型（整数、浮点或者Python 对象）</li><li>数据大小 </li><li>字节序</li><li>在结构化类型的情况下，字段的名称每个字段的数据类型，和每个字段占用的内存块部分</li><li>如果数据类型是子序列，它的形状和数据类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># 一般以np作为numpy的别名</span></span><br><span class="line">my_arr = np.arange(<span class="number">1000000</span>)</span><br><span class="line"><span class="comment"># 2行3列正态分布</span></span><br><span class="line">data = np.random.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">data = data * <span class="number">10</span></span><br><span class="line"><span class="comment"># 2行3列均匀分布</span></span><br><span class="line">data = np.random.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>1、ndarray是一个通用的同构数据多维容器，其中的所有元素必须是相同类型的。<br>每个数组都有一个shape（一个表示各维度大小的元组）和一个dtype（一个用于说明数组数据类型的对象）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: data.shape</span><br><span class="line">Out[<span class="number">6</span>]: (<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: data.dtype</span><br><span class="line">Out[<span class="number">7</span>]: dtype(<span class="string">&#x27;float64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: data.ndim</span><br><span class="line">Out[<span class="number">8</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],dtype=bool)</span><br><span class="line">Out[<span class="number">31</span>]: array([ <span class="literal">True</span>,  <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>])</span><br></pre></td></tr></table></figure><p>2、修改数据类型及保留小数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.astype(<span class="string">&#x27;i1&#x27;</span>)</span><br><span class="line">np.round(b,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>3、嵌套序列（比如由一组等长列表组成的列表）将会被转换为一个多维数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">22</span>]: data2 = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: arr2 = np.array(data2)</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: arr2</span><br><span class="line">Out[<span class="number">24</span>]: </span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</span><br></pre></td></tr></table></figure><p>4、二项分布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数的返回值表示n中成功的次数且以Cn^x*p^x*(1-p)^(n-x)的概率选择成功x次。</span></span><br><span class="line"><span class="comment"># 一次试验抛5次硬币朝上的硬币数，做2*3次试验。</span></span><br><span class="line">np.random.binomial(<span class="number">5</span>, <span class="number">0.5</span>, size=(<span class="number">2</span>,<span class="number">3</span>)) </span><br></pre></td></tr></table></figure><h2 id="数组形状"><a href="#数组形状" class="headerlink" title="数组形状"></a>数组形状</h2><p>1、查看和修改数组形状</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: a = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: a.shape</span><br><span class="line">Out[<span class="number">9</span>]: (<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: a.reshape(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">Out[<span class="number">10</span>]: array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: a.reshape(<span class="number">4</span>,)</span><br><span class="line">Out[<span class="number">12</span>]: array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: a.flatten()</span><br><span class="line">Out[<span class="number">14</span>]: array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>2、数组计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t3 = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">np.sum(t3)</span><br><span class="line">np.sum(t3,axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 求0轴中值,不指定轴则默认返回多维数组的全部统计结果。</span></span><br><span class="line">np.median(t3,axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 0轴标准差</span></span><br><span class="line">t3.std(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><strong>广播原则：</strong></p><ul><li>如果两个数组的后缘维度即从末尾开始算起的维度的轴长度相符或其中一方的长度为1，则认为它们是广播兼容的。广播会在缺失和长度为1的维度上进行。</li><li>shape为(3,3,2)的数组可以跟(3,2)的数组进行计算。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">21</span>]: b = np.arange(<span class="number">10</span>).reshape(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: b</span><br><span class="line">Out[<span class="number">22</span>]:</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line">   </span><br><span class="line">In [<span class="number">24</span>]: c</span><br><span class="line">Out[<span class="number">24</span>]:</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]])</span><br><span class="line">  </span><br><span class="line">In [<span class="number">26</span>]: d = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">  </span><br><span class="line">b - c?</span><br><span class="line">b - d?</span><br></pre></td></tr></table></figure><h2 id="numpy读取文件"><a href="#numpy读取文件" class="headerlink" title="numpy读取文件"></a>numpy读取文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.loadtxt(frame.dtype=np.float,delimiter=<span class="literal">None</span>,skiprows=<span class="number">0</span>,usecols=<span class="literal">None</span>,unpack=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">unpack:转置，等价于transpose()</span><br></pre></td></tr></table></figure><h2 id="索引切片-数值修改"><a href="#索引切片-数值修改" class="headerlink" title="索引切片,数值修改"></a>索引切片,数值修改</h2><p>1、一维数组索引切片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: a = np.arange(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: a</span><br><span class="line">Out[<span class="number">5</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: a[:<span class="number">7</span>:<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">6</span>]: array([<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>])</span><br></pre></td></tr></table></figure><p>2、多维数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">24</span>).reshape(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>array([[[ 0,  1,  2,  3],<br>        [ 4,  5,  6,  7],<br>        [ 8,  9, 10, 11]],<br>       [[12, 13, 14, 15],<br>        [16, 17, 18, 19],<br>        [20, 21, 22, 23]]])</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[:,:,<span class="number">2</span>:]</span><br></pre></td></tr></table></figure><p>array([[[ 2,  3],<br>        [ 6,  7],<br>        [10, 11]],<br>       [[14, 15],<br>        [18, 19],<br>        [22, 23]]])</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取第2-3行，2-4列</span></span><br><span class="line">a[:,<span class="number">1</span>:<span class="number">3</span>,<span class="number">1</span>:<span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>array([[[ 5,  6,  7],<br>        [ 9, 10, 11]],<br>       [[17, 18, 19],<br>        [21, 22, 23]]])</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取多个不相邻的点</span></span><br><span class="line">a[[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]]</span><br></pre></td></tr></table></figure><p>array([1, 5, 9])</p><p>3、数值修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bool索引将矩阵中小于10的数值替换为10</span></span><br><span class="line">a[a&lt;<span class="number">10</span>] = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>array([[[10, 10, 10, 10],<br>        [10, 10, 10, 10],<br>        [10, 10, 10, 11]],<br>       [[12, 13, 14, 15],<br>        [16, 17, 18, 19],<br>        [20, 21, 22, 23]]])</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># numpy三目运算符</span></span><br><span class="line">b = np.where(a&lt;<span class="number">15</span>,<span class="number">6</span>,<span class="number">8</span>)</span><br></pre></td></tr></table></figure><p>array([[[6, 6, 6, 6],<br>        [6, 6, 6, 6],<br>        [6, 6, 6, 6]],<br>       [[6, 6, 6, 8],<br>        [8, 8, 8, 8],<br>        [8, 8, 8, 8]]])</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 裁剪 如小于7全替换为7 ，大于8全替换为8</span></span><br><span class="line">b.clip(<span class="number">7</span>,<span class="number">8</span>)</span><br></pre></td></tr></table></figure><h2 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.hstack((a,b))</span><br><span class="line">np.vstack((a,b))</span><br></pre></td></tr></table></figure><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>acopy = lena.copy() # 深拷贝,完全复制数组和数据。<br>aview = lena.view() # 浅拷贝,重新开辟了一块内存，view和原始数据共享一份数据，修改一个会影响另一个，但有自己的数据结构。</p><h2 id="nan与inf"><a href="#nan与inf" class="headerlink" title="nan与inf"></a>nan与inf</h2><h3 id="nan-not-a-number"><a href="#nan-not-a-number" class="headerlink" title="nan(not a number)"></a>nan(not a number)</h3><p>1、读取本地文件为float时候，如果有缺失就会出现nan<br>2、不合适的计算</p><h3 id="inf-infinity"><a href="#inf-infinity" class="headerlink" title="inf(infinity)"></a>inf(infinity)</h3><p>1、数字除以0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: type(np.inf)</span><br><span class="line">Out[<span class="number">9</span>]: float</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: type(np.nan)</span><br><span class="line">Out[<span class="number">10</span>]: float</span><br></pre></td></tr></table></figure><p>1、判断一个数字是否为nan</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: np.nan == np.nan</span><br><span class="line">Out[<span class="number">2</span>]: <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">np.isnan(a) 返回bool</span><br></pre></td></tr></table></figure><p><strong>缺失值处理：</strong>一般把缺失值替换为均值（中值）或者直接删除有缺失值的一行。</p><h2 id="实战填充NAN"><a href="#实战填充NAN" class="headerlink" title="实战填充NAN"></a>实战填充NAN</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill_nadrray</span>(<span class="params">t1</span>):</span></span><br><span class="line">    <span class="comment"># 遍历每一列</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(t1.shape[<span class="number">1</span>]):</span><br><span class="line">        temp_col = t1[:,i]</span><br><span class="line">        nan_num = np.count_nonzero(temp_col!=temp_col)</span><br><span class="line">        <span class="keyword">if</span> nan_num != <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 当前一列不为nan的array</span></span><br><span class="line">            temp_not_nan_col = temp_col[temp_col == temp_col]</span><br><span class="line">            <span class="comment"># 选中当前为nan的位置，把值赋值为不为nan的均值</span></span><br><span class="line">            temp_col[np.isnan(temp_col)] = temp_not_nan_col.mean()</span><br><span class="line">    <span class="keyword">return</span> t1</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ = <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">t1 = np.arange(<span class="number">24</span>).reshape(<span class="number">4</span>,<span class="number">6</span>).astype(<span class="string">&quot;float&quot;</span>)</span><br><span class="line">t1[<span class="number">1</span>,<span class="number">2</span>:] = np.nan</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据科学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>全网代理字体分割</title>
      <link href="/2019/09/30/Font%20%E5%85%A8%E7%BD%91%E4%BB%A3%E7%90%86%E5%AD%97%E4%BD%93%E5%88%86%E5%89%B2/"/>
      <url>/2019/09/30/Font%20%E5%85%A8%E7%BD%91%E4%BB%A3%E7%90%86%E5%AD%97%E4%BD%93%E5%88%86%E5%89%B2/</url>
      
        <content type="html"><![CDATA[<p>目标网址：<a href="http://www.goubanjia.com/">全网代理IP</a></p><h3 id="一、网址分析"><a href="#一、网址分析" class="headerlink" title="一、网址分析"></a>一、网址分析</h3><p><img src="/images/qwdl/qw1.png"></p><ol><li>观察上图可知通过正常的元素中插入隐藏元素，然后隐藏元素设置无效值来达到混淆作用。</li><li>混淆标签：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#x27;display: inline-block;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">2、<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&#x27;display: none;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">3、<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">4、<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#x27;display:inline-block;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>应对策略：</li></ol><ul><li>排除空标签</li><li>排除隐藏标签</li></ul><ol start="4"><li>仔细观察发现source中的port与渲染后展示的不一致，说明端口是后续经JS处理填充的。</li><li>应对策略：</li></ol><ul><li><p>常规办法<br>在该节点的父节点处DOM断点subtree modification ,需等待几分钟后刷新（立即刷新不会进入调试界面，未找到原因）<br><img src="/images/qwdl/qw2.png"></p></li><li><p>取巧办法<br>1、直接请求页面源码到本地，浏览器在禁用JS和开启JS的情况下，打开本地页面观测比对，可发现端口不一致，印证前面提过的观点。<br>2、该页面分别引入三个JS，依次注释掉JS打开页面，判断修改port的是哪个JS文件。<br>3、最后发现是pde.js文件对port进行了处理，打开该文件，发现进行了混淆和eval加密。</p></li></ul><p><img src="/images/qwdl/qw3.png"></p><ul><li>js packer 特征：packer压缩是以eval(function(p,a,c,k,e,d)  或  eval(function(p,a,c,k,e,r)  开头，只是早前的一些打包算法。</li></ul><ol start="6"><li>Javascript 的 eval 函数可以在当前作用域执行一段包含 Javascript 代码的字符串。</li></ol><ul><li>解决：eval解密的网址如<a href="https://tool.lu/js/">https://tool.lu/js/</a>或在浏览器控制台复制代码删除开头 eval 这4个字母回车运行。<br><img src="/images/qwdl/qw4.png"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _$ = [<span class="string">&#x27;\x2e\x70\x6f\x72\x74&#x27;</span>, <span class="string">&quot;\x65\x61\x63\x68&quot;</span>, <span class="string">&quot;\x68\x74\x6d\x6c&quot;</span>, <span class="string">&quot;\x69\x6e\x64\x65\x78\x4f\x66&quot;</span>, <span class="string">&#x27;\x2a&#x27;</span>, <span class="string">&quot;\x61\x74\x74\x72&quot;</span>, <span class="string">&#x27;\x63\x6c\x61\x73\x73&#x27;</span>, <span class="string">&quot;\x73\x70\x6c\x69\x74&quot;</span>, <span class="string">&quot;\x20&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;\x6c\x65\x6e\x67\x74\x68&quot;</span>, <span class="string">&quot;\x70\x75\x73\x68&quot;</span>, <span class="string">&#x27;\x41\x42\x43\x44\x45\x46\x47\x48\x49\x5a&#x27;</span>, <span class="string">&quot;\x70\x61\x72\x73\x65\x49\x6e\x74&quot;</span>, <span class="string">&quot;\x6a\x6f\x69\x6e&quot;</span>, <span class="string">&#x27;&#x27;</span>];</span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(_$[<span class="number">0</span>])[_$[<span class="number">1</span>]](<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = $(<span class="built_in">this</span>)[_$[<span class="number">2</span>]]();</span><br><span class="line">        <span class="keyword">if</span> (a[_$[<span class="number">3</span>]](_$[<span class="number">4</span>]) != <span class="number">-0x1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        ;<span class="keyword">var</span> b = $(<span class="built_in">this</span>)[_$[<span class="number">5</span>]](_$[<span class="number">6</span>]);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            b = (b[_$[<span class="number">7</span>]](_$[<span class="number">8</span>]))[<span class="number">0x1</span>];</span><br><span class="line">            <span class="keyword">var</span> c = b[_$[<span class="number">7</span>]](_$[<span class="number">9</span>]);</span><br><span class="line">            <span class="keyword">var</span> d = c[_$[<span class="number">10</span>]];</span><br><span class="line">            <span class="keyword">var</span> f = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> g = <span class="number">0x0</span>; g &lt; d; g++) &#123;</span><br><span class="line">                f[_$[<span class="number">11</span>]](_$[<span class="number">12</span>][_$[<span class="number">3</span>]](c[g]))</span><br><span class="line">            &#125;</span><br><span class="line">            ;$(<span class="built_in">this</span>)[_$[<span class="number">2</span>]](<span class="built_in">window</span>[_$[<span class="number">13</span>]](f[_$[<span class="number">14</span>]](_$[<span class="number">15</span>])) &gt;&gt; <span class="number">0x3</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>这一段代码还是不清晰，根据代码逻辑把_$[]进行替换，得到最终JS代码，替换所用代码详见文末。<br><img src="/images/qwdl/qw5.png"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// each() 方法规定为每个匹配元素规定运行的函数。</span></span><br><span class="line">    $(<span class="string">&#x27;.port&#x27;</span>)[<span class="string">&#x27;each&#x27;</span>](<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = $(<span class="built_in">this</span>)[<span class="string">&#x27;html&#x27;</span>]();</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="string">&#x27;indexOf&#x27;</span>](<span class="string">&#x27;*&#x27;</span>) != <span class="number">-0x1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        ;<span class="keyword">var</span> b = $(<span class="built_in">this</span>)[<span class="string">&#x27;attr&#x27;</span>](<span class="string">&#x27;class&#x27;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            b = (b[<span class="string">&#x27;split&#x27;</span>](<span class="string">&#x27; &#x27;</span>))[<span class="number">0x1</span>];</span><br><span class="line">            <span class="keyword">var</span> c = b[<span class="string">&#x27;split&#x27;</span>](<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            <span class="keyword">var</span> d = c[<span class="string">&#x27;length&#x27;</span>];</span><br><span class="line">            <span class="keyword">var</span> f = [];</span><br><span class="line"><span class="comment">// push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> g = <span class="number">0x0</span>; g &lt; d; g++) &#123;</span><br><span class="line">                f[<span class="string">&#x27;push&#x27;</span>](<span class="string">&#x27;ABCDEFGHIZ&#x27;</span>[<span class="string">&#x27;indexOf&#x27;</span>](c[g]))</span><br><span class="line">            &#125;</span><br><span class="line">            ;$(<span class="built_in">this</span>)[<span class="string">&#x27;html&#x27;</span>](<span class="built_in">window</span>[<span class="string">&#x27;parseInt&#x27;</span>](f[<span class="string">&#x27;join&#x27;</span>](<span class="string">&#x27;&#x27;</span>)) &gt;&gt; <span class="number">0x3</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>逻辑分析：取端口标签的第二个class，将字符串的每个字母在“ABCDEFG”中寻找对应索引，取得每个字母的索引重新拼接成字符串并转换成数值右移3位即除以8得到最后的端口号。<br>用Python来实现这段代码：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_real_port</span>(<span class="params">classValue</span>):</span></span><br><span class="line">    port_ = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> classValue:</span><br><span class="line">        port_ += str(<span class="string">&quot;ABCDEFGHIZ&quot;</span>.index(value))</span><br><span class="line">    port = int(port_) &gt;&gt; <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> port</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字体反爬 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫存储读取cookie</title>
      <link href="/2019/09/30/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%AD%98%E5%82%A8%E8%AF%BB%E5%8F%96cookie/"/>
      <url>/2019/09/30/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%AD%98%E5%82%A8%E8%AF%BB%E5%8F%96cookie/</url>
      
        <content type="html"><![CDATA[<h3 id="requests-session自取自用"><a href="#requests-session自取自用" class="headerlink" title="requests session自取自用"></a>requests session自取自用</h3><p>一、操作cookie<br>1、设置cookie<br>方式一：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">session</span>.cookies.<span class="keyword">set</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>)</span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">session</span>.cookies.<span class="keyword">update</span>(kv/RequestsCookieJar)</span><br></pre></td></tr></table></figure><p>2、获取kv形式cookie: </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">session</span><span class="selector-class">.cookies</span><span class="selector-class">.get_dict</span>()</span><br></pre></td></tr></table></figure><p>3、清除cookie：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">session</span><span class="selector-class">.cookies</span><span class="selector-class">.clear</span>() </span><br></pre></td></tr></table></figure><p>2、直接赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># session.cookies返回cookieJar形式，可以将字典cookie_dict转为CookieJar进行赋值</span></span><br><span class="line"></span><br><span class="line">cookies = requests.utils.cookiejar_from_dict(cookie_dict, cookiejar=<span class="literal">None</span>, overwrite=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">session.cookies = cookies</span><br></pre></td></tr></table></figure><p>3、文件读写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ----方式一----</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_cookies</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">with</span> open(cookies_file, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 将字典转换成RequestsCookieJar，赋值给session的cookies.</span></span><br><span class="line">        self.session.cookies = requests.utils.cookiejar_from_dict(pickle.load(f))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_cookies</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">with</span> open(cookies_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pickle.dump(requests.utils.dict_from_cookiejar(self.session.cookies), f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----方式二 ----</span></span><br><span class="line"><span class="comment"># 1、创建与libwww-perl Set-Cookie3文件格式兼容的FileCookieJar实例</span></span><br><span class="line">session.cookies = cookiejar.LWPCookieJar(filename=<span class="string">&#x27;cookies.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、加载cookie文件</span></span><br><span class="line">session.cookies.load(ignore_discard=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、保存Cookie文件若未写filename参数，则默认为实例化LWPCookieJar时的文件名</span></span><br><span class="line">session.cookies.save()</span><br></pre></td></tr></table></figure><h3 id="requests-session与pyppeteer"><a href="#requests-session与pyppeteer" class="headerlink" title="requests session与pyppeteer"></a>requests session与pyppeteer</h3><p>1、直接赋值<br>由于page.cookies返回的cookie还包含了domain、expires等其他信息，那么问题就转变为生成kv形式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将pyppeteer生成的cookie赋给session，cookielist为page.cookies</span></span><br><span class="line">   </span><br><span class="line">session_cookie_dict = dict([(cookie.get(<span class="string">&#x27;name&#x27;</span>), cookie.get(<span class="string">&#x27;value&#x27;</span>)) <span class="keyword">for</span> cookie <span class="keyword">in</span> cookielist])</span><br></pre></td></tr></table></figure><p>2、文件读写：则将上述得到kv值序列化存储即可，如json文件。</p><h3 id="requests-session与Scrapy"><a href="#requests-session与Scrapy" class="headerlink" title="requests session与Scrapy"></a>requests session与Scrapy</h3><p>1、直接赋值<br>在第一次发起请求时将cookie手动添加到scrapy.Request的cookies参数中,在后续的请求中会自行流转。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 手动添加scrapy cookies可以接受kv形式，还是先转再用。</span></span><br><span class="line"><span class="keyword">yield</span> scrapy.Request(url= ,cookies= ,callback= ,headers= )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取请求Cookie</span></span><br><span class="line">Cookie = response.request.headers.getlist(<span class="string">&#x27;Cookie&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取响应Cookie</span></span><br><span class="line">Cookie2 = response.headers.getlist(<span class="string">&#x27;Set-Cookie&#x27;</span>)</span><br></pre></td></tr></table></figure><p>2、文件读写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scrapy登录成功后，得到要保存的cookies为CookieJar对象</span></span><br><span class="line">cookie_jar = response.meta[<span class="string">&#x27;cookiejar&#x27;</span>]</span><br><span class="line">cookie_jar.extract_cookies(response, response.request)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将cookies存储为文件，该方法 格式为 &lt;Cookie BDSVRTM=0 for www.baidu.com/&gt;</span></span><br><span class="line"><span class="keyword">with</span> open(self.cookie_file, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"> <span class="keyword">for</span> cookie <span class="keyword">in</span> cookie_jar:</span><br><span class="line"> f.write(str(cookie) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 加载Cookies</span></span><br><span class="line"><span class="keyword">with</span> open(self.cookie_file) <span class="keyword">as</span> f:</span><br><span class="line">    cookiejar = f.read()</span><br><span class="line">p = re.compile(<span class="string">&#x27;\&lt;Cookie (.*?) for&#x27;</span>)</span><br><span class="line">cookies = re.findall(p, cookiejar)</span><br><span class="line">cookies = (cookie.split(<span class="string">&#x27;=&#x27;</span>,<span class="number">1</span>) <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies)</span><br><span class="line">cookie_jar = dict(cookies)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pyppeteer 登录淘宝</title>
      <link href="/2019/09/27/Pyppeteer%20%E7%99%BB%E5%BD%95%E6%B7%98%E5%AE%9D/"/>
      <url>/2019/09/27/Pyppeteer%20%E7%99%BB%E5%BD%95%E6%B7%98%E5%AE%9D/</url>
      
        <content type="html"><![CDATA[<h3 id="登录逻辑"><a href="#登录逻辑" class="headerlink" title="登录逻辑"></a>登录逻辑</h3><ul><li>设置pyppeteer启动项，打开一个浏览器</li><li>打开淘宝登录页面</li><li>输入账号密码</li><li>滑动滑块</li><li>登录</li></ul><h3 id="登录代码"><a href="#登录代码" class="headerlink" title="登录代码"></a>登录代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_time_random</span>():</span></span><br><span class="line">    <span class="keyword">return</span> random.randint(<span class="number">60</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaoBaoSpider</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, username, passwd</span>):</span></span><br><span class="line">        self.width, self.height = <span class="number">1366</span>, <span class="number">768</span></span><br><span class="line">        self.url = <span class="string">&quot;https://login.taobao.com/member/login.jhtml&quot;</span></span><br><span class="line">        self.username = username</span><br><span class="line">        self.passwd = passwd</span><br><span class="line">        self.loop = asyncio.get_event_loop()</span><br><span class="line">        task = asyncio.ensure_future(self.main())</span><br><span class="line">        self.loop.run_until_complete(task)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> task.result():</span><br><span class="line">            print(task.result())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主函数</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 初始化浏览器</span></span><br><span class="line">        browser = <span class="keyword">await</span> launch(&#123;<span class="string">&#x27;headless&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">                                <span class="string">&#x27;dumpio&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">                                <span class="string">&#x27;args&#x27;</span>: [</span><br><span class="line">                                    <span class="string">&#x27;--disable-gpu&#x27;</span>,</span><br><span class="line">                                    <span class="string">f&#x27;--window-size=<span class="subst">&#123;self.width&#125;</span>,<span class="subst">&#123;self.height&#125;</span>&#x27;</span></span><br><span class="line">                                ]&#125;)</span><br><span class="line">        <span class="comment"># 打开新标签页</span></span><br><span class="line">        page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">        <span class="keyword">await</span> page.setViewport(&#123;<span class="string">&#x27;width&#x27;</span>: self.width, <span class="string">&#x27;height&#x27;</span>: self.height&#125;)</span><br><span class="line">        <span class="comment"># 登录函数</span></span><br><span class="line">        cookies = <span class="keyword">await</span> self.login(page)</span><br><span class="line">        <span class="keyword">return</span> cookies</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self, page</span>):</span></span><br><span class="line">        <span class="keyword">await</span> page.goto(self.url)</span><br><span class="line">        <span class="keyword">await</span> self.page_evaluate(page)</span><br><span class="line">        <span class="keyword">await</span> page.waitFor(<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 点击密码登录</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">await</span> page.click(<span class="string">&#x27;a.forget-pwd.J_Quick2Static&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">&quot;click pwd btn failed!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 输入账号 密码</span></span><br><span class="line">        <span class="keyword">await</span> page.type(<span class="string">&#x27;#TPL_username_1&#x27;</span>, self.username, &#123;<span class="string">&#x27;delay&#x27;</span>: input_time_random() - <span class="number">50</span>&#125;)  <span class="comment"># delay是限制输入的时间</span></span><br><span class="line">        <span class="keyword">await</span> page.type(<span class="string">&#x27;#TPL_password_1&#x27;</span>, self.passwd, &#123;<span class="string">&#x27;delay&#x27;</span>: input_time_random()&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># querySelectorEval检测页面是否有滑块,原理是检测页面元素。</span></span><br><span class="line">        slider = <span class="keyword">await</span> page.Jeval(<span class="string">&#x27;#nocaptcha&#x27;</span>, <span class="string">&#x27;node =&gt; node.style&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 若存在滑块则进行处理</span></span><br><span class="line">        <span class="keyword">if</span> slider:</span><br><span class="line">            print(<span class="string">&quot;start slide...&quot;</span>)</span><br><span class="line">            flag, page = <span class="keyword">await</span> self.mouse_slide(page)</span><br><span class="line">            <span class="keyword">if</span> flag:</span><br><span class="line">                <span class="keyword">await</span> page.keyboard.press(<span class="string">&#x27;Enter&#x27;</span>)</span><br><span class="line">                <span class="comment"># 如果无法通过回车键完成点击，就调用js模拟点击登录按钮。</span></span><br><span class="line">                <span class="comment"># await page.evaluate(&#x27;&#x27;&#x27;document.getElementById(&quot;J_SubmitStatic&quot;).click()&#x27;&#x27;&#x27;)</span></span><br><span class="line">                <span class="keyword">await</span> page.waitForNavigation()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;No slider,enter&quot;</span>)</span><br><span class="line">            <span class="keyword">await</span> page.keyboard.press(<span class="string">&#x27;Enter&#x27;</span>)</span><br><span class="line">            <span class="comment"># 如果无法通过回车键完成点击，就调用js模拟点击登录按钮。</span></span><br><span class="line">            <span class="comment"># await page.evaluate(&#x27;&#x27;&#x27;document.getElementById(&quot;J_SubmitStatic&quot;).click()&#x27;&#x27;&#x27;)</span></span><br><span class="line">            <span class="comment"># 等待跳转结束</span></span><br><span class="line">            <span class="keyword">await</span> page.waitForNavigation()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">global</span> error</span><br><span class="line">                error = <span class="keyword">await</span> page.Jeval(<span class="string">&#x27;#J_Message &gt; .error&#x27;</span>, <span class="string">&#x27;node =&gt; node.textContent&#x27;</span>)</span><br><span class="line">                print(<span class="string">f&quot;error is:<span class="subst">&#123;error&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                error = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                <span class="keyword">if</span> error:</span><br><span class="line">                    <span class="comment"># await page.waitFor(50000)</span></span><br><span class="line">                    print(<span class="string">&#x27;确保账户安全,重新入输入&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 等待登陆成功页面某一元素的出现</span></span><br><span class="line">                    <span class="keyword">await</span> page.waitForSelector(<span class="string">&quot;#mtb-nickname&quot;</span>, &#123;<span class="string">&quot;timeout&quot;</span>: <span class="number">10000</span>&#125;)</span><br><span class="line">                    print(<span class="string">f&quot;url:<span class="subst">&#123;page.url&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="keyword">await</span> self.search(page)</span><br><span class="line">                    <span class="keyword">await</span> page.waitFor(<span class="number">10000</span>)</span><br><span class="line">                    <span class="comment"># return await self.get_cookie(page)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">page_evaluate</span>(<span class="params">self, page</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        webdriver 已经通过修改源码解决，</span></span><br><span class="line"><span class="string">        navigator是window对象的一个属性，同时修改plugins，languages，navigator。</span></span><br><span class="line"><span class="string">        :param page:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">await</span> page.evaluate(<span class="string">&#x27;&#x27;&#x27;() =&gt;&#123; window.navigator.chrome = &#123; runtime: &#123;&#125;,  &#125;; &#125;&#x27;&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">await</span> page.evaluate(</span><br><span class="line">            <span class="string">&#x27;&#x27;&#x27;() =&gt;&#123; Object.defineProperty(navigator, &#x27;languages&#x27;, &#123; get: () =&gt; [&#x27;en-US&#x27;, &#x27;en&#x27;] &#125;); &#125;&#x27;&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">await</span> page.evaluate(</span><br><span class="line">            <span class="string">&#x27;&#x27;&#x27;() =&gt;&#123; Object.defineProperty(navigator, &#x27;plugins&#x27;, &#123; get: () =&gt; [1, 2, 3, 4, 5,6], &#125;); &#125;&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">mouse_slide</span>(<span class="params">self, page=None</span>):</span></span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 鼠标移动到滑块，按下，滑动到头（然后延时处理），松开按键</span></span><br><span class="line">            <span class="keyword">await</span> page.hover(<span class="string">&#x27;#nc_1_n1z&#x27;</span>)</span><br><span class="line">            <span class="keyword">await</span> page.mouse.down()</span><br><span class="line">            <span class="keyword">await</span> page.mouse.move(<span class="number">2000</span>, <span class="number">0</span>, &#123;<span class="string">&#x27;delay&#x27;</span>: random.randint(<span class="number">1000</span>, <span class="number">2000</span>)&#125;)</span><br><span class="line">            <span class="keyword">await</span> page.mouse.up()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">&quot;mouse error retry... or please check your code&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>, page</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 判断是否通过</span></span><br><span class="line">            <span class="keyword">await</span> asyncio.sleep(random.uniform(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">            slider_again = <span class="keyword">await</span> page.Jeval(<span class="string">&#x27;.nc-lang-cnt&#x27;</span>, <span class="string">&#x27;node =&gt; node.textContent&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> slider_again != <span class="string">&#x27;验证通过&#x27;</span>:</span><br><span class="line">                print(<span class="string">&quot;verify fail error info:&quot;</span>, slider_again)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span>, page</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&#x27;verify pass!!!&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>, page</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_cookie</span>(<span class="params">self, page</span>):</span></span><br><span class="line">        cookies_list = <span class="keyword">await</span> page.cookies()</span><br><span class="line">        cookies = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies_list:</span><br><span class="line">            str_cookie = <span class="string">&quot;&#123;0&#125;=&#123;1&#125;;&quot;</span></span><br><span class="line">            str_cookie = str_cookie.format(cookie[<span class="string">&quot;name&quot;</span>], cookie[<span class="string">&quot;value&quot;</span>])</span><br><span class="line">            cookies += str_cookie</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cookies</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep_time</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + random.random() * <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="搜索代码"><a href="#搜索代码" class="headerlink" title="搜索代码"></a>搜索代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, page</span>):</span></span><br><span class="line">    <span class="keyword">await</span> page.type(<span class="string">&#x27;#q&#x27;</span>, <span class="string">&quot;经济学&quot;</span>, &#123;<span class="string">&#x27;delay&#x27;</span>: input_time_random()&#125;)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(self.sleep_time)</span><br><span class="line">    <span class="keyword">await</span> page.click(<span class="string">&#x27;#J_TSearchForm &gt; div.search-button &gt; button&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(self.sleep_time)</span><br><span class="line">    <span class="keyword">await</span> page.waitFor(<span class="number">5000</span>)</span><br><span class="line">    <span class="comment"># turn to page</span></span><br><span class="line">    <span class="comment"># await page.evaluate(&#x27;window.scrollBy(0, window.innerHeight)&#x27;)</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> page.click(<span class="string">&#x27;#mainsrp-pager &gt; div &gt; div &gt; div &gt; ul &gt; li.item.next &gt; a&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">&quot;click failed&quot;</span>)</span><br><span class="line">    <span class="comment"># await asyncio.sleep(self.sleep_time)</span></span><br><span class="line">    print(<span class="keyword">await</span> page.content())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pyppeteer网易云歌词</title>
      <link href="/2019/09/27/Pyppeteer%20%E7%BD%91%E6%98%93%E4%BA%91%E6%AD%8C%E8%AF%8D/"/>
      <url>/2019/09/27/Pyppeteer%20%E7%BD%91%E6%98%93%E4%BA%91%E6%AD%8C%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="Pyppeteer-iframe操作"><a href="#Pyppeteer-iframe操作" class="headerlink" title="Pyppeteer iframe操作"></a>Pyppeteer iframe操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://music.163.com/#&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">screen_size</span>():</span></span><br><span class="line">    <span class="comment"># 使用tkinter获取屏幕大小</span></span><br><span class="line">    <span class="keyword">import</span> tkinter</span><br><span class="line">    tk = tkinter.Tk()</span><br><span class="line">    width = tk.winfo_screenwidth()</span><br><span class="line">    height = tk.winfo_screenheight()</span><br><span class="line">    tk.quit()</span><br><span class="line">    <span class="keyword">return</span> width, height</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建浏览器对象，接受字典形式或键值对配置如设置浏览器界面大小,&#x27;--disable-infobars&#x27;关闭提示</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch(</span><br><span class="line">        &#123;<span class="string">&#x27;headless&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">         <span class="string">&#x27;args&#x27;</span>: [<span class="string">&#x27;--start-maximized&#x27;</span>, <span class="string">&#x27;--disable-infobars&#x27;</span>]&#125;)</span><br><span class="line">    <span class="comment"># 创建一个页面对象</span></span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="comment"># 设置网页可视区域大小</span></span><br><span class="line">    width, height = screen_size()</span><br><span class="line">    <span class="keyword">await</span> page.setViewport(&#123;</span><br><span class="line">        <span class="string">&quot;width&quot;</span>: width,</span><br><span class="line">        <span class="string">&quot;height&quot;</span>: height</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">await</span> page.goto(url)</span><br><span class="line">    <span class="comment"># 页面等待3秒</span></span><br><span class="line">    <span class="keyword">await</span> page.waitFor(<span class="number">3000</span>)</span><br><span class="line">    musicName = <span class="string">&#x27;余情未了&#x27;</span></span><br><span class="line">    <span class="keyword">await</span> page.type(<span class="string">&#x27;.txt.j-flag&#x27;</span>, musicName, &#123;<span class="string">&#x27;delay&#x27;</span>: <span class="number">0</span>&#125;)</span><br><span class="line">    <span class="keyword">await</span> page.keyboard.press(<span class="string">&#x27;Enter&#x27;</span>)</span><br><span class="line">    <span class="comment"># await page.waitForNavigation()</span></span><br><span class="line">    <span class="comment"># await page.waitForSelector(&quot;.srchsongst&quot;)</span></span><br><span class="line">    <span class="keyword">await</span> page.waitFor(<span class="number">5000</span>)</span><br><span class="line">    frame_list = page.frames</span><br><span class="line">    <span class="keyword">for</span> frame <span class="keyword">in</span> frame_list:</span><br><span class="line">        <span class="keyword">if</span> frame.name == <span class="string">&quot;contentFrame&quot;</span>:</span><br><span class="line">            contentFrame = frame</span><br><span class="line">            <span class="comment"># SONG_LS_SELECTOR = await contentFrame.querySelector(&#x27;.srchsongst&#x27;)</span></span><br><span class="line">            FirstSong = <span class="keyword">await</span> contentFrame.querySelector(<span class="string">&#x27;.srchsongst div.text &gt; a&#x27;</span>)</span><br><span class="line">            print(FirstSong)</span><br><span class="line">            FirstSongUrl = <span class="keyword">await</span> (<span class="keyword">await</span> FirstSong.getProperty(<span class="string">&#x27;href&#x27;</span>)).jsonValue()</span><br><span class="line">            print(FirstSongUrl, type(FirstSongUrl))</span><br><span class="line">            <span class="comment"># 进入歌曲页面</span></span><br><span class="line">            <span class="keyword">await</span> page.goto(FirstSongUrl)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取歌曲页面嵌套的iframe</span></span><br><span class="line">    <span class="keyword">await</span> page.waitFor(<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">    frame_list = page.frames</span><br><span class="line">    <span class="keyword">for</span> frame <span class="keyword">in</span> frame_list:</span><br><span class="line">        <span class="keyword">if</span> frame.name == <span class="string">&quot;contentFrame&quot;</span>:</span><br><span class="line">            songFrame = frame</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 点击展开</span></span><br><span class="line">            unfoldButton = <span class="keyword">await</span> songFrame.querySelector(<span class="string">&#x27;#flag_ctrl&#x27;</span>)</span><br><span class="line">            <span class="keyword">await</span> unfoldButton.click()</span><br><span class="line">            <span class="comment"># 获取歌词</span></span><br><span class="line">            LYRIC_SELECTOR = <span class="keyword">await</span> songFrame.querySelector(<span class="string">&#x27;#lyric-content&#x27;</span>)</span><br><span class="line">            text = <span class="keyword">await</span> songFrame.evaluate(<span class="string">&#x27;(element) =&gt; element.innerText&#x27;</span>, LYRIC_SELECTOR)</span><br><span class="line">            print(text)</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">&quot;song.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(text)</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建异步池并执行main函数</span></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Verify 统计滑块轨迹与缺口识别</title>
      <link href="/2019/09/26/Verify%20%E7%BB%9F%E8%AE%A1%E6%BB%91%E5%9D%97%E8%BD%A8%E8%BF%B9%E4%B8%8E%E7%BC%BA%E5%8F%A3%E8%AF%86%E5%88%AB/"/>
      <url>/2019/09/26/Verify%20%E7%BB%9F%E8%AE%A1%E6%BB%91%E5%9D%97%E8%BD%A8%E8%BF%B9%E4%B8%8E%E7%BC%BA%E5%8F%A3%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="缺口识别"><a href="#缺口识别" class="headerlink" title="缺口识别"></a>缺口识别</h3><p>方式一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findfic</span>(<span class="params">self, target=<span class="string">&#x27;background.png&#x27;</span>, template=<span class="string">&#x27;slider.png&#x27;</span></span>):</span></span><br><span class="line">target_rgb = cv2.imread(target)</span><br><span class="line">target_gray = cv2.cvtColor(target_rgb, cv2.COLOR_BGR2GRAY)</span><br><span class="line">template_rgb = cv2.imread(template, <span class="number">0</span>)</span><br><span class="line">res = cv2.matchTemplate(target_gray, template_rgb, cv2.TM_CCOEFF_NORMED)</span><br><span class="line">value = cv2.minMaxLoc(res)</span><br><span class="line">a, b, c, d = value</span><br><span class="line"><span class="keyword">if</span> abs(a) &gt;= abs(b):</span><br><span class="line">distance = c[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">distance = d[<span class="number">0</span>]</span><br><span class="line">distance = distance * (<span class="number">278</span> / <span class="number">360</span>)</span><br><span class="line"><span class="keyword">return</span> distance</span><br></pre></td></tr></table></figure><p>方式二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pos</span>(<span class="params">image</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    缺口轮廓检测</span></span><br><span class="line"><span class="string">    对付腾讯滑块够用</span></span><br><span class="line"><span class="string">    该方法识别率 95% 左右</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    blurred = cv.GaussianBlur(image, (<span class="number">5</span>, <span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line">    canny = cv.Canny(blurred, <span class="number">200</span>, <span class="number">400</span>)</span><br><span class="line">    contours, hierarchy = cv.findContours(canny, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)</span><br><span class="line">    <span class="keyword">for</span> i, contour <span class="keyword">in</span> enumerate(contours):</span><br><span class="line">        m = cv.moments(contour)</span><br><span class="line">        <span class="keyword">if</span> m[<span class="string">&#x27;m00&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">            cx = cy = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cx, cy = m[<span class="string">&#x27;m10&#x27;</span>] / m[<span class="string">&#x27;m00&#x27;</span>], m[<span class="string">&#x27;m01&#x27;</span>] / m[<span class="string">&#x27;m00&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="number">6000</span> &lt; cv.contourArea(contour) &lt; <span class="number">8000</span> <span class="keyword">and</span> <span class="number">370</span> &lt; cv.arcLength(contour, <span class="literal">True</span>) &lt; <span class="number">390</span>:</span><br><span class="line">            <span class="keyword">if</span> cx &lt; <span class="number">400</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            x, y, w, h = cv.boundingRect(contour)  <span class="comment"># 外接矩形</span></span><br><span class="line">            cv.rectangle(image, (x, y), (x + w, y + h), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">            cv.imshow(<span class="string">&#x27;image&#x27;</span>, image)</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="滑块轨迹"><a href="#滑块轨迹" class="headerlink" title="滑块轨迹"></a>滑块轨迹</h3><p>方式一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tracks</span>(<span class="params">self, distance</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">传入经过计算的实际缺口距离，用于生成轨迹</span></span><br><span class="line"><span class="string">:param distance:</span></span><br><span class="line"><span class="string">:return:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">valve = round(random.uniform(<span class="number">0.55</span>, <span class="number">0.75</span>), <span class="number">2</span>)  <span class="comment"># 分割加减速路径的阀值</span></span><br><span class="line">distance += <span class="number">20</span>  <span class="comment"># 划过缺口20px</span></span><br><span class="line">v, t, sum = <span class="number">0</span>, <span class="number">0.2</span>, <span class="number">0</span>  <span class="comment"># 初始速度，初始计算周期，累积滑动总距的变量</span></span><br><span class="line">plus = []  <span class="comment"># 用于记录轨迹</span></span><br><span class="line">mid = distance * valve  <span class="comment"># 将滑动距离分段，一段加速度，一段减速度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> sum &lt; distance:</span><br><span class="line"><span class="keyword">if</span> sum &lt; mid:</span><br><span class="line">a = round(random.uniform(<span class="number">2.5</span>, <span class="number">3.5</span>), <span class="number">1</span>)  <span class="comment"># 指定范围随机产生一个加速度</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">a = -(round(random.uniform(<span class="number">2.0</span>, <span class="number">3.0</span>), <span class="number">1</span>))  <span class="comment"># 指定范围随机产生一个减速的加速度</span></span><br><span class="line">s = v * t + <span class="number">0.5</span> * a * (t ** <span class="number">2</span>)  <span class="comment"># 一个周期需要滑动的距离</span></span><br><span class="line">v = v + a * t  <span class="comment"># 一个周期结束时的速度</span></span><br><span class="line">sum += s</span><br><span class="line">plus.append(round(s))</span><br><span class="line"></span><br><span class="line">reduce = [<span class="number">-3</span>, <span class="number">-3</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>]  <span class="comment"># 手动制造回滑的轨迹累积20px</span></span><br><span class="line"><span class="keyword">return</span> &#123;<span class="string">&#x27;plus&#x27;</span>: plus, <span class="string">&#x27;reduce&#x27;</span>: reduce&#125;</span><br></pre></td></tr></table></figure><p>方式二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_track</span>(<span class="params">distance</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">根据偏移量和手动操作模拟计算移动轨迹</span></span><br><span class="line"><span class="string">:param distance: 偏移量</span></span><br><span class="line"><span class="string">:return: 移动轨迹</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 移动轨迹</span></span><br><span class="line">tracks = []</span><br><span class="line"><span class="comment"># 当前位移</span></span><br><span class="line">current = <span class="number">0</span></span><br><span class="line"><span class="comment"># 减速阈值</span></span><br><span class="line">mid = distance * <span class="number">4</span> / <span class="number">5</span></span><br><span class="line"><span class="comment"># 时间间隔</span></span><br><span class="line">t = <span class="number">0.2</span></span><br><span class="line"><span class="comment"># 初始速度</span></span><br><span class="line">v = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> current &lt; distance:</span><br><span class="line"><span class="keyword">if</span> current &lt; mid:</span><br><span class="line">a = random.uniform(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">a = -(random.uniform(<span class="number">12.5</span>, <span class="number">13.5</span>))</span><br><span class="line">v0 = v</span><br><span class="line">v = v0 + a * t</span><br><span class="line">x = v0 * t + <span class="number">1</span> / <span class="number">2</span> * a * t * t</span><br><span class="line">current += x</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">0.6</span> &lt; current - distance &lt; <span class="number">1</span>:</span><br><span class="line">x = x - <span class="number">0.53</span></span><br><span class="line">tracks.append(round(x, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> <span class="number">1</span> &lt; current - distance &lt; <span class="number">1.5</span>:</span><br><span class="line">x = x - <span class="number">1.4</span></span><br><span class="line">tracks.append(round(x, <span class="number">2</span>))</span><br><span class="line"><span class="keyword">elif</span> <span class="number">1.5</span> &lt; current - distance &lt; <span class="number">3</span>:</span><br><span class="line">x = x - <span class="number">1.8</span></span><br><span class="line">tracks.append(round(x, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">tracks.append(round(x, <span class="number">2</span>))</span><br><span class="line"><span class="keyword">return</span> tracks</span><br></pre></td></tr></table></figure><p>方式三</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ease_out_quad</span>(<span class="params">self, x</span>):</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> - (<span class="number">1</span> - x) * (<span class="number">1</span> - x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ease_out_quart</span>(<span class="params">self, x</span>):</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> - pow(<span class="number">1</span> - x, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ease_out_expo</span>(<span class="params">self, x</span>):</span></span><br><span class="line"><span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> - pow(<span class="number">2</span>, <span class="number">-10</span> * x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 轨迹算法抄自网上</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tracks_2</span>(<span class="params">self, distance, seconds, ease_func</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">根据轨迹离散分布生成</span></span><br><span class="line"><span class="string">:param distance: 缺口位置</span></span><br><span class="line"><span class="string">:param seconds:  时间</span></span><br><span class="line"><span class="string">:param ease_func: 生成函数</span></span><br><span class="line"><span class="string">:return: 轨迹数组</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">distance += <span class="number">20</span></span><br><span class="line"></span><br><span class="line">tracks = [<span class="number">0</span>]</span><br><span class="line">offsets = [<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> np.arange(<span class="number">0.0</span>, seconds, <span class="number">0.1</span>):</span><br><span class="line"></span><br><span class="line">ease = ease_func</span><br><span class="line"></span><br><span class="line">offset = round(ease(t / seconds) * distance)</span><br><span class="line"></span><br><span class="line">tracks.append(offset - offsets[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">offsets.append(offset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了去除增加的20</span></span><br><span class="line">tracks.extend([<span class="number">-3</span>, <span class="number">-2</span>, <span class="number">-3</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">-0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tracks</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pyppeteer Browser和Page</title>
      <link href="/2019/09/25/Pyppeteer%20Browser%E5%92%8CPage/"/>
      <url>/2019/09/25/Pyppeteer%20Browser%E5%92%8CPage/</url>
      
        <content type="html"><![CDATA[<h3 id="Browser类"><a href="#Browser类" class="headerlink" title="Browser类"></a>Browser类</h3><p>该类可以对浏览器进行管理，包括但不限于 打开、关闭、取值等。<br>1、创建隐身浏览器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">browser = <span class="keyword">await</span> launch(&#123;<span class="string">&#x27;headless&#x27;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">context = <span class="keyword">await</span> browser.createIncognitoBrowserContext()</span><br></pre></td></tr></table></figure><ul><li>browser.process：返回浏览器进程</li><li>browser.disconnect():断开浏览器</li></ul><h3 id="Page类"><a href="#Page类" class="headerlink" title="Page类"></a>Page类</h3><h4 id="客户端模拟"><a href="#客户端模拟" class="headerlink" title="客户端模拟"></a>客户端模拟</h4><ol><li>page.setViewport: 设置视图大小</li><li>page.setUserAget: 设置UserAgent</li><li>page.SetCookie： 设置Cookie</li></ol><h4 id="模拟输入"><a href="#模拟输入" class="headerlink" title="模拟输入"></a>模拟输入</h4><ol><li>page.mouse</li><li>page.keyboard</li><li>page.hover(selector)                模拟鼠标移动到被选择元素上</li><li>page.select(selector, …values)        在被选择元素上模拟选择select选项</li><li>page.tap(selector)                    在被选择元素上模拟触摸</li></ol><h4 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h4><ol><li>page.goto(url, options)：访问URL</li><li>page.goBack(options: dict = None, **kwargs)：返回上一个网页</li><li>page.goForward(options: dict = None, **kwargs)：跳转到下一页</li><li>page.reload():刷新本页</li></ol><h4 id="信息查看"><a href="#信息查看" class="headerlink" title="信息查看"></a>信息查看</h4><ol><li>page.url()：获取此页面URL</li><li>page.content()：获取页面的完整 HTML 内容</li><li>page.frames()：获取此页面的所有 frame</li><li>page.mainFrame()：获取 frame 页面的主要内容</li><li>page.metrics()：返回页面属性指标的字典</li><li>page.target()：返回此页面创建的目标</li><li>page.title()：获取页面标题</li><li>page.viewport()：返回视图字典</li></ol><h4 id="注入javascript和style"><a href="#注入javascript和style" class="headerlink" title="注入javascript和style"></a>注入javascript和style</h4><ol><li>page.addScriptTag(options)：将脚本标记添加到此页面</li><li>page.addStyleTag(options)：将样式或链接标记添加到此页面</li></ol><h4 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h4><ol><li>waitFor(): 等待页面上匹配的函数，超时或元素。</li><li>waitForFunction(): 等到函数完成并返回一个值</li><li>waitForXPath(): 等到 xpath 页面上出现匹配的元素</li><li>waitForNavigation(): 等到网页跳转</li></ol><h3 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h3><ol><li><p>获取元素坐标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">el = <span class="keyword">await</span> page.querySelector(<span class="string">&#x27;#nc_1_n1z&#x27;</span>)</span><br><span class="line">box = <span class="keyword">await</span> el.boundingBox()</span><br></pre></td></tr></table></figure></li><li><p>滚动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># await page.evaluate(&#x27;window.scrollBy(0, window.innerHeight)&#x27;) #淘宝滚动加载用</span></span><br><span class="line"><span class="keyword">await</span> page.evaluate(<span class="string">&#x27;window.scrollBy(0, document.body.scrollHeight)&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pyppeteer用法概览</title>
      <link href="/2019/09/25/Pyppeteer%20%E7%94%A8%E6%B3%95%E6%A6%82%E8%A7%88/"/>
      <url>/2019/09/25/Pyppeteer%20%E7%94%A8%E6%B3%95%E6%A6%82%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>目标网址：<a href="http://www.pudong.gov.cn/shpd/specialdepts/specialpolicy/">http://www.pudong.gov.cn/shpd/specialdepts/specialpolicy/</a><br>官方文档:<a href="https://miyakogi.github.io/pyppeteer/reference.html">https://miyakogi.github.io/pyppeteer/reference.html</a><br>当用selenium去访问该网站时，哪怕开启了<strong>开发者选项</strong>也会有其他特征被识别，使用selenium操作Dom元素（包括ActionChains,execute_script等方法），chromedriver就会留下指纹特征，使用js轻易的就能识别出来。<br>而现在的js都是经过混淆加密，要找到这些指纹并且破解费时费力，即便使用 mitmproxy 来过滤js，你需要先知道指纹所在的js以及所有特征字符。<br>万幸的是新秀Puppeteer异军突起，逐渐受到了爬虫界的关注。</p><p>第一次运行pyppeteer就会自动安装chromium。<br>Github：<a href="https://github.com/miyakogi/pyppeteer">https://github.com/miyakogi/pyppeteer</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> chromium_downloader</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;下载地址:&quot;</span>, chromium_downloader.get_url())</span><br><span class="line">print(<span class="string">&quot;安装路径:&quot;</span>, chromium_downloader.chromiumExecutable.get(<span class="string">&#x27;win64&#x27;</span>))</span><br><span class="line">print(<span class="string">&quot;校验环境:&quot;</span>, chromium_downloader.check_chromium())</span><br></pre></td></tr></table></figure><h3 id="错误汇总："><a href="#错误汇总：" class="headerlink" title="错误汇总："></a>错误汇总：</h3><ul><li><p><strong>问题：</strong> 程序运行自动下载chromium提示ssl错误 HTTPSConnectionPool(host=’storage.googleapis.com’, port=443)</p></li><li><p><strong>解决：</strong> 将<code>chromium_downloader.py</code>里<code>DEFAULT_DOWNLOAD_HOST</code> = “<a href="https://storage.googleapis.com&quot;/">https://storage.googleapis.com&quot;</a> 替换为 <code>DEFAULT_DOWNLOAD_HOST</code> = ‘<a href="http://storage.googleapis.com&/#39;">http://storage.googleapis.com&#39;</a> 即可。</p></li><li><p><strong>问题：</strong> Protocol error Runtime.evaluate:target close</p></li><li><p><strong>解决：</strong> 修改connection.py文件44行增加ping_timeout=None</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self._ws = websockets.client.connect(</span><br><span class="line">        self._url, max_size=<span class="literal">None</span>, loop=self._loop, ping_interval=<span class="literal">None</span>, ping_timeout=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><p><strong>问题：</strong> OSError: Unable to remove Temporary User Data</p></li><li><p><strong>解决：</strong> 指定userData位置(已测试OK) 或 调用browser.close前先调用page.close(未测试) 或 去除 “–no-sandbox”（但Linux下貌似要设置）</p></li><li><p><strong>注意：</strong> userData不指定的话，chrome会自动新建一个临时目录使用，在浏览器退出的时候会自动删除临时目录,同一个用户目录不能被两个chrome进程使用，如果你要多开，记得分别指定用户目录。</p></li><li><p><strong>问题：</strong> pyppeteer.errors.BrowserError: Failed to connect to browser</p></li><li><p><strong>解决：</strong> 启动时添加–disable-setuid-sandbox选项</p></li><li><p><strong>问题：</strong>chromium浏览器多开页面卡死</p></li><li><p><strong>解决：</strong> 初始化的时候launch里添加’dumpio’:True</p></li></ul><h3 id="操作汇总"><a href="#操作汇总" class="headerlink" title="操作汇总"></a>操作汇总</h3><p>1、简单示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">screen_size</span>():</span></span><br><span class="line">    <span class="comment"># 使用tkinter获取屏幕大小</span></span><br><span class="line">    <span class="keyword">import</span> tkinter</span><br><span class="line">    tk = tkinter.Tk()</span><br><span class="line">    width = tk.winfo_screenwidth()</span><br><span class="line">    height = tk.winfo_screenheight()</span><br><span class="line">    tk.quit()</span><br><span class="line">    <span class="keyword">return</span> width, height</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建浏览器对象，接受字典形式或键值对配置如设置浏览器界面大小,&#x27;--disable-infobars&#x27;关闭提示</span></span><br><span class="line">    browser = <span class="keyword">await</span> launch(</span><br><span class="line">        &#123;<span class="string">&#x27;headless&#x27;</span>: <span class="literal">False</span>, <span class="string">&quot;userDataDir&quot;</span>: <span class="string">r&quot;D:/userData&quot;</span>, <span class="string">&#x27;args&#x27;</span>: [<span class="string">&#x27;--start-maximized&#x27;</span>, <span class="string">&quot;--no-sandbox&quot;</span>,<span class="string">&#x27;--disable-infobars&#x27;</span>]&#125;)</span><br><span class="line"><span class="comment"># 创建一个页面对象</span></span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()  </span><br><span class="line">    print(<span class="string">&quot;viewport:&quot;</span>, page.viewport)</span><br><span class="line">    <span class="comment"># 设置网页可视区域大小</span></span><br><span class="line">    width, height = screen_size()</span><br><span class="line">    <span class="keyword">await</span> page.setViewport(&#123;</span><br><span class="line">        <span class="string">&quot;width&quot;</span>: width,</span><br><span class="line">        <span class="string">&quot;height&quot;</span>: height</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">await</span> page.goto(url)</span><br><span class="line"><span class="comment"># 页面等待3秒</span></span><br><span class="line">    <span class="keyword">await</span> page.waitFor(<span class="number">3000</span>)</span><br><span class="line">    <span class="keyword">await</span> page.screenshot(&#123;<span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;example.png&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建异步池并执行main函数</span></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><p>2、隐藏 window.navigator.webdriver</p><ul><li>修改Pyppeteer源代码中的 launcher.py文件，约60行左右，如下图：</li></ul><p><img src="https://i.loli.net/2019/09/20/ZI4iFVheQPuTpaA.png"></p><ul><li>Javascript 注入方式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.evaluateOnNewDocument(<span class="string">&#x27;() =&gt;&#123; Object.defineProperties(navigator,&#x27;</span><span class="string">&#x27;&#123; webdriver:&#123; get: () =&gt; false &#125; &#125;) &#125;&#x27;</span>)  </span><br></pre></td></tr></table></figure><p>3、常用配置字段</p><table><thead><tr><th>语法</th><th>值类型</th><th>描述</th></tr></thead><tbody><tr><td>ignorehttpserrrors</td><td>bool</td><td>是否忽略HTTPS错误。默认为‘假’</td></tr><tr><td>headless</td><td>bool</td><td>浏览器是否无头</td></tr><tr><td>viewport</td><td>dict</td><td>可视区域</td></tr><tr><td>userDataDir</td><td>str</td><td>用户数据目录路径</td></tr><tr><td>log level</td><td>（int str）</td><td>打印日志的日志级别</td></tr><tr><td>dumpio</td><td>bool</td><td>是否通过管道传输浏览器进程stdout和stderr到process.stdout和process.stderr。默认为“假”。</td></tr><tr><td>args</td><td>list[str]</td><td>要传递给浏览器的附加参数（标志）过程</td></tr><tr><td>slowmo</td><td>int</td><td>指定的毫秒数减慢pyppeteer的速度</td></tr></tbody></table><p>4、页面解析<br>相对puppeteer元素选择器方法名$变为querySelector 即<code>Page.querySelector()/Page.querySelectorAll()/Page.xpath()</code><br>用 page.querySelector如果没有找到指定的对象，则返回None，而不是像selenium抛出异常。</p><p>5、补充内容</p><ul><li>设置请求头: <code>await page.setUserAgent(&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.36)</code></li><li>页面源码：<code>await page.content()</code></li><li>网页存为pdf（需在无头模式下进行操作）:<code>await page.pdf(path=&#39;example.pdf&#39;)</code></li><li>网页截图：见示例,指定保存格式 type、清晰度 quality、是否全屏 fullPage、裁切 clip 等各个参数实现截图。</li><li>获取元素文本/链接：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">elements = <span class="keyword">await</span> page.xpath(<span class="string">&#x27;/html/body/main/div[1]/div/div[1]/div/dl/dd[1]/a&#x27;</span>)</span><br><span class="line"><span class="keyword">await</span> (<span class="keyword">await</span> element.getProperty(<span class="string">&#x27;textContent&#x27;</span>)).jsonValue()</span><br><span class="line"></span><br><span class="line">element = <span class="keyword">await</span> page.querySelector(<span class="string">&#x27;h1&#x27;</span>)</span><br><span class="line">text = <span class="keyword">await</span> page.evaluate(<span class="string">&#x27;(element) =&gt; element.textContent&#x27;</span>, element)</span><br><span class="line"></span><br><span class="line">error = <span class="keyword">await</span> page.Jeval(<span class="string">&#x27;#J_Message &gt; .error&#x27;</span>, <span class="string">&#x27;node =&gt; node.textContent&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>导出/加载Cookie: <code>await page.cookies()/await page.setCookie(*cookies)</code></li><li>页面加载前Js注入（hook）：<code>await page.evaluateOnNewDocument()</code></li><li>执行JS：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># force_expr为False则执行的是函数</span></span><br><span class="line">dimensions = <span class="keyword">await</span> page.evaluate(<span class="string">&#x27;&#x27;&#x27;() =&gt; &#123;</span></span><br><span class="line"><span class="string">       return &#123;</span></span><br><span class="line"><span class="string">           width: document.documentElement.clientWidth,</span></span><br><span class="line"><span class="string">           height: document.documentElement.clientHeight,</span></span><br><span class="line"><span class="string">           deviceScaleFactor: window.devicePixelRatio,</span></span><br><span class="line"><span class="string">       &#125;</span></span><br><span class="line"><span class="string">   &#125;&#x27;&#x27;&#x27;</span>, force_expr=<span class="literal">False</span>) </span><br><span class="line"><span class="comment"># True 执行表达式</span></span><br><span class="line">content = <span class="keyword">await</span> page.evaluate(pageFunction=<span class="string">&#x27;document.body.textContent&#x27;</span>, force_expr=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/10-pyppeteer/1-pyppeteer.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Verify 云片验证码</title>
      <link href="/2019/09/25/Verify%20%E9%AA%8C%E8%AF%81%E7%A0%81%E4%BA%91%E7%89%87/"/>
      <url>/2019/09/25/Verify%20%E9%AA%8C%E8%AF%81%E7%A0%81%E4%BA%91%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h2 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h2><p>1、参数值i,k 由var s = this.encrypt(e);生成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">key: <span class="string">&quot;jsonpRequest&quot;</span>,</span><br><span class="line">value: <span class="function"><span class="keyword">function</span>(<span class="params">t, e, n, r</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">3</span> &lt; <span class="built_in">arguments</span>.length &amp;&amp; <span class="keyword">void</span> <span class="number">0</span> !== r ? r : <span class="literal">null</span></span><br><span class="line">  , o = <span class="built_in">this</span>.cbManager.preAdd()</span><br><span class="line">  , a = location.origin;</span><br><span class="line">e.fp = <span class="built_in">this</span>.fingerprint,</span><br><span class="line">e.address = a,</span><br><span class="line">e.yp_riddler_id = st.cookie.get(<span class="string">&quot;yp_riddler_id&quot;</span>) || <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="built_in">this</span>.encrypt(e);</span><br><span class="line">t = <span class="string">&quot;&quot;</span>.concat(<span class="built_in">this</span>.HOSTS, <span class="string">&quot;/&quot;</span>).concat(<span class="built_in">this</span>.version).concat(t, <span class="string">&quot;?cb=&quot;</span>).concat(o, <span class="string">&quot;&amp;i=&quot;</span>).concat(<span class="built_in">encodeURIComponent</span>(s.i), <span class="string">&quot;&amp;k=&quot;</span>).concat(<span class="built_in">encodeURIComponent</span>(s.k)),</span><br><span class="line"><span class="built_in">this</span>.token &amp;&amp; (t += <span class="string">&quot;&amp;token=&quot;</span>.concat(<span class="built_in">this</span>.token)),</span><br><span class="line"><span class="built_in">this</span>.APP_ID &amp;&amp; (t += <span class="string">&quot;&amp;captchaId=&quot;</span>.concat(<span class="built_in">this</span>.APP_ID)),</span><br><span class="line"><span class="built_in">this</span>.cbManager.add(o, t, n, i)</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>2、参数值cb由 o = this.cbManager.preAdd()生成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">key: <span class="string">&quot;preAdd&quot;</span>,</span><br><span class="line">value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> t; (t = <span class="built_in">Math</span>.random().toString(<span class="number">32</span>).replace(<span class="string">&quot;0.&quot;</span>, <span class="string">&quot;&quot;</span>))<span class="keyword">in</span> <span class="built_in">this</span>.pool; )</span><br><span class="line">;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.pool[t] = &#123;</span><br><span class="line">ts: <span class="number">1</span> / <span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line">t</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、继续追踪encrypt函数，发现RSA加密处这段代码和jsencrypt的RSA加密方式相似，直接用jsencrypt.js进行生成。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">key: <span class="string">&quot;rsaEncrypt&quot;</span>,</span><br><span class="line">value: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> e = <span class="keyword">new</span> it.a;</span><br><span class="line"><span class="keyword">return</span> e.setPublicKey(<span class="built_in">this</span>.RSA_PUBLIC_KEY),</span><br><span class="line">e.encrypt(t)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="轨迹分析"><a href="#轨迹分析" class="headerlink" title="轨迹分析"></a>轨迹分析</h2><p>this.MAX_POINTS_AMOUN 50<br>e = {points: Array(33), distanceX: 0.2870967741935484},points是滑动轨迹数组,distanceX是this.offsetX / n。<br>1、处理轨迹数据<br>this.position是轨迹数组,reducePoints对数据进行处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">key: <span class="string">&quot;reducePoints&quot;</span>,</span><br><span class="line">value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> t = k(<span class="built_in">this</span>.position);</span><br><span class="line"><span class="keyword">if</span> (t.length &lt;= <span class="built_in">this</span>.MAX_POINTS_AMOUNT)</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = [t[<span class="number">0</span>]]</span><br><span class="line">  , n = t[t.length - <span class="number">1</span>]</span><br><span class="line">  , r = <span class="built_in">Math</span>.floor(t.length / <span class="built_in">this</span>.MAX_POINTS_AMOUNT);</span><br><span class="line"><span class="keyword">if</span> (r &lt; <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; t.length - <span class="number">2</span>; i += r)</span><br><span class="line">e.push(t[i]);</span><br><span class="line"><span class="keyword">return</span> e.push(n),</span><br><span class="line">e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、构造大轨迹,容易分析得出构造方式为【X坐标 Y坐标 滑动时间】,Y在一定区间内浮动。<br>0: (3) [1114, 1207, 14]<br>1: (3) [1114, 1207, 81]<br>2: (3) [1115, 1207, 496]</p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Verify 网易滑块</title>
      <link href="/2019/09/25/Verify%20%E7%BD%91%E6%98%93%E6%BB%91%E5%9D%97%E4%B8%8E%E4%BA%AC%E4%B8%9C%E6%BB%91%E5%9D%97/"/>
      <url>/2019/09/25/Verify%20%E7%BD%91%E6%98%93%E6%BB%91%E5%9D%97%E4%B8%8E%E4%BA%AC%E4%B8%9C%E6%BB%91%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>模拟拖动滑块总的分为如下四个部分：</p><ol><li>下载背景图与滑块图</li><li>过opencv识别缺口位置得到距离</li><li>据距离生成轨迹</li><li>模拟拖动</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">来自stackoverflow的示例</span><br><span class="line">const example = <span class="keyword">await</span> page.$(<span class="string">&#x27;#example&#x27;</span>);</span><br><span class="line">const bounding_box = <span class="keyword">await</span> example.boundingBox();</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> page.mouse.move(bounding_box.x + bounding_box.width / <span class="number">2</span>, bounding_box.y + bounding_box.height / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">await</span> page.mouse.down();</span><br><span class="line"><span class="keyword">await</span> page.mouse.move(<span class="number">126</span>, <span class="number">19</span>);</span><br><span class="line"><span class="keyword">await</span> page.mouse.up();</span><br></pre></td></tr></table></figure><p>1、图片处理</p><p>网页中滑块的背景图是经过缩放的，而我们识别出来的缺口距离是下载来的原图大小，并且页面滑块不是从背景图最左侧开始的，可能距离背景图左边缘有一定的距离。<br>那么实际用于计算轨迹的距离应该是：识别距离 x(w/W) - s，将网页缩放考虑进取。</p><p>2、滑动验证变种处理</p><p>背景图由分割的图片组组成，遇到这种情况直接截图处理。</p><p>背景图中随机干扰图形，这种先根据滑块的偏移锁定 y 轴坐标，识别出来的效果用 y 轴坐标范围来效验，找出最大可能性的坐标点。</p><p>直接拖动的，这种在目前淘宝使用，重心在拖动轨迹的处理，同时注意在输入账号密码的时候检测输入速度。</p><p>3、滑动验证可能进化的方向</p><p>增加图形干扰，使识别难度加大，处理方法还是先根据滑块锁定一个坐标范围最后在识别出来的点上效验。</p><p>增加更细的轨迹检测，将后台轨迹识别的粒度细化，结合机器学习绘制轨迹，与正常轨迹对比；这种一般在生成时增加更多随机因子，同时表现出更多的人为特征，如过滑与回滑、滑动中抖动等。</p><p>行为检测，从输入账号密码到拖动滑块，检测整个过程鼠标的移动轨迹。</p><p>将目前的缺口识别改为内容识别，拖动滑块到指定内容下，这种难度大，结合打码平台。</p><p>更换滑动验证，改为点选、人机交互等方式，那就先期待吧。</p><h2 id="网易滑块"><a href="#网易滑块" class="headerlink" title="网易滑块"></a>网易滑块</h2><p>page.mouse.move中的x,y参数是在页面上的绝对坐标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line">width, height = <span class="number">1366</span>, <span class="number">768</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用tkinter获取屏幕大小</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">screen_size</span>():</span></span><br><span class="line">    <span class="keyword">import</span> tkinter</span><br><span class="line">    tk = tkinter.Tk()</span><br><span class="line">    width = tk.winfo_screenwidth()</span><br><span class="line">    height = tk.winfo_screenheight()</span><br><span class="line">    tk.quit()</span><br><span class="line">    <span class="keyword">return</span> width, height</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_time_random</span>():</span></span><br><span class="line">    <span class="keyword">return</span> random.randint(<span class="number">100</span>, <span class="number">151</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YiDun</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.url = <span class="string">&quot;http://dun.163.com/trial/jigsaw&quot;</span></span><br><span class="line">        self.loop = asyncio.get_event_loop()</span><br><span class="line">        self.loop.run_until_complete(self.main())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">self</span>):</span></span><br><span class="line">        browser = <span class="keyword">await</span> launch(&#123;<span class="string">&#x27;headless&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;args&#x27;</span>: [<span class="string">&#x27;--start-maximized&#x27;</span>]&#125;)</span><br><span class="line">        page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">        <span class="comment"># browser = await launch(headless=False, args=[f&#x27;--window-size=&#123;width&#125;,&#123;height&#125;&#x27;])</span></span><br><span class="line">        <span class="comment"># await page.setViewport(&#123;&#x27;width&#x27;: width, &#x27;height&#x27;: height&#125;)</span></span><br><span class="line">        <span class="comment"># 设置网页可视区域大小</span></span><br><span class="line">        width, height = screen_size()</span><br><span class="line">        <span class="keyword">await</span> page.setViewport(&#123;</span><br><span class="line">            <span class="string">&quot;width&quot;</span>: width,</span><br><span class="line">            <span class="string">&quot;height&quot;</span>: height</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">await</span> page.goto(self.url)</span><br><span class="line">        <span class="keyword">await</span> page.waitFor(<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">        bg = <span class="keyword">await</span> page.xpath(<span class="string">&quot;//img[@class=&#x27;yidun_bg-img&#x27;]&quot;</span>)</span><br><span class="line">        img_bg = <span class="keyword">await</span> (<span class="keyword">await</span> bg[<span class="number">0</span>].getProperty(<span class="string">&#x27;src&#x27;</span>)).jsonValue()</span><br><span class="line">        slide = <span class="keyword">await</span> page.xpath(<span class="string">&quot;//img[@class=&#x27;yidun_jigsaw&#x27;]&quot;</span>)</span><br><span class="line">        img_slide = <span class="keyword">await</span> (<span class="keyword">await</span> slide[<span class="number">0</span>].getProperty(<span class="string">&#x27;src&#x27;</span>)).jsonValue()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (img_name, img_data) <span class="keyword">in</span> zip(</span><br><span class="line">                [<span class="string">&quot;background.jpg&quot;</span>, <span class="string">&quot;slider.png&quot;</span>],</span><br><span class="line">                [img_bg, img_slide]):</span><br><span class="line">            <span class="keyword">with</span> open(img_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                rsp = requests.get(img_data)</span><br><span class="line">                f.write(rsp.content)</span><br><span class="line">        distance = self.get_distance()</span><br><span class="line">        trajectory = self.get_track(distance + <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">await</span> self.move_slide(page, distance)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">move_slide</span>(<span class="params">self, page, distance</span>):</span></span><br><span class="line">        el = <span class="keyword">await</span> page.querySelector(<span class="string">&#x27;div.yidun_slider&#x27;</span>)</span><br><span class="line">        box = <span class="keyword">await</span> el.boundingBox()  <span class="comment"># 一定要先用选择器再取box函数</span></span><br><span class="line">        print(<span class="string">&quot;box:&quot;</span>, box)</span><br><span class="line">        <span class="keyword">await</span> page.hover(<span class="string">&#x27;span.yidun_slider__icon&#x27;</span>)</span><br><span class="line">        <span class="keyword">await</span> page.mouse.down()</span><br><span class="line">        <span class="keyword">await</span> page.waitFor(<span class="number">1000</span>)</span><br><span class="line">        <span class="keyword">await</span> page.mouse.move(box[<span class="string">&#x27;x&#x27;</span>] + distance + box[<span class="string">&#x27;width&#x27;</span>] / <span class="number">2</span> + <span class="number">10</span>, box[<span class="string">&#x27;y&#x27;</span>],</span><br><span class="line">                              &#123;<span class="string">&#x27;steps&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;delay&#x27;</span>: random.randint(<span class="number">2000</span>, <span class="number">4000</span>)&#125;)</span><br><span class="line">        <span class="keyword">await</span> page.mouse.up()</span><br><span class="line">        <span class="keyword">await</span> page.waitFor(<span class="number">100000</span>)</span><br><span class="line">        <span class="comment"># for track in trajectory[&#x27;plus&#x27;]:</span></span><br><span class="line">        <span class="comment">#     await page.mouse.move(track, 0, &#123;&#x27;delay&#x27;: random.randint(1000, 2000)&#125;)</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># print(&quot;mid ok&quot;)</span></span><br><span class="line">        <span class="comment"># await asyncio.sleep(0.5)</span></span><br><span class="line">        <span class="comment"># for track in trajectory[&#x27;reduce&#x27;]:</span></span><br><span class="line">        <span class="comment">#     await page.mouse.move(track, 0, &#123;&#x27;delay&#x27;: random.randint(1000, 2000)&#125;)</span></span><br><span class="line">        <span class="comment"># # 模拟抖动</span></span><br><span class="line">        <span class="comment"># await page.mouse.move(-2, 0, &#123;&#x27;delay&#x27;: random.randint(500, 1000)&#125;)</span></span><br><span class="line">        <span class="comment"># await page.mouse.move(2, 0, &#123;&#x27;delay&#x27;: random.randint(500, 1000)&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_distance</span>(<span class="params">target=<span class="string">&#x27;background.jpg&#x27;</span>, template=<span class="string">&#x27;slider.png&#x27;</span></span>):</span></span><br><span class="line">        target_rgb = cv2.imread(target)</span><br><span class="line"></span><br><span class="line">        target_gray = cv2.cvtColor(target_rgb, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">        template_rgb = cv2.imread(template, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        res = cv2.matchTemplate(target_gray, template_rgb, cv2.TM_CCOEFF_NORMED)</span><br><span class="line">        <span class="comment"># 求这个矩阵的最小值，最大值，并得到最大值，最小值的索引</span></span><br><span class="line">        value = cv2.minMaxLoc(res)</span><br><span class="line">        a, b, c, d = value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> abs(a) &gt;= abs(b):</span><br><span class="line">            distance = c[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            distance = d[<span class="number">0</span>]</span><br><span class="line">        print(value)</span><br><span class="line">        <span class="keyword">return</span> distance</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_track</span>(<span class="params">distance</span>):</span></span><br><span class="line">        <span class="comment"># 生成某个区间的随机数,两位小数</span></span><br><span class="line">        value = round(random.uniform(<span class="number">0.55</span>, <span class="number">0.75</span>), <span class="number">2</span>)  <span class="comment"># 分割加减速路径的阀值</span></span><br><span class="line">        distance += <span class="number">20</span>  <span class="comment"># 划过缺口20px</span></span><br><span class="line">        v, t, sum = <span class="number">0</span>, <span class="number">0.2</span>, <span class="number">0</span>  <span class="comment"># 初始速度，初始计算周期，累积滑动总距的变量</span></span><br><span class="line">        plus = []  <span class="comment"># 用于记录轨迹</span></span><br><span class="line">        mid = distance * value  <span class="comment"># 将滑动距离分段，一段加速度，一段减速度</span></span><br><span class="line">        <span class="keyword">while</span> sum &lt; distance:</span><br><span class="line">            <span class="keyword">if</span> sum &lt; mid:</span><br><span class="line">                a = round(random.uniform(<span class="number">2.5</span>, <span class="number">3.5</span>), <span class="number">1</span>)  <span class="comment"># 指定范围随机产生一个加速度</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a = -(round(random.uniform(<span class="number">2.0</span>, <span class="number">3.0</span>), <span class="number">1</span>))  <span class="comment"># 指定范围随机产生一个减速的加速度</span></span><br><span class="line">            s = v * t + <span class="number">0.5</span> * a * (t ** <span class="number">2</span>)  <span class="comment"># 一个周期需要滑动的距离</span></span><br><span class="line">            v = v + a * t  <span class="comment"># 一个周期结束时的速度</span></span><br><span class="line">            sum += s</span><br><span class="line">            plus.append(round(s))</span><br><span class="line"></span><br><span class="line">        reduce = [<span class="number">-3</span>, <span class="number">-3</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>]  <span class="comment"># 手动制造回滑的轨迹累积20px</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;plus&#x27;</span>: plus, <span class="string">&#x27;reduce&#x27;</span>: reduce&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    yidun = YiDun()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/09/24/8QsigMdaSwyrLxU.gif" alt="演示"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Verify BiliBili滑块</title>
      <link href="/2019/09/25/Verify%20BiliBili%E6%BB%91%E5%9D%97/"/>
      <url>/2019/09/25/Verify%20BiliBili%E6%BB%91%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="登录分析"><a href="#登录分析" class="headerlink" title="登录分析"></a>登录分析</h3><p><strong>目标网址：</strong><a href="https://passport.bilibili.com/login">https://passport.bilibili.com/login</a></p><p>1、selenium定位元素并输入用户名、密码、点击登录等待验证码跳转。</p><p>2、获取Geetest验证码，由canvas是画出来的图片，可采用下列方案：</p><p>方案一：获取图片对象的位置和宽高，返回其左上角和右下角的坐标，调用crop方法裁剪图片，返回Image对象。</p><p><strong>此方法的问题：</strong> Window下 <em>显示设置</em> 若存在缩放则会导致截图偏差需改为100%。</p><p>方案二：执行Js将canvas转为 base64 格式的文件，再由Python解码生成图片。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_to_png</span>(<span class="params">self, js, name</span>):</span></span><br><span class="line">bg_img = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> len(bg_img) &lt; <span class="number">1000</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">bg_img = self.browser.execute_script(js)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># 去除类型，只要数据部分</span></span><br><span class="line">bg_img_source = bg_img[bg_img.find(<span class="string">&#x27;,&#x27;</span>) + <span class="number">1</span>:]</span><br><span class="line">bg_source_data = base64.b64decode(bg_img_source)</span><br><span class="line">file = open(name, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">file.write(bg_source_data)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>3、滑动位移计算</p><ul><li><p>滑块初始距左边界的距离<br>可预先下载图片，用PS打开，查看对应的坐标及其像素，此处我预估在6-10Px范围内，如下图：<br><img src="https://i.loli.net/2019/10/07/qgKS4Con8aulhip.png"></p></li><li><p>缺口位置计算 方案一：像素比对<br>通过比对无缺口图和缺口图的像素，若某一位置的像素值偏差大于设置的阈值，则判定该点为缺口点，返回相应距离。</p></li><li><p>缺口位置计算 方案二：轮廓检测（未成功，可能是本人对opencv不熟的缘故）<br>图片示例出自腾讯防水墙,可以看到此处验证码图片可以处理的非常干净并找出缺口，但是BiliBili的极验，我多次调整阈值干扰线条还是很多。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_position</span>(<span class="params">image</span>):</span></span><br><span class="line">    blurred = cv2.GaussianBlur(image, (<span class="number">5</span>, <span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line">    canny = cv2.Canny(blurred, <span class="number">330</span>, <span class="number">400</span>)</span><br><span class="line">    cv2.imshow(<span class="string">&quot;image&quot;</span>, canny)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    contours, hierarchy = cv2.findContours(canny, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, contour <span class="keyword">in</span> enumerate(contours):</span><br><span class="line">        <span class="comment"># 得到轮廓的矩 字典形式返回</span></span><br><span class="line">        <span class="comment"># 求重心</span></span><br><span class="line">        <span class="comment"># cx=int(M[&#x27;m10&#x27;]/M[&#x27;m00&#x27;])</span></span><br><span class="line">        <span class="comment"># cy=int(M[&#x27;m01&#x27;]/M[&#x27;m00&#x27;])</span></span><br><span class="line">        M = cv2.moments(contour)</span><br><span class="line">        <span class="keyword">if</span> M[<span class="string">&#x27;m00&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">            cx = cy = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cx, cy = M[<span class="string">&#x27;m10&#x27;</span>] / M[<span class="string">&#x27;m00&#x27;</span>], M[<span class="string">&#x27;m01&#x27;</span>] / M[<span class="string">&#x27;m00&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        print(<span class="string">f&quot;my<span class="subst">&#123;i&#125;</span>&quot;</span>, contour, len(contour), cv2.contourArea(contour), cv2.arcLength(contour, <span class="literal">True</span>), cx)</span><br><span class="line">        <span class="comment"># 面积可以使用函数cv22.contourArea()计算得到，也可以用矩（0阶矩），M[&#x27;m00&#x27;]。</span></span><br><span class="line">        <span class="comment"># 轴承可以使用函数cv22.arcLength()计算得到。这个函数的第二参数用来指定对象的形状是闭合的（True），还是打开的（一条曲线）。</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">6000</span> &lt; cv2.contourArea(contour) &lt; <span class="number">8000</span> <span class="keyword">and</span> <span class="number">300</span> &lt; cv2.arcLength(contour, <span class="literal">True</span>) &lt; <span class="number">500</span>:</span><br><span class="line">            <span class="keyword">if</span> cx &lt; <span class="number">500</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            x, y, w, h = cv2.boundingRect(contour)  <span class="comment"># 外接矩形</span></span><br><span class="line">            cv2.rectangle(image, (x, y), (x + w, y + h), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">            cv2.imshow(<span class="string">&#x27;image&#x27;</span>, image)</span><br><span class="line">            cv2.waitKey()</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># img0 = cv2.imread(&#x27;slide.png&#x27;)</span></span><br><span class="line">    img0 = cv2.imread(<span class="string">&#x27;bkBlock.png&#x27;</span>)</span><br><span class="line">    get_position(img0)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/07/BPQUYzMmAT3wsfc.png"></p><p>4、模拟轨迹<br>轨迹算法：借鉴(抄袭)自此文<a href="https://www.jianshu.com/p/3f968958af5a">https://www.jianshu.com/p/3f968958af5a</a></p><p>5 、通过率：模拟滑动100次，成功68次，预估在70%左右(个人感觉是缺口位置不准确导致的)。<br><img src="https://i.loli.net/2019/10/07/rkpPCEK8bXBWs2c.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xpath与css用法概览</title>
      <link href="/2019/09/20/xpath%E4%B8%8Ecss%E7%94%A8%E6%B3%95%E6%A6%82%E8%A7%88/"/>
      <url>/2019/09/20/xpath%E4%B8%8Ecss%E7%94%A8%E6%B3%95%E6%A6%82%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h3 id="xpath-常用操作"><a href="#xpath-常用操作" class="headerlink" title="xpath 常用操作"></a>xpath 常用操作</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>test<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;btn-blue&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;btn-red&quot;</span>&gt;</span>456<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>789<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1、场景一：提取某节点内除去某标签的所有子节点文本 即输出[‘123’,’456’,’789’]</p><p>解决：<code>//div/*[not(self::dd)]/text()</code></p><p>2、场景二：提取所有某标签中不含某属性的节点文本 即输出[‘test’,’789’]</p><p>解决：<code>//div/*[not(@class)]/text()</code></p><p>3、场景三、提取该节点之后的一个兄弟节点文本 若节点为第一个li则输出[‘456’]</p><p>解决：<code>//div/li[1]/following-sibling::*[1]/text()</code></p><p>4、场景四：选取以特定字符串开头作为属性的节点文本 即是[‘123’,’456’]</p><p>解决：<code>//div/*[starts-with(@class,&quot;btn&quot;)]/text()</code></p><p>5、补充内容</p><ul><li>preceding-sibling 同理</li><li>parent  选取当前节点的父节点</li></ul><h3 id="css-组合器"><a href="#css-组合器" class="headerlink" title="css 组合器"></a>css 组合器</h3><p>在CSS中，组合器允许您将多个选择器组合在一起，这允许您在其他元素中选择元素，或者与其他元素相邻。四种可用的类型是：</p><ul><li>后代选择器——（空格键）——允许您选择嵌套在另一个元素中的某个元素（不一定是直接的后代;例如，它可以是一个孙子）。</li><li>子选择器—— &gt; ——允许您选择一个元素，该元素是另一个元素的直接子元素。</li><li>相邻兄弟选择器—— + ——允许您选择一个元素，它是另一个元素的直接兄弟元素(也就是说，在它的旁边，在层次结构的同一层)。</li><li>通用兄弟选择器—— ~ — —允许您选择其他元素的兄弟元素(例如，在层次结构中的相同级别，但不一定就在它的旁边)。<table><thead><tr><th>Combinators</th><th>Select</th></tr></thead><tbody><tr><td>A,B</td><td>匹配满足A（和/或）B的任意元素.</td></tr><tr><td>A B</td><td>匹配任意元素，满足条件：B是A的后代结点（B是A的子节点，或者A的子节点的子节点）</td></tr><tr><td>A &gt; B</td><td>匹配任意元素，满足条件：B是A的直接子节点</td></tr><tr><td>A + B</td><td>匹配任意元素，满足条件：B是A的下一个兄弟节点（AB有相同的父结点，并且B紧跟在A的后面）</td></tr><tr><td>A ~ B</td><td>匹配任意元素，满足条件：B是A之后的兄弟节点中的任意一个（AB有相同的父节点，B在A之后，但不一定是紧挨着A）</td></tr></tbody></table></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BloomFilter原理及应用</title>
      <link href="/2019/09/20/BloomFilter%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
      <url>/2019/09/20/BloomFilter%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="Bloom-Filter算法"><a href="#Bloom-Filter算法" class="headerlink" title="Bloom Filter算法"></a>Bloom Filter算法</h2><p>在Bloom Filte中使用位数组辅助实现检测判断。</p><p>1、声明一个包含m位且所有位为0的位数组和待检测集合元素n。</p><p>2、用k个相互独立的哈希函数将每个元素映射到m的位数组上，散列函数得到的结果记作位置索引并将该位置置1，如果一个位置多次被置为1，那么只有第一次会起作用。</p><p>3、若得到新元素则判断其结果对应位置是否均为1，若有一个位置不为1，则该元素不属于该集合。<br><img src="https://i.loli.net/2019/09/09/JsTu5ofljmYEGn8.png"></p><p><strong>注意:</strong><br>散列函数又称散列算法、哈希函数，是一种从任何一种数据中创建小的数字“指纹”的方法。<br>散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。</p><p><strong>满足关系</strong>：m&gt;nk</p><p><strong>误判</strong>：<br>由于可能出现元素被映射后的位上已经被置1，导致不存在的字符串有一定概率被误判为已存在，但已存在绝对是已经存在。<br>可以增加多个bitmap，关联不同的hash函数，取否定的交集来提高bloom filter的准确率。</p><p><strong>数学分析得出结论</strong>：<br>最优 K =(ln2)<em>(m/n) ≈ 0.7</em>m/n , 在已知n的情况下确定m与k，若限定错误率为a，则m &gt;= nlog_2(1/a)*log_2e</p><h2 id="基于Redis的代码实现"><a href="#基于Redis的代码实现" class="headerlink" title="基于Redis的代码实现"></a>基于Redis的代码实现</h2><p>Redis的BitMap最大支持512MB即2^32，可用于约40亿的数据。如果去重的数据量大，需要申请多个去重块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, m, seed</span>):</span></span><br><span class="line">        self.m = m</span><br><span class="line">        self.seed = seed</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hash</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        ret = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(value)):</span><br><span class="line">            ret += self.seed * ret + ord(value[i])</span><br><span class="line">        <span class="keyword">return</span> (self.m - <span class="number">1</span>) &amp; ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BLOOMFILTER_HASH_NUMBER = <span class="number">6</span></span><br><span class="line">BLOOMFILTER_BIT = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BloomFilter</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, server, key, bit=BLOOMFILTER_BIT, hash_number=BLOOMFILTER_HASH_NUMBER</span>):</span></span><br><span class="line">        self.m = <span class="number">1</span> &lt;&lt; bit</span><br><span class="line"></span><br><span class="line">        self.seeds = range(hash_number)</span><br><span class="line"></span><br><span class="line">        self.maps = [HashMap(self.m, seed) <span class="keyword">for</span> seed <span class="keyword">in</span> self.seeds]</span><br><span class="line"></span><br><span class="line">        self.server = server</span><br><span class="line"></span><br><span class="line">        self.key = key</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exists</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> value:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        exist = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> map <span class="keyword">in</span> self.maps:</span><br><span class="line">            offset = map.hash(value)</span><br><span class="line">            exist = exist &amp; self.server.getbit(self.key, offset)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exist</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> self.maps:</span><br><span class="line">            offset = f.hash(value)</span><br><span class="line">            self.server.setbit(self.key, offset, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    conn = StrictRedis(host=<span class="string">&quot;localhost&quot;</span>, port=<span class="number">6379</span>)</span><br><span class="line">    bf = BloomFilter(conn, <span class="string">&#x27;testbf&#x27;</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">if</span> bf.exists(<span class="string">&#x27;http://www.baidu.com&#x27;</span>):  <span class="comment"># 判断字符串是否存在</span></span><br><span class="line">        print(<span class="string">&#x27;exists!&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;not exists!&#x27;</span>)</span><br><span class="line">        bf.insert(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Github开源库"><a href="#Github开源库" class="headerlink" title="Github开源库"></a>Github开源库</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">import</span> <span class="string">pybloom_live</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">f</span> <span class="string">=</span> <span class="string">pybloom_live.BloomFilter(capacity=1000,</span> <span class="string">error_rate=0.001)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> [<span class="string">f.add(x)</span> <span class="string">for</span> <span class="string">x</span> <span class="string">in</span> <span class="string">range(10)</span>]</span><br><span class="line">[<span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span>]</span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">all([(x</span> <span class="string">in</span> <span class="string">f)</span> <span class="string">for</span> <span class="string">x</span> <span class="string">in</span> <span class="string">range(10)])</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="number">10</span> <span class="string">in</span> <span class="string">f</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="number">5</span> <span class="string">in</span> <span class="string">f</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">f</span> <span class="string">=</span> <span class="string">pybloom_live.BloomFilter(capacity=1000,</span> <span class="string">error_rate=0.001)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">for</span> <span class="string">i</span> <span class="string">in</span> <span class="string">xrange(0,</span> <span class="string">f.capacity):</span></span><br><span class="line"><span class="string">...</span>     <span class="string">_</span> <span class="string">=</span> <span class="string">f.add(i)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">(1.0</span> <span class="bullet">-</span> <span class="string">(len(f)</span> <span class="string">/</span> <span class="string">float(f.capacity)))</span> <span class="string">&lt;=</span> <span class="string">f.error_rate</span> <span class="string">+</span> <span class="number">2e-18</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">sbf</span> <span class="string">=</span> <span class="string">pybloom_live.ScalableBloomFilter(mode=pybloom_live.ScalableBloomFilter.SMALL_SET_GROWTH)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">count</span> <span class="string">=</span> <span class="number">10000</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">for</span> <span class="string">i</span> <span class="string">in</span> <span class="string">range(0,</span> <span class="string">count):</span></span><br><span class="line">        <span class="string">_</span> <span class="string">=</span> <span class="string">sbf.add(i)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span> <span class="string">(1.0</span> <span class="bullet">-</span> <span class="string">(len(sbf)</span> <span class="string">/</span> <span class="string">float(count)))</span> <span class="string">&lt;=</span> <span class="string">sbf.error_rate</span> <span class="string">+</span> <span class="number">2e-18</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="comment"># len(sbf) may not equal the entire input length. 0.01% error is well</span></span><br><span class="line"><span class="comment"># below the default 0.1% error threshold. As the capacity goes up, the</span></span><br><span class="line"><span class="comment"># error will approach 0.1%.</span></span><br></pre></td></tr></table></figure><p>推荐阅读:<a href="https://redislabs.com/blog/rebloom-bloom-filter-datatype-redis/">Here</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy CrawlerSpider ItemLoader</title>
      <link href="/2019/08/08/Scrapy%20CrawlerSpider%20Itemloader/"/>
      <url>/2019/08/08/Scrapy%20CrawlerSpider%20Itemloader/</url>
      
        <content type="html"><![CDATA[<h2 id="CrawlSpider"><a href="#CrawlSpider" class="headerlink" title="CrawlSpider"></a>CrawlSpider</h2><p>CrawlSpider基于ExtractorLink制定了跟进url的规则，打算从网页中获得url后继续爬取的场景非常适用。<br>1、新建项目</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">scrapy </span>startproject XXX</span><br><span class="line"><span class="keyword">scrapy </span>genspider -t crawl xxx xxx.com</span><br></pre></td></tr></table></figure><p>2、 新属性</p><ul><li>rules： Rule对象的集合，用于匹配目标网站并排除干扰</li><li>parse_start_url：用于爬取起始响应，必须要返回Item，Request中的一个。</li></ul><p>3、LinkExtractors</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LinkExtractor(allow=(), deny=(), allow_domains=(), deny_domains=(), <span class="attribute">deny_extensions</span>=None, restrict_xpaths=(), restrict_css=(), tags=(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;area&#x27;</span>), attrs=(<span class="string">&#x27;href&#x27;</span>, ), <span class="attribute">canonicalize</span>=<span class="literal">False</span>, <span class="attribute">unique</span>=<span class="literal">True</span>, <span class="attribute">process_value</span>=None, <span class="attribute">strip</span>=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li>allow (a regular expression (or list of)) – 必须要匹配这个正则表达式(或正则表达式列表)的URL才会被提取｡如果没有给出(或为空), 它会匹配所有的链接｡</li><li>deny (a regular expression (or list of)) – 与这个正则表达式(或正则表达式列表)的(绝对)不匹配的URL必须被排除在外(即不提取)｡它的优先级高于 allow 的参数｡如果没有给出(或None), 将不排除任何链接｡</li><li>allow_domains (str or list) – 单值或者包含字符串域的列表表示会被提取的链接的domains｡</li><li>deny_domains (str or list) – 单值或包含域名的字符串,将不考虑提取链接的domains｡</li><li>deny_extensions (list) – 应提取链接时,可以忽略扩展名的列表｡如果没有给出, 它会默认为 scrapy.linkextractor 模块中定义的 IGNORED_EXTENSIONS 列表｡</li><li>restrict_xpaths (str or list) – 一个的XPath (或XPath的列表),它定义了链路应该从提取的响应内的区域｡</li><li>tags (str or list) – 提取链接时要考虑的标记或标记列表｡默认为 ( ‘a’ , ‘area’) ｡</li><li>attrs (list) – 提取链接时应该寻找的attrbitues列表(仅在 tag 参数中指定的标签)｡默认为 (‘href’)｡</li><li>canonicalize (boolean) – 规范化每次提取的URL(使用scrapy.utils.url.canonicalize_url )｡默认为 True ｡</li><li>unique (boolean) – 重复过滤是否应适用于提取的链接｡</li><li>process_value (callable) – 见:class:BaseSgmlLinkExtractor 类的构造函数 process_value 参数｡</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pattern = <span class="string">r&#x27;/intro/\w+$&#x27;</span></span><br><span class="line">link_extractor = LinkExtractor(deny = pattern)</span><br><span class="line">links = link_extractor.extract_links(response)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_start_url</span>(<span class="params">self, response</span>):</span></span><br><span class="line">self.logger.info(<span class="string">&#x27;parse_start_url %s&#x27;</span>, response.url)</span><br><span class="line">next_page = response.css(<span class="string">&#x27;li.next a::attr(&quot;href&quot;)&#x27;</span>).extract_first()</span><br><span class="line"><span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">yield</span> response.follow(next_page, self.next_parse)</span><br></pre></td></tr></table></figure><p>4、Rule<br>在rules中包含一个或多个Rule对象，每个Rule对爬取网站的动作定义了特定操作，CrawlSpider使用parse方法来实现其逻辑，应用时避免用parse作为回调函数。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> scrapy.spiders.<span class="constructor">Rule(<span class="params">link_extractor</span>, <span class="params">callback</span> = None, <span class="params">cb_kwargs</span> = None, <span class="params">follow</span> = None, <span class="params">process_links</span> = None, <span class="params">process_request</span> = None)</span></span><br></pre></td></tr></table></figure><ul><li>callback： 从link_extractor中每获取到链接时，参数所指定的值作为回调函数，该回调函数接受一个response作为其第一个参数。 注意：当编写爬虫规则时，避免使用parse作为回调函数。由于CrawlSpider使用parse方法来实现其逻辑，如果覆盖了 parse方法，crawl spider将会运行失败。</li><li>follow：是一个布尔(boolean)值，指定了根据该规则从response提取的链接是否需要跟进。 如果callback为None，follow 默认设置为True ，否则默认为False。</li><li>process_links：指定该spider中哪个的函数将会被调用，从link_extractor中获取到链接列表时将会调用该函数。</li><li>process_request：指定该spider中哪个的函数将会被调用， 该规则提取到每个request时都会调用该函数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rules = (</span><br><span class="line">Rule(LinkExtractor(allow=<span class="string">r&#x27;/subject/\d+/$&#x27;</span>), callback=<span class="string">&#x27;parse_item&#x27;</span>, follow=<span class="literal">True</span>, process_request=<span class="string">&#x27;get_cookie&#x27;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookie</span>(<span class="params">self, request</span>):</span></span><br><span class="line">bid = <span class="string">&#x27;&#x27;</span>.join(random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">11</span>))</span><br><span class="line">request.cookies[<span class="string">&#x27;bid&#x27;</span>] = bid</span><br><span class="line"><span class="keyword">return</span> request</span><br></pre></td></tr></table></figure><h2 id="Itemloader"><a href="#Itemloader" class="headerlink" title="Itemloader"></a>Itemloader</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    演示填充数据的三种方法</span></span><br><span class="line"><span class="string">    name字段值是两个xpath累加后得到的</span></span><br><span class="line"><span class="string">    :param self:</span></span><br><span class="line"><span class="string">    :param response:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    l = ItemLoader(item=Product(), response=response)</span><br><span class="line">    l.add_xpath(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;div[@class=product_name]&#x27;</span>)</span><br><span class="line">    l.add_xpath(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;div[@class=product_title]&#x27;</span>)</span><br><span class="line">    l.add_xpath(<span class="string">&#x27;price&#x27;</span>, <span class="string">&#x27;p[@id=price]&#x27;</span>)</span><br><span class="line">    l.add_css(<span class="string">&#x27;stock&#x27;</span>, <span class="string">&#x27;p#stock&#x27;</span>)</span><br><span class="line">    l.add_value(<span class="string">&#x27;last_updated&#x27;</span>, <span class="string">&#x27;today&#x27;</span>)  <span class="comment"># you can also use literal values</span></span><br><span class="line">    <span class="keyword">return</span> l.load_item()</span><br></pre></td></tr></table></figure><p>1、loader</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.loader <span class="keyword">import</span> ItemLoader</span><br><span class="line"><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> TakeFirst, Join, Compose</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsLoader</span>(<span class="params">ItemLoader</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    取列表非空首元素</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    default_output_processor = TakeFirst()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChainLoader</span>(<span class="params">NewsLoader</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    通过_in和_out后缀来定义输入输出处理器，合并列表成字符串，去除头尾空白字符</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    text_out = Compose(Join(), <span class="keyword">lambda</span> s: s.strip())</span><br><span class="line">    source_out = Compose(Join(), <span class="keyword">lambda</span> s: s.strip())</span><br></pre></td></tr></table></figure><p>2、Processor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> Join, MapCompose, TakeFirst</span><br><span class="line"><span class="keyword">from</span> w3lib.html <span class="keyword">import</span> remove_tags</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_price</span>(<span class="params">value</span>):</span></span><br><span class="line">    <span class="keyword">if</span> value.isdigit():</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    name = scrapy.Field(</span><br><span class="line">        input_processor=MapCompose(remove_tags),</span><br><span class="line">        output_processor=Join(),</span><br><span class="line">    )</span><br><span class="line">    price = scrapy.Field(</span><br><span class="line">        <span class="comment"># MapCompose（能把多个函数执行的结果按顺序组合起来，产生最终的输出，通常用于输入处理器)</span></span><br><span class="line">        input_processor=MapCompose(remove_tags, filter_price),</span><br><span class="line">        output_processor=TakeFirst(),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>3、MapCompose: MapCompose可以迭代处理一个列表输入值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> MapCompose</span><br><span class="line">processor = MapCompose(str.upper(),<span class="keyword">lambda</span> s:s.strip())</span><br><span class="line">print(processor([<span class="string">&#x27;Hello&#x27;</span>,<span class="string">&#x27;World&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>]))</span><br></pre></td></tr></table></figure><p>4、流程解析<br>第一步：通过add_xpath(), add_css(),add_value()方式提取数据。<br>第二步：将提取到的数据传递到输入处理器（input_processor）中，收集处理结果并保存在ItemLoader内（未分配给Item）。<br>第三步：收到所有数据后，先调用输出处理器（output_processor）来处理收集到的数据。<br>第四步：再调用load_item()方法来填充再生成Item 对象。</p><h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><p>一些参数和规则单独提取出来做成配置文件或存到数据库，可抽离的部分name、allowed_domains、start_urls等配置成Json文件。<br>rules也可以单独定义成一个python文件实现Rule分离完成配置化。<br>1、文件配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;spider&quot;</span>:<span class="string">&quot;universal&quot;</span>,</span><br><span class="line"><span class="string">&quot;website&quot;</span>:<span class="string">&quot;中华网科技&quot;</span>,</span><br><span class="line"><span class="string">&quot;type&quot;</span>:<span class="string">&quot;新闻&quot;</span>,</span><br><span class="line"><span class="string">&quot;index&quot;</span>:<span class="string">&quot;http://...&quot;</span></span><br><span class="line"><span class="string">&quot;settings&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;USER_AGENT&quot;</span>:xxx</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;start_urls&quot;</span>:[</span><br><span class="line"><span class="string">&quot;xxx&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;allowed_domains&quot;</span>:[</span><br><span class="line"><span class="string">&quot;tech.china.com&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;rules&quot;</span>:<span class="string">&quot;china&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、读取配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> realpath,dirname</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_config</span>(<span class="params">name</span>):</span></span><br><span class="line">path = dirname(realpath(__file__)) + <span class="string">&#x27;/config/&#x27;</span> + name + <span class="string">&#x27;.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> open(path,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">return</span> json.loads(f.read())</span><br></pre></td></tr></table></figure><p>3、启动spider</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"><span class="keyword">from</span> scrpay.utils.project import get_project_settings</span><br><span class="line"><span class="built_in">..</span>.</span><br><span class="line"></span><br><span class="line">def <span class="builtin-name">run</span>():</span><br><span class="line">name = sys.argv[1]</span><br><span class="line">custom_settings = get_config(name)</span><br><span class="line"># 爬取Spider名称</span><br><span class="line">spider = custom_settings.<span class="builtin-name">get</span>(<span class="string">&#x27;spider&#x27;</span>,<span class="string">&#x27;universal&#x27;</span>)</span><br><span class="line">project_settings = get_project_settings()</span><br><span class="line"><span class="built_in">settings </span>= dict(project_settings.copy())</span><br><span class="line"># 合并配置</span><br><span class="line">settings.update(custom_settings.<span class="builtin-name">get</span>(<span class="string">&#x27;settings&#x27;</span>))</span><br><span class="line">process = CrawlerProcess(settings)</span><br><span class="line"># 启动爬虫</span><br><span class="line">process.crawl(spider,**&#123;<span class="string">&#x27;name&#x27;</span>:name&#125;)</span><br><span class="line">process.start()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy-redis基础总结</title>
      <link href="/2019/08/05/Scrapy_redis%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"/>
      <url>/2019/08/05/Scrapy_redis%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>scrapy-redis在scrapy的架构上增加了redis，基于redis的特性扩展了如下四种组件：<br>1、Scheduler<br>2、Duplication Filter<br>3、Item Pipeline<br>4、Base Spider</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>1、将调度器的类和去重类替换为Scrapy-Redis提供的类</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确保request存储到redis中</span></span><br><span class="line">SCHEDULER = <span class="string">&quot;scrapy_redis.scheduler.Scheduler&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保所有爬虫共享相同的去重指纹</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">&quot;scrapy_redis.dupefilter.RFPDupeFilter&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在redis中保持scrapy-redis用到的队列，不会清除redis中的队列，从而实现暂停和恢复的功能</span></span><br><span class="line">SCHEDULER_PERSIST = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">REDIS_URL = <span class="string">&#x27;redis://:foobared@120.27.34.25:6379&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否在开始之前清空 调度器和去重记录，True=清空，False=不清空</span></span><br><span class="line"><span class="comment"># SCHEDULER_FLUSH_ON_START = False     </span></span><br><span class="line">             </span><br><span class="line"><span class="comment"># 去调度器中获取数据时，如果为空，最多等待时间（最后没数据，未获取到）            </span></span><br><span class="line"><span class="comment"># SCHEDULER_IDLE_BEFORE_CLOSE = 10                                    </span></span><br></pre></td></tr></table></figure><p>2、Pipeline配置(非必要)</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 将item写入<span class="meta">key</span>为 spider.name : items 的redis的<span class="meta">list</span>中</span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">　　 <span class="string">&#x27;scrapy_redis.pipelines.RedisPipeline&#x27;</span>: 100 ,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、修改代码：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">继承RedisSpider</span><br><span class="line">start_urls改为redis_key</span><br><span class="line">RedisSpider类不需要写 `allowd_domains` 和 `start_urls`</span><br><span class="line">scrapy-redis 将从在构造方法 init() 里动态定义爬虫爬取域范围，也可以选择直接写allowd_domains</span><br></pre></td></tr></table></figure><p>4、启动爬虫<br>爬虫程序会一直获取redis中的任务，没有任务就等待。<br>如果在redis插入了新的任务就会继续进行，之后又进入等待状态。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lpush <span class="attr">myspider:</span>start_urls <span class="attr">https:</span><span class="comment">//www.baidu.com</span></span><br></pre></td></tr></table></figure><h2 id="修改请求"><a href="#修改请求" class="headerlink" title="修改请求"></a>修改请求</h2><p>RedisSpider继承于RedisMixin和Spider类，执行逻辑为RedisMixin的<code>next_requests</code>函数接收到了redis中data后，通过<code>make_request_from_data</code>函数来解码data生成url，<br><code>make_request_from_data</code>继续调用Spider类中的<code>make_requests_from_url</code>函数生成Request。<br>1、请求添加cookie参数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def make<span class="constructor">_requests_from_url(<span class="params">self</span>, <span class="params">url</span>)</span>:</span><br><span class="line">return <span class="constructor">Request(<span class="params">url</span>, <span class="params">dont_filter</span>=True, <span class="params">cookies</span>=<span class="params">cookies</span>, <span class="params">meta</span>=&#123;&#x27;<span class="params">cookiejar</span>&#x27;: 1&#125;)</span></span><br></pre></td></tr></table></figure><p>2、默认情况下Scrapy-Redis是发送GET请求获取数据的，对于某些使用POST请求的情况需要重写<code>make_request_from_data</code>函数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def make_request_from_data(self, data):</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">重写make_request_from_data方法，data是scrapy-redis读取redis中的[url,form_data,meta]，然后发送post请求</span></span><br><span class="line"><span class="string">:param data: redis中都去的请求数据，是一个list</span></span><br><span class="line"><span class="string">:return: 一个FormRequest对象</span></span><br><span class="line"><span class="string">　　&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">data = json.loads(data)</span><br><span class="line">url = data.<span class="builtin-name">get</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">form_data = data.<span class="builtin-name">get</span>(<span class="string">&#x27;form_data&#x27;</span>)</span><br><span class="line">meta = data.<span class="builtin-name">get</span>(<span class="string">&#x27;meta&#x27;</span>)</span><br><span class="line">return FormRequest(<span class="attribute">url</span>=url, <span class="attribute">formdata</span>=form_data, <span class="attribute">meta</span>=meta, <span class="attribute">callback</span>=self.parse)</span><br></pre></td></tr></table></figure><h2 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h2><p>1、指纹生成方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def request<span class="constructor">_fingerprint(<span class="params">request</span>, <span class="params">include_headers</span>=None)</span>:</span><br><span class="line">    <span class="keyword">if</span> include_headers:</span><br><span class="line">        include_headers = tuple(<span class="keyword">to</span><span class="constructor">_bytes(<span class="params">h</span>.<span class="params">lower</span>()</span>)</span><br><span class="line">                                 <span class="keyword">for</span> h <span class="keyword">in</span> sorted(include_headers))</span><br><span class="line">    cache = <span class="module-access"><span class="module"><span class="identifier">_fingerprint_cache</span>.</span></span>setdefault(request, &#123;&#125;)</span><br><span class="line">    <span class="keyword">if</span> include_headers not <span class="keyword">in</span> cache:</span><br><span class="line">        fp = hashlib.sha1<span class="literal">()</span></span><br><span class="line">        fp.update(<span class="keyword">to</span><span class="constructor">_bytes(<span class="params">request</span>.<span class="params">method</span>)</span>)</span><br><span class="line">        fp.update(<span class="keyword">to</span><span class="constructor">_bytes(<span class="params">canonicalize_url</span>(<span class="params">request</span>.<span class="params">url</span>)</span>))</span><br><span class="line">        fp.update(request.body <span class="keyword">or</span> b&#x27;&#x27;)</span><br><span class="line">        <span class="keyword">if</span> include_headers:</span><br><span class="line">            <span class="keyword">for</span> hdr <span class="keyword">in</span> include_headers:</span><br><span class="line">                <span class="keyword">if</span> hdr <span class="keyword">in</span> request.headers:</span><br><span class="line">                    fp.update(hdr)</span><br><span class="line">                    <span class="keyword">for</span> v <span class="keyword">in</span> request.headers.getlist(hdr):</span><br><span class="line">                        fp.update(v)</span><br><span class="line">        cache<span class="literal">[<span class="identifier">include_headers</span>]</span> = fp.hexdigest<span class="literal">()</span></span><br><span class="line">    return cache<span class="literal">[<span class="identifier">include_headers</span>]</span></span><br></pre></td></tr></table></figure><p>2、调度器核心方法</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enqueue_request</span><span class="params">(<span class="keyword">self</span>, request)</span></span><span class="symbol">:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> request.dont_filter <span class="keyword">and</span> <span class="keyword">self</span>.df.request_seen(request)<span class="symbol">:</span></span><br><span class="line"><span class="keyword">self</span>.df.log(request, <span class="keyword">self</span>.spider)</span><br><span class="line"><span class="keyword">return</span> False</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">self</span>.<span class="symbol">stats:</span></span><br><span class="line"><span class="keyword">self</span>.stats.inc_value(<span class="string">&#x27;scheduler/enqueued/redis&#x27;</span>, spider=<span class="keyword">self</span>.spider)</span><br><span class="line"><span class="keyword">self</span>.queue.push(request)</span><br><span class="line"><span class="keyword">return</span> True</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_request</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">block_pop_timeout = <span class="keyword">self</span>.idle_before_close</span><br><span class="line">request = <span class="keyword">self</span>.queue.pop(block_pop_timeout)</span><br><span class="line"><span class="keyword">if</span> request <span class="keyword">and</span> <span class="keyword">self</span>.<span class="symbol">stats:</span></span><br><span class="line"><span class="keyword">self</span>.stats.inc_value(<span class="string">&#x27;scheduler/dequeued/redis&#x27;</span>, spider=<span class="keyword">self</span>.spider)</span><br><span class="line"><span class="keyword">return</span> request</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy ImagePipeline</title>
      <link href="/2019/08/03/Scrapy%20ImagePipeline%20FilePipeline/"/>
      <url>/2019/08/03/Scrapy%20ImagePipeline%20FilePipeline/</url>
      
        <content type="html"><![CDATA[<h2 id="ImagePipeline"><a href="#ImagePipeline" class="headerlink" title="ImagePipeline"></a>ImagePipeline</h2><p>1、特点：</p><ul><li>将下载图片转换成通用的JPG和RGB格式</li><li>避免重复下载</li><li>缩略图生成</li><li>图片大小过滤</li></ul><p>2、工作流程：</p><ul><li>在Spider中，爬取一个Item并将所需的URL放入image_urls字段中</li><li>从Spider返回的Item，传递到Item Pipeline中</li><li>项目进入ImagePipeline，image_urls组内的URLs将被Scrapy的调度器和下载器安排下载(这意味着调度器和中间件可以复用)，当优先级更高，会在其他页面被抓取前处理。项目会在这个特定的管道阶段保持”locker”的状态，直到完成图片的下载(或者由于某些原因未完成下载)。</li><li>图片下载完，另一个组(images)将被更新到结构中，这个组将包含一个字典列表，其中包括下载图片的信息(如下载路径、源抓取地址、图片的校验码）。images列表中的图片顺序将和源image_urls组保持一致。如果某个图片下载失败，将会记录下错误信息，图片也不会出现在images组中。</li></ul><p>3、辅助配置项</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 针对内置ImagePipeline处理时，对URL关键字或结果关键字使用其他字段名(默认字段名image_urls,images)</span></span><br><span class="line">IMAGES_URLS_FIELD = &#x27;field_name_for_your_images_urls&#x27;</span><br><span class="line">IMAGES_RESULT_FIELD = &#x27;field_name_for_your_processed_images&#x27;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ======= #</span></span><br><span class="line">IMAGES_STORE = os.path.join(os.path.abspath(os.path.dirname(__file__)), <span class="string">&quot;images&quot;</span>)  <span class="comment"># 图片存储位置</span></span><br><span class="line">IMAGES_EXPIRES = 90  <span class="comment"># 90天内抓取的都不会被重抓</span></span><br><span class="line">IMAGES_THUMBS = &#123; <span class="comment"># 生成缩略图标签及其尺寸</span></span><br><span class="line">    &#x27;small&#x27;: (50, 50),</span><br><span class="line">    &#x27;big&#x27;: (270, 270),</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 过滤小图像</span></span><br><span class="line">IMAGES_MIN_HEIGHT = 110</span><br><span class="line">IMAGES_MIN_WIDTH = 110</span><br></pre></td></tr></table></figure><p>4、自定义ImagePipeline</p><ul><li><code>get_media_requests()</code><br>results元组有2个元素，每个元素包含(success, <code>file_info_or_error</code>)，如下：<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="name">True</span>,</span><br><span class="line">  &#123;<span class="symbol">&#x27;checksum</span><span class="symbol">&#x27;:</span> <span class="symbol">&#x27;2b00042f7481c7b056c4b410d28f33cf</span>&#x27;,</span><br><span class="line">   <span class="symbol">&#x27;path</span><span class="symbol">&#x27;:</span> <span class="symbol">&#x27;full/0a79c461a4062ac383dc4fade7bc09f1384a3910.jpg</span>&#x27;,</span><br><span class="line">   <span class="symbol">&#x27;url</span><span class="symbol">&#x27;:</span> <span class="symbol">&#x27;http://www.example.com/files/product1.pdf</span>&#x27;&#125;),</span><br><span class="line"> (<span class="name">False</span>,</span><br><span class="line">  Failure(<span class="name"><span class="builtin-name">...</span></span>))]</span><br></pre></td></tr></table></figure></li><li><code>file_path()</code><br>重写此方法可以自定义每个文件的下载路径。</li><li><code>item_completed()</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.pipelines.images <span class="keyword">import</span> ImagesPipeline</span><br><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyImagesPipeline</span>(<span class="params">ImagesPipeline</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_media_requests</span>(<span class="params">self, item, info</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将url字段取出来直接生成Request对象，加入调度队列，执行下载。</span></span><br><span class="line"><span class="string">        :param item: 生成的Item对象</span></span><br><span class="line"><span class="string">        :param info:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> image_url <span class="keyword">in</span> item[<span class="string">&#x27;image_urls&#x27;</span>]:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(image_url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">item_completed</span>(<span class="params">self, results, item, info</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        当单个Item完成下载，分析下载结果剔除失败图片。</span></span><br><span class="line"><span class="string">        抛出异常DropItem,该Item忽略。</span></span><br><span class="line"><span class="string">        :param results: 列表中是一个元组，第一个值是布尔值，请求成功或失败，第二个值是下载到的资源字典</span></span><br><span class="line"><span class="string">        :param item:</span></span><br><span class="line"><span class="string">        :param info:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        image_paths = [x[<span class="string">&#x27;path&#x27;</span>] <span class="keyword">for</span> ok, x <span class="keyword">in</span> results <span class="keyword">if</span> ok]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> image_paths:</span><br><span class="line">            <span class="keyword">raise</span> DropItem(<span class="string">&quot;Item contains no images&quot;</span>)</span><br><span class="line">        item[<span class="string">&#x27;image_paths&#x27;</span>] = image_paths</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><h2 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_media_requests</span>(<span class="params">self, item, info</span>):</span></span><br><span class="line"><span class="keyword">return</span> [Request(x) <span class="keyword">for</span> x <span class="keyword">in</span> item.get(self.images_urls_field, [])]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">item_completed</span>(<span class="params">self, results, item, info</span>):</span></span><br><span class="line"><span class="keyword">if</span> isinstance(item, dict) <span class="keyword">or</span> self.images_result_field <span class="keyword">in</span> item.fields:</span><br><span class="line">item[self.images_result_field] = [x <span class="keyword">for</span> ok, x <span class="keyword">in</span> results <span class="keyword">if</span> ok]</span><br><span class="line"><span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_path</span>(<span class="params">self, request, response=None, info=None</span>):</span></span><br><span class="line"><span class="comment">## start of deprecation warning block (can be removed in the future)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_warn</span>():</span></span><br><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> ScrapyDeprecationWarning</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.warn(<span class="string">&#x27;ImagesPipeline.image_key(url) and file_key(url) methods are deprecated, &#x27;</span></span><br><span class="line">  <span class="string">&#x27;please use file_path(request, response=None, info=None) instead&#x27;</span>,</span><br><span class="line">  category=ScrapyDeprecationWarning, stacklevel=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># check if called from image_key or file_key with url as first argument</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> isinstance(request, Request):</span><br><span class="line">_warn()</span><br><span class="line">url = request</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">url = request.url</span><br><span class="line"></span><br><span class="line"><span class="comment"># detect if file_key() or image_key() methods have been overridden</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> hasattr(self.file_key, <span class="string">&#x27;_base&#x27;</span>):</span><br><span class="line">_warn()</span><br><span class="line"><span class="keyword">return</span> self.file_key(url)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">not</span> hasattr(self.image_key, <span class="string">&#x27;_base&#x27;</span>):</span><br><span class="line">_warn()</span><br><span class="line"><span class="keyword">return</span> self.image_key(url)</span><br><span class="line"><span class="comment">## end of deprecation warning block</span></span><br><span class="line"></span><br><span class="line">image_guid = hashlib.sha1(to_bytes(url)).hexdigest()  <span class="comment"># change to request.url after deprecation</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;full/%s.jpg&#x27;</span> % (image_guid)</span><br></pre></td></tr></table></figure>1、重点关注下载的实现和下载的文件命名。<br>2、内置的ImagePipeline会默认读取Item的<code>image_urls</code>字段并认为该字段是列表形式，遍历该字段然后取出每个URL进行图片下载，图片名称是以图片URL的SHA1值进行保存。<br>3、启用内部下载器:<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line"> &#x27;<span class="attribute">scrapy.pipelines.files.FilesPipeline&#x27;</span>: 1,</span><br><span class="line"> &#x27;scrapy<span class="variable">.pipelines</span><span class="variable">.images</span><span class="variable">.ImagesPipeline</span>&#x27;: 2</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy 对接模拟浏览器</title>
      <link href="/2019/08/03/Scrapy%20%E5%AF%B9%E6%8E%A5%E6%A8%A1%E6%8B%9F%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
      <url>/2019/08/03/Scrapy%20%E5%AF%B9%E6%8E%A5%E6%A8%A1%E6%8B%9F%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="对接selenium"><a href="#对接selenium" class="headerlink" title="对接selenium"></a>对接selenium</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeleniumMiddleware</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.driver = webdriver.Chrome(<span class="string">&#x27;./chromedriver&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        <span class="keyword">if</span> spider.name == <span class="string">&#x27;seleniumSpider&#x27;</span>:</span><br><span class="line">            self.driver.get(request.url)</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">            body = self.driver.page_source</span><br><span class="line">        <span class="keyword">return</span> HtmlResponse(self.driver.current_url,</span><br><span class="line">                           body=body,</span><br><span class="line">                           encoding=<span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">                           request=request)</span><br></pre></td></tr></table></figure><h2 id="对接pyppeteer"><a href="#对接pyppeteer" class="headerlink" title="对接pyppeteer"></a>对接pyppeteer</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FundscrapyDownloaderMiddleware</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="comment"># Not all methods need to be defined. If a method is not defined,</span></span><br><span class="line">    <span class="comment"># scrapy acts as if the downloader middleware does not modify the</span></span><br><span class="line">    <span class="comment"># passed objects.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;Init downloaderMiddleware use pypputeer.&quot;</span>)</span><br><span class="line">        pyppeteer.DEBUG = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        print(os.environ.get(<span class="string">&#x27;PYPPETEER_CHROMIUM_REVISION&#x27;</span>))</span><br><span class="line">        loop = asyncio.get_event_loop()</span><br><span class="line">        task = asyncio.ensure_future(self.getbrowser())</span><br><span class="line">        loop.run_until_complete(task)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">getbrowser</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.browser = <span class="keyword">await</span> pyppeteer.launch()</span><br><span class="line">        self.page = <span class="keyword">await</span> self.browser.newPage()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">getnewpage</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> self.browser.newPage()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span>(<span class="params">cls, crawler</span>):</span></span><br><span class="line">        <span class="comment"># This method is used by Scrapy to create your spiders.</span></span><br><span class="line">        s = cls()</span><br><span class="line">        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        <span class="comment"># Called for each request that goes through the downloader</span></span><br><span class="line">        <span class="comment"># middleware.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Must either:</span></span><br><span class="line">        <span class="comment"># - return None: continue processing this request</span></span><br><span class="line">        <span class="comment"># - or return a Response object</span></span><br><span class="line">        <span class="comment"># - or return a Request object</span></span><br><span class="line">        <span class="comment"># - or raise IgnoreRequest: process_exception() methods of</span></span><br><span class="line">        <span class="comment">#   installed downloader middleware will be called</span></span><br><span class="line">        loop = asyncio.get_event_loop()</span><br><span class="line">        task = asyncio.ensure_future(self.usePypuppeteer(request))</span><br><span class="line">        loop.run_until_complete(task)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HtmlResponse(url=request.url, body=task.result(), encoding=<span class="string">&quot;utf-8&quot;</span>, request=request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">usePypuppeteer</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">await</span> self.page.goto(request.url)</span><br><span class="line">        content = <span class="keyword">await</span> self.page.content()</span><br><span class="line">        <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self, request, response, spider</span>):</span></span><br><span class="line">        <span class="comment"># Called with the response returned from the downloader.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Must either;</span></span><br><span class="line">        <span class="comment"># - return a Response object</span></span><br><span class="line">        <span class="comment"># - return a Request object</span></span><br><span class="line">        <span class="comment"># - or raise IgnoreRequest</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span>(<span class="params">self, request, exception, spider</span>):</span></span><br><span class="line">        <span class="comment"># Called when a download handler or a process_request()</span></span><br><span class="line">        <span class="comment"># (from other downloader middleware) raises an exception.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Must either:</span></span><br><span class="line">        <span class="comment"># - return None: continue processing this exception</span></span><br><span class="line">        <span class="comment"># - return a Response object: stops process_exception() chain</span></span><br><span class="line">        <span class="comment"># - return a Request object: stops process_exception() chain</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spider_opened</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        spider.logger.info(<span class="string">&#x27;Spider opened: %s&#x27;</span> % spider.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span>(<span class="params">self, url, keep_page=False</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        render page with pyppeteer</span></span><br><span class="line"><span class="string">        :param url: page url</span></span><br><span class="line"><span class="string">        :param retries: max retry times</span></span><br><span class="line"><span class="string">        :param script: js script to evaluate</span></span><br><span class="line"><span class="string">        :param wait: number of seconds to wait before loading the page, preventing timeouts</span></span><br><span class="line"><span class="string">        :param scrolldown: how many times to page down</span></span><br><span class="line"><span class="string">        :param sleep: how many long to sleep after initial render</span></span><br><span class="line"><span class="string">        :param timeout: the longest wait time, otherwise raise timeout error</span></span><br><span class="line"><span class="string">        :param keep_page: keep page not to be closed, browser object needed</span></span><br><span class="line"><span class="string">        :param browser: pyppetter browser object</span></span><br><span class="line"><span class="string">        :param with_result: return with js evaluation result</span></span><br><span class="line"><span class="string">        :return: content, [result]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># define async render</span></span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">async_render</span>(<span class="params">url, keep_page</span>):</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># basic render</span></span><br><span class="line">                page = <span class="keyword">await</span> self.browser.newPage()</span><br><span class="line">                <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">                response = <span class="keyword">await</span> page.goto(url, options=&#123;<span class="string">&#x27;timeout&#x27;</span>: int(<span class="number">10</span> * <span class="number">1000</span>)&#125;)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> response.status != <span class="number">200</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span>, response.status</span><br><span class="line">                result = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">await</span> page.waitFor(<span class="number">2000</span>)</span><br><span class="line">                <span class="comment"># get html of page</span></span><br><span class="line">                content = <span class="keyword">await</span> page.content()</span><br><span class="line">                <span class="keyword">return</span> content, result, response.status</span><br><span class="line">            <span class="keyword">except</span> TimeoutError:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">500</span></span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                <span class="comment"># if keep page, do not close it</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> keep_page:</span><br><span class="line">                    <span class="keyword">await</span> page.close()</span><br><span class="line"></span><br><span class="line">        content, result, status = [<span class="literal">None</span>] * <span class="number">3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># retry for &#123;retries&#125; times</span></span><br><span class="line">        retries = <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(retries):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> content:</span><br><span class="line">                content, result, status = self.loop.run_until_complete(</span><br><span class="line">                    async_render(url=url, keep_page=keep_page))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># if need to return js evaluation result</span></span><br><span class="line">        <span class="keyword">return</span> content, result, status</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy 添加代理和随机请求头</title>
      <link href="/2019/08/03/Scrapy%20%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%90%86%E5%92%8C%E9%9A%8F%E6%9C%BA%E8%AF%B7%E6%B1%82%E5%A4%B4/"/>
      <url>/2019/08/03/Scrapy%20%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%90%86%E5%92%8C%E9%9A%8F%E6%9C%BA%E8%AF%B7%E6%B1%82%E5%A4%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="随机请求头"><a href="#随机请求头" class="headerlink" title="随机请求头"></a>随机请求头</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> signals</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomUserAgentMiddleware</span>(<span class="params">object</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.agent = UserAgent()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span>(<span class="params">cls, crawler</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cls()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        request.headers.setdefault(<span class="string">&#x27;User-Agent&#x27;</span>, self.agent.random)</span><br><span class="line"><span class="comment"># request.headers[&#x27;User-Agent&#x27;] = random.choice(self.user_agents)</span></span><br></pre></td></tr></table></figure><h2 id="添加代理"><a href="#添加代理" class="headerlink" title="添加代理"></a>添加代理</h2><p>1、对接芝麻代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在scrapy中使用 代理池的demo</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">middleware中代码如下</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">pool = redis.ConnectionPool(decode_responses=<span class="literal">True</span>)  <span class="comment"># redis 池</span></span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">middleware中配置代理中间键</span></span><br><span class="line"><span class="string">注意，根据爬取网址是http 还是https 来设置</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProxy</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;代理IP设置&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        <span class="comment"># 此处对接redis</span></span><br><span class="line">        data = r.zrangebyscore(<span class="string">&#x27;XDLProxy&#x27;</span>, <span class="number">1</span>, <span class="number">100</span>, withscores=<span class="literal">True</span>)</span><br><span class="line">        ip, score = random.choice(data)</span><br><span class="line">        request.meta[<span class="string">&#x27;proxy&#x27;</span>] = <span class="string">&#x27;http://&#x27;</span>+ip  <span class="comment"># 根据自己情况填写</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">拦截中间键中配置如下，写入计分器，满分20分</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloaderMiddleware</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self, request, response, spider</span>):</span></span><br><span class="line">        <span class="comment"># 对代理ip进行清洗</span></span><br><span class="line">        proxy = request._meta.get(<span class="string">&#x27;proxy&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> response.status == <span class="number">200</span>:</span><br><span class="line">            print(<span class="string">&#x27;IP访问失败&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> proxy:</span><br><span class="line">                proxy = proxy[proxy.find(<span class="string">&#x27;/&#x27;</span>)+<span class="number">2</span>:]  <span class="comment"># 提取当此访问proxy</span></span><br><span class="line">                r.zincrby(<span class="string">&#x27;XDLProxy&#x27;</span>, <span class="number">-1</span>, proxy)  <span class="comment"># redis 命令修改</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> proxy:</span><br><span class="line">                proxy = proxy[proxy.find(<span class="string">&#x27;/&#x27;</span>) + <span class="number">2</span>:]  <span class="comment"># 提取当此访问proxy</span></span><br><span class="line">                score = r.zscore(<span class="string">&#x27;XDLProxy&#x27;</span>, proxy)  <span class="comment"># 取出分数</span></span><br><span class="line">                <span class="keyword">if</span> score &lt; <span class="number">20</span>:</span><br><span class="line">                    r.zincrby(<span class="string">&#x27;XDLProxy&#x27;</span>, <span class="number">1</span>, proxy)  <span class="comment"># redis 新版本命令更改这样了</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span>(<span class="params">self, request, exception, spider</span>):</span>  <span class="comment"># 可能由于IP质量问题无法访问超时</span></span><br><span class="line">        print(<span class="string">&#x27;超时异常&#x27;</span>)</span><br><span class="line">        proxy = request._meta.get(<span class="string">&#x27;proxy&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> proxy:</span><br><span class="line">            proxy = proxy[proxy.find(<span class="string">&#x27;/&#x27;</span>) + <span class="number">2</span>:]</span><br><span class="line">            r.zincrby(<span class="string">&#x27;XDLProxy&#x27;</span>, <span class="number">-1</span>, proxy)  <span class="comment"># redis 新版本命令更改这样了</span></span><br><span class="line">            <span class="keyword">return</span> request</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">setting中配置</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">DOWNLOAD_TIMEOUT = <span class="number">5</span>  <span class="comment"># 有的时候代理ip失效，会导致一直卡在那里 ，也有可能是用http 访问https</span></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">&#x27;middlewares.MyProxy&#x27;</span>: <span class="number">543</span>,  <span class="comment"># 自定义代理IP</span></span><br><span class="line">    <span class="string">&#x27;middlewares.spiderDownloaderMiddleware&#x27;</span>: <span class="number">600</span>,  <span class="comment"># 拦截301、302等跳转  必须设置到600</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、对接阿布云代理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理服务器</span></span><br><span class="line">proxyServer = <span class="string">&quot;http://http-pro.abuyun.com:9010&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理隧道验证信息</span></span><br><span class="line">proxyUser = <span class="string">&quot;H01234567890123P&quot;</span></span><br><span class="line">proxyPass = <span class="string">&quot;0123456789012345&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for Python2</span></span><br><span class="line">proxyAuth = <span class="string">&quot;Basic &quot;</span> + base64.b64encode(proxyUser + <span class="string">&quot;:&quot;</span> + proxyPass)</span><br><span class="line"></span><br><span class="line"><span class="comment"># for Python3</span></span><br><span class="line"><span class="comment">#proxyAuth = &quot;Basic &quot; + base64.urlsafe_b64encode(bytes((proxyUser + &quot;:&quot; + proxyPass), &quot;ascii&quot;)).decode(&quot;utf8&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyMiddleware</span>(<span class="params">object</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">request.meta[<span class="string">&quot;proxy&quot;</span>] = proxyServer</span><br><span class="line"></span><br><span class="line">request.headers[<span class="string">&quot;Proxy-Authorization&quot;</span>] = proxyAuth   </span><br></pre></td></tr></table></figure><h2 id="Cookie中间件"><a href="#Cookie中间件" class="headerlink" title="Cookie中间件"></a>Cookie中间件</h2><p>cookie池原理：<br>不断地用不同的账号登录网站，就可以得到很多不同的cookies，可以将其放在Redis里。爬虫请求网页时，可以从Redis中读取Cookies并添加。<br>例如：登录以后的Cookies转换为JSON格式的字符串并保存到Redis中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginMiddleware</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.client = redis.StrictRedis()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        <span class="keyword">if</span> spider.name == <span class="string">&#x27;loginSpider&#x27;</span>:</span><br><span class="line">            cookies = json.loads(self.client.lpop(<span class="string">&#x27;cookies&#x27;</span>).decode())</span><br><span class="line">            request.cookies = cookies</span><br></pre></td></tr></table></figure><h2 id="内容补充"><a href="#内容补充" class="headerlink" title="内容补充"></a>内容补充</h2><p>1、from_crawler何时被调用?<br>Downloadmiddleware、Pipeline还有扩展EXTENSIONS的实例化Manager都是继承scrapy.middleware下的MiddlewareManager，逐个通过<code>load_object</code>方法导入模块，再调用每个模块的<code>from_crawler</code>或<code>from_settings</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span>(<span class="params">cls, crawler</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1、用给定的参数创建了一个cls类的实例spider</span></span><br><span class="line"><span class="string">2、用crawler实例的crawler.signals.connect方法将实例s的spider_opened方法与spider_opened信号绑定起来</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># This method is used by Scrapy to create your spiders.</span></span><br><span class="line">s = cls()</span><br><span class="line">crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)</span><br><span class="line"><span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 虚拟环境与重建依赖</title>
      <link href="/2019/08/02/Python%20%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E9%87%8D%E5%BB%BA%E4%BE%9D%E8%B5%96/"/>
      <url>/2019/08/02/Python%20%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E9%87%8D%E5%BB%BA%E4%BE%9D%E8%B5%96/</url>
      
        <content type="html"><![CDATA[<h2 id="conda"><a href="#conda" class="headerlink" title="conda"></a>conda</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1、列出当前存在的环境</span><br><span class="line">conda <span class="builtin-name">info</span> -e </span><br><span class="line"></span><br><span class="line">2、创建新的虚拟环境</span><br><span class="line">conda create -n your_env_name <span class="attribute">python</span>=X.X</span><br><span class="line"></span><br><span class="line">3、激活环境</span><br><span class="line">activate your_env_name</span><br><span class="line"></span><br><span class="line">4、退出环境</span><br><span class="line">deactivate</span><br><span class="line"></span><br><span class="line">5、删除环境/包</span><br><span class="line">conda <span class="builtin-name">remove</span> -n your_env_name --all</span><br><span class="line">conda <span class="builtin-name">remove</span> -n your_env_name package_name（此命令针对conda install -n your_env_name package生效，对pip安装的包显示NotFound）</span><br></pre></td></tr></table></figure><h2 id="pipenv"><a href="#pipenv" class="headerlink" title="pipenv"></a>pipenv</h2><p>1、将pipfile，pip和virtualenv整合到一个命令中。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、查看虚拟环境路径(注需要先进入环境)</span><br><span class="line">pipenv --venv</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、查看目前安装的库及其依赖</span><br><span class="line">pipenv graph</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、创建/进入虚拟环境</span><br><span class="line">pipenv --python 指定路径或版本号 或 pipenv install</span><br><span class="line">pipenv shell <span class="comment"># 进入</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、退出/删除环境</span><br><span class="line"><span class="keyword">exit</span> <span class="comment"># 退出</span></span><br><span class="line">pipenv --rm <span class="comment"># 删除</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、在development分区安装 requests</span><br><span class="line">pipenv install requests --dev</span><br></pre></td></tr></table></figure><p>2、查看本机虚拟环境</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">workon/lsvirtualenv <span class="meta"># 查看</span></span><br><span class="line">workon xxx <span class="meta"># 启用</span></span><br></pre></td></tr></table></figure><p>3、修改虚拟环境安装位置<br>WORKON_HOME变量指定存放目录，如下图：<br><img src="/images/env.png"></p><h2 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">freeze</span> &gt; requirements.txt</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy Middleware和Pipeline</title>
      <link href="/2019/08/02/Scrapy%20Middleware%20Pipeline/"/>
      <url>/2019/08/02/Scrapy%20Middleware%20Pipeline/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Scrapy提供了可自定义2种中间件，1个数据处理器：<br>在爬虫的代码里面专心写数据爬取的代码；在中间件里面专心写突破反爬虫、登录、重试和渲染AJAX等操作。</p><table><thead><tr><th>名称</th><th>作用</th><th>用户设置</th></tr></thead><tbody><tr><td>数据收集器（Item-Pipeline)</td><td>处理item</td><td>覆盖</td></tr><tr><td>下载中间件（Downloader-Middleware）</td><td>处理request、response</td><td>合并</td></tr><tr><td>爬虫中间件（Spider-Middleware）</td><td>处理item、response、request</td><td>合并</td></tr></tbody></table><h2 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h2><p>数字越小代表越靠近Scrapy引擎，优先级越高会被优先调用。</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES_BASE = &#123;</span><br><span class="line">    <span class="comment"># Engine side</span></span><br><span class="line">    &#x27;<span class="attribute">scrapy.downloadermiddlewares.robotstxt.RobotsTxtMiddleware&#x27;</span>: 100,</span><br><span class="line">    &#x27;scrapy<span class="variable">.downloadermiddlewares</span><span class="variable">.httpauth</span><span class="variable">.HttpAuthMiddleware</span>&#x27;: 300,</span><br><span class="line">    &#x27;scrapy<span class="variable">.downloadermiddlewares</span><span class="variable">.downloadtimeout</span><span class="variable">.DownloadTimeoutMiddleware</span>&#x27;: 350,</span><br><span class="line">    &#x27;scrapy<span class="variable">.downloadermiddlewares</span><span class="variable">.defaultheaders</span><span class="variable">.DefaultHeadersMiddleware</span>&#x27;: 400,</span><br><span class="line">    &#x27;scrapy<span class="variable">.downloadermiddlewares</span><span class="variable">.useragent</span><span class="variable">.UserAgentMiddleware</span>&#x27;: 500,</span><br><span class="line">    &#x27;scrapy<span class="variable">.downloadermiddlewares</span><span class="variable">.retry</span><span class="variable">.RetryMiddleware</span>&#x27;: 550,</span><br><span class="line">    &#x27;scrapy<span class="variable">.downloadermiddlewares</span><span class="variable">.ajaxcrawl</span><span class="variable">.AjaxCrawlMiddleware</span>&#x27;: 560,</span><br><span class="line">    &#x27;scrapy<span class="variable">.downloadermiddlewares</span><span class="variable">.redirect</span><span class="variable">.MetaRefreshMiddleware</span>&#x27;: 580,</span><br><span class="line">    &#x27;scrapy<span class="variable">.downloadermiddlewares</span><span class="variable">.httpcompression</span><span class="variable">.HttpCompressionMiddleware</span>&#x27;: 590,</span><br><span class="line">    &#x27;scrapy<span class="variable">.downloadermiddlewares</span><span class="variable">.redirect</span><span class="variable">.RedirectMiddleware</span>&#x27;: 600,</span><br><span class="line">    &#x27;scrapy<span class="variable">.downloadermiddlewares</span><span class="variable">.cookies</span><span class="variable">.CookiesMiddleware</span>&#x27;: 700,</span><br><span class="line">    &#x27;scrapy<span class="variable">.downloadermiddlewares</span><span class="variable">.httpproxy</span><span class="variable">.HttpProxyMiddleware</span>&#x27;: 750,</span><br><span class="line">    &#x27;scrapy<span class="variable">.downloadermiddlewares</span><span class="variable">.stats</span><span class="variable">.DownloaderStats</span>&#x27;: 850,</span><br><span class="line">    &#x27;scrapy<span class="variable">.downloadermiddlewares</span><span class="variable">.httpcache</span><span class="variable">.HttpCacheMiddleware</span>&#x27;: 900,</span><br><span class="line">    # Downloader side</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、Downloader Middleware<br>位置:</p><ul><li>在Scheduler调度出队列的Request发送给Downloader下载之前</li><li>下载后生成的Response被Spider解析之前</li></ul><p>用途：</p><ul><li>修改User-Agent\处理重定向</li><li>设置代理\设置Cookies</li><li>失败重试</li></ul><p>核心方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMiddleware</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, spider_data</span>):</span></span><br><span class="line">        self.spider_data = spider_data</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span>(<span class="params">cls, crawler</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取spider的settings参数,返回中间件实例对象。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        spider_data = crawler.settings.get(<span class="string">&quot;SPIDER_DATA&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;### middleware get spider_data: &#123;&#125;&quot;</span>.format(spider_data))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cls(spider_data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self, request, spider</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Request从队列里调度出来到Downloader下载执行之前。</span></span><br><span class="line"><span class="string">        return</span></span><br><span class="line"><span class="string">            None: 继续处理Request</span></span><br><span class="line"><span class="string">            Response: 返回Response</span></span><br><span class="line"><span class="string">            Request: 重新调度</span></span><br><span class="line"><span class="string">        raise IgnoreRequest:  process_exception -&gt; Request.errback</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        print(<span class="string">&quot;### call process_request&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self, request, response, spider</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Downloader执行下载之后得到对应的Response,发送给Spider解析之前。</span></span><br><span class="line"><span class="string">        return</span></span><br><span class="line"><span class="string">            Response: 继续处理Response</span></span><br><span class="line"><span class="string">            Request: 重新调度</span></span><br><span class="line"><span class="string">        raise IgnoreRequest: Request.errback</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        print(<span class="string">&quot;### call process_response&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span>(<span class="params">self, request, exception, spider</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        当Downloader或process_request()方法抛出异常，例如抛出IngoreRequest异常</span></span><br><span class="line"><span class="string">        return</span></span><br><span class="line"><span class="string">            None: 继续处理异常</span></span><br><span class="line"><span class="string">            Response: 返回Response</span></span><br><span class="line"><span class="string">            Request: 重新调用</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>2、Spider Middleware</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SPIDER_MIDDLEWARES_BASE = &#123;</span><br><span class="line">    <span class="comment"># Engine side</span></span><br><span class="line">    &#x27;<span class="attribute">scrapy.spidermiddlewares.httperror.HttpErrorMiddleware&#x27;</span>: 50,</span><br><span class="line">    &#x27;scrapy<span class="variable">.spidermiddlewares</span><span class="variable">.offsite</span><span class="variable">.OffsiteMiddleware</span>&#x27;: 500,</span><br><span class="line">    &#x27;scrapy<span class="variable">.spidermiddlewares</span><span class="variable">.referer</span><span class="variable">.RefererMiddleware</span>&#x27;: 700,</span><br><span class="line">    &#x27;scrapy<span class="variable">.spidermiddlewares</span><span class="variable">.urllength</span><span class="variable">.UrlLengthMiddleware</span>&#x27;: 800,</span><br><span class="line">    &#x27;scrapy<span class="variable">.spidermiddlewares</span><span class="variable">.depth</span><span class="variable">.DepthMiddleware</span>&#x27;: 900,</span><br><span class="line">    # Spider side</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用位置:</p><ul><li>Downloader生成的Response发送给Spider之前</li><li>Spider生成的Request发送给Scheduler之前</li><li>Spider生成的Item发送给Item pipeline之前</li></ul><p>核心方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpiderMiddleware</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, spider_data</span>):</span></span><br><span class="line">        self.spider_data = spider_data</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span>(<span class="params">cls, crawler</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        获取spider的settings参数,返回中间件实例对象</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        spider_data = crawler.settings.get(<span class="string">&quot;SPIDER_DATA&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;### spider middleware get spider_data: &#123;&#125;&quot;</span>.format(spider_data))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cls(spider_data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_spider_input</span>(<span class="params">self, response, spider</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        当response被Spider Middleware处理后，马上要进入某个回调函数parse_xxx()前该方法调用</span></span><br><span class="line"><span class="string">        param</span></span><br><span class="line"><span class="string">            response:即被处理的Response</span></span><br><span class="line"><span class="string">            spider:该Response对应的Spider</span></span><br><span class="line"><span class="string">        return None  继续处理response，调用其他的Spider Middleware</span></span><br><span class="line"><span class="string">        raise Exception 调用Request的errback()方法</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;### call process_spider_input&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_spider_output</span>(<span class="params">self, response, result, spider</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        当Spider处理Response返回结果时,即yield item或者yield scrapy.Request()的时该方法被调用。</span></span><br><span class="line"><span class="string">        param</span></span><br><span class="line"><span class="string">            response：生成该输出的Response</span></span><br><span class="line"><span class="string">            result: 包含Request或Item 对象的可迭代对象即Spider返回的结果</span></span><br><span class="line"><span class="string">            spider：即其结果对应的spider</span></span><br><span class="line"><span class="string">        return</span></span><br><span class="line"><span class="string">            iterable of Request、dict or Item</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        print(<span class="string">&quot;### call process_spider_output&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">            <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_spider_exception</span>(<span class="params">self, response, exception, spider</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        当process_spider_input方法抛出异常时或当爬虫本身的代码出现了Exception该方法被调用。</span></span><br><span class="line"><span class="string">        param</span></span><br><span class="line"><span class="string">            response是Response对象，异常被抛出时被处理的Response</span></span><br><span class="line"><span class="string">            exception是Exception对象,即被抛出的异常</span></span><br><span class="line"><span class="string">            spider是Spider对象，即抛出该异常的Spider</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        return</span></span><br><span class="line"><span class="string">            None 继续处理该异常，调用其他Spider Middleware的process_spider_exception方法</span></span><br><span class="line"><span class="string">            iterable of Response, dict, or Item 则其他process_spider_output方法被调用</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_start_requests</span>(<span class="params">self, start_requests, spider</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        以Spider启动的Request为参数(即运行到start_requests()的时候)被调用，必须返回Request</span></span><br><span class="line"><span class="string">        param</span></span><br><span class="line"><span class="string">            start_requests:包含Request的可迭代对象</span></span><br><span class="line"><span class="string">            spider:即Start Requests所属的Spider</span></span><br><span class="line"><span class="string">        return</span></span><br><span class="line"><span class="string">            包含Request对象的可迭代对象</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>注：</strong>只需要实现其中一个核心方法就可以定义一个Spider Middleware。</p><h2 id="Item-Pipeline"><a href="#Item-Pipeline" class="headerlink" title="Item Pipeline"></a>Item Pipeline</h2><p>主要功能：</p><ul><li>清洗HTML数据</li><li>检查爬取字段</li><li>查重并丢弃重复内容</li><li>保存爬取结果</li></ul><p>核心方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlPipeline</span>：</span></span><br><span class="line"><span class="class"><span class="title">def</span> <span class="title">__init__</span>(<span class="params">...</span>):</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span>(<span class="params">cls,crawler</span>):</span></span><br><span class="line"><span class="keyword">return</span> cls(...)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self,spider</span>):</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self,spider</span>):</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self,item,spider</span>):</span></span><br><span class="line">data = dict(item)</span><br><span class="line">keys = <span class="string">&#x27;,&#x27;</span>.join(data.keys())</span><br><span class="line">value = <span class="string">&#x27;,&#x27;</span>.join([<span class="string">&#x27;%s&#x27;</span>]*len(data))</span><br><span class="line">sql = <span class="string">&#x27;INSERT INTO %s (%s) VALUES (%S)&#x27;</span>%(item.table,keys,values)</span><br><span class="line">self.cursor.execute(sql,tuple(data.values()))</span><br><span class="line">self.db.commit()</span><br><span class="line"><span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>优雅写Python(优先级和格式化)</title>
      <link href="/2019/08/01/Python%20%E4%BC%98%E9%9B%85%E6%96%B9%E5%BC%8F(%E4%BC%98%E5%85%88%E7%BA%A7%E5%92%8C%E6%A0%BC%E5%BC%8F%E5%8C%96)/"/>
      <url>/2019/08/01/Python%20%E4%BC%98%E9%9B%85%E6%96%B9%E5%BC%8F(%E4%BC%98%E5%85%88%E7%BA%A7%E5%92%8C%E6%A0%BC%E5%BC%8F%E5%8C%96)/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">国内源</span><br><span class="line">pip <span class="keyword">install</span> xxx -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">升级单个模块</span><br><span class="line">pip <span class="keyword">install</span> <span class="comment">--upgrade xxx </span></span><br></pre></td></tr></table></figure><h2 id="序列解包"><a href="#序列解包" class="headerlink" title="序列解包"></a>序列解包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">info = [<span class="string">&#x27;brucepk&#x27;</span>, <span class="string">&#x27;man&#x27;</span>, <span class="string">&#x27;python&#x27;</span>]</span><br><span class="line">name,sex,tech = info</span><br></pre></td></tr></table></figure><h2 id="区间判断采用链式判断"><a href="#区间判断采用链式判断" class="headerlink" title="区间判断采用链式判断"></a>区间判断采用链式判断</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>  <span class="number">80</span> &lt;= score &lt; <span class="number">90</span>:</span><br><span class="line">level = <span class="string">&#x27;B&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="多值条件判断"><a href="#多值条件判断" class="headerlink" title="多值条件判断"></a>多值条件判断</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> num <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>):</span><br><span class="line">type = <span class="string">&#x27;奇数&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="多条件内容判断至少一个成立"><a href="#多条件内容判断至少一个成立" class="headerlink" title="多条件内容判断至少一个成立"></a>多条件内容判断至少一个成立</h2><p>常规方法<br>用 or 连接多个条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">math,English,computer =<span class="number">90</span>,<span class="number">80</span>,<span class="number">88</span></span><br><span class="line"><span class="keyword">if</span> math&lt;<span class="number">60</span> <span class="keyword">or</span> English&lt;<span class="number">60</span> <span class="keyword">or</span> computer&lt;<span class="number">60</span>:</span><br><span class="line">print(<span class="string">&#x27;not pass&#x27;</span>)</span><br></pre></td></tr></table></figure><p>优雅方法：<br>使用 any 语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">math,English,computer =<span class="number">90</span>,<span class="number">59</span>,<span class="number">88</span></span><br><span class="line"><span class="keyword">if</span> any([math&lt;<span class="number">60</span>,English&lt;<span class="number">60</span>,computer&lt;<span class="number">60</span>]):</span><br><span class="line">print(<span class="string">&#x27;not pass&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="多条件判断内容全部成立"><a href="#多条件判断内容全部成立" class="headerlink" title="多条件判断内容全部成立"></a>多条件判断内容全部成立</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> all([math&gt;<span class="number">60</span>,English&gt;<span class="number">60</span>,computer&gt;<span class="number">60</span>]):</span><br><span class="line">print(<span class="string">&#x27;pass&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="遍历序列元素和元素下标注"><a href="#遍历序列元素和元素下标注" class="headerlink" title="遍历序列元素和元素下标注"></a>遍历序列元素和元素下标注</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L =[<span class="string">&#x27;math&#x27;</span>, <span class="string">&#x27;English&#x27;</span>, <span class="string">&#x27;computer&#x27;</span>, <span class="string">&#x27;Physics&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> enumerate(L):</span><br><span class="line">print(k, <span class="string">&#x27;:&#x27;</span>, v)</span><br></pre></td></tr></table></figure><h2 id="for-else语句"><a href="#for-else语句" class="headerlink" title="for/else语句"></a>for/else语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mylist:</span><br><span class="line"><span class="keyword">if</span> i == theflag:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">process(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;List argument missing terminal flag.&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="生成器生成费波那契数列"><a href="#生成器生成费波那契数列" class="headerlink" title="生成器生成费波那契数列"></a>生成器生成费波那契数列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> a &lt; n:</span><br><span class="line"><span class="keyword">yield</span> a</span><br><span class="line">a, b = b, a + b</span><br></pre></td></tr></table></figure><h2 id="预设字典默认值"><a href="#预设字典默认值" class="headerlink" title="预设字典默认值"></a>预设字典默认值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = [(<span class="string">&#x27;foo&#x27;</span>, <span class="number">10</span>), (<span class="string">&#x27;bar&#x27;</span>, <span class="number">20</span>), (<span class="string">&#x27;foo&#x27;</span>, <span class="number">39</span>), (<span class="string">&#x27;bar&#x27;</span>, <span class="number">49</span>)]</span><br><span class="line">groups = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (key, value) <span class="keyword">in</span> data:</span><br><span class="line">groups.setdefault(key, []).append(value)</span><br></pre></td></tr></table></figure><h2 id="format用法"><a href="#format用法" class="headerlink" title="format用法"></a>format用法</h2><p>1、用大括号 { } 来转义大括号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;&#123; My &#125;&#125; int: &#123;0:d&#125;;  hex: &#123;0:#x&#125;;  oct: &#123;0:#o&#125;;  bin: &#123;0:#b&#125;  and &#123;0:&#123;label&#125;&lt;6&#125;&quot;</span>.format(<span class="number">11</span>,label=<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#123; My &#125; int: 11;  hex: 0xb;  oct: 0o13;  bin: 0b1011  and 11####&#x27;</span></span><br></pre></td></tr></table></figure><p>2、可以通过key,dict,list,class形式访问参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lists = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;&#123;name[0]&#125; and &#123;name[1]&#125;&#x27;</span>.format(name=lists)</span><br><span class="line"><span class="string">&#x27;a and b</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>原数据</th><th>格式</th><th>结果</th><th>说明</th></tr></thead><tbody><tr><td>3.1415926</td><td>{:.2f}</td><td>3.14</td><td>保留小数点后两位</td></tr><tr><td>3.1415926</td><td>{:+.2f}</td><td>3.14</td><td>带符号保留小数点后两位</td></tr><tr><td>-1</td><td>{:+.2f}</td><td>-1</td><td>带符号保留小数点后两位</td></tr><tr><td>2.71828</td><td>{:.0f}</td><td>3</td><td>不带小数</td></tr><tr><td>1000000</td><td>{:,}</td><td>1,000,000</td><td>以逗号分隔的数字格式</td></tr><tr><td>0.25</td><td>{:.2%}</td><td>25.00%</td><td>百分比格式</td></tr><tr><td>1000000000</td><td>{:.2e}</td><td>1.00E+09</td><td>指数记法</td></tr><tr><td>11</td><td>{0:b}</td><td>1011</td><td>转换成二进制</td></tr><tr><td>11</td><td>{0:d}</td><td>11</td><td>转换成十进制</td></tr><tr><td>11</td><td>{0:o}</td><td>13</td><td>转换成八进制</td></tr><tr><td>11</td><td>{0:x}</td><td>b</td><td>转换成十六进制</td></tr></tbody></table><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><table><thead><tr><th>优先级</th><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>lambda</td><td>Lambda表达式</td></tr><tr><td>2</td><td>or</td><td>布尔“或”</td></tr><tr><td>3</td><td>and</td><td>布尔“与”</td></tr><tr><td>4</td><td>not x</td><td>布尔“非”</td></tr><tr><td>5</td><td>in，not in</td><td>成员测试</td></tr><tr><td>6</td><td>is，is not</td><td>同一性测试</td></tr><tr><td>7</td><td>&lt;，&lt;=，&gt;，&gt;=，!=，==</td><td>比较</td></tr><tr><td>8</td><td>\|</td><td>按位或</td></tr><tr><td>9</td><td>^</td><td>按位异或</td></tr><tr><td>10</td><td>&amp;</td><td>按位与</td></tr><tr><td>11</td><td>&lt;&lt;，&gt;&gt;</td><td>移位</td></tr><tr><td>12</td><td>+，-</td><td>加法与减法</td></tr><tr><td>13</td><td>*，/，%</td><td>乘法、除法与取余</td></tr><tr><td>14</td><td>+x，-x</td><td>正负号</td></tr><tr><td>15</td><td>~x</td><td>按位翻转</td></tr><tr><td>16</td><td>**</td><td>指数</td></tr><tr><td>17</td><td>x.attribute</td><td>属性参考</td></tr><tr><td>18</td><td>x[index]</td><td>下标</td></tr><tr><td>19</td><td>x[index:index]</td><td>寻址段</td></tr><tr><td>20</td><td>f(arguments...)</td><td>函数调用</td></tr><tr><td>21</td><td>(experession,...)</td><td>绑定或元组显示</td></tr><tr><td>22</td><td>[expression,...]</td><td>列表显示</td></tr><tr><td>23</td><td>{key:datum,...}</td><td>字典显示</td></tr><tr><td>24</td><td>‘expression,...‘</td><td>字符串转换</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 编程足迹 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy 高级配置</title>
      <link href="/2019/08/01/Scrapy%20%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/08/01/Scrapy%20%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="errback"><a href="#errback" class="headerlink" title="errback"></a>errback</h2><p>errback必须要有callback函数，failure.request就是创建的Request对象。<br>errback函数能捕获的scrapy错误有：连接建立超时，DNS错误等。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> <span class="keyword">self</span>.<span class="symbol">start_urls:</span></span><br><span class="line"><span class="keyword">yield</span> scrapy.Request(u, callback=<span class="keyword">self</span>.parse_httpbin,</span><br><span class="line">errback=<span class="keyword">self</span>.errback_httpbin,</span><br><span class="line">dont_filter=True)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">errback_httpbin</span><span class="params">(<span class="keyword">self</span>, failure)</span></span><span class="symbol">:</span></span><br><span class="line"><span class="comment"># log all failures</span></span><br><span class="line"><span class="keyword">self</span>.logger.error(repr(failure))</span><br><span class="line"></span><br><span class="line"><span class="comment"># in case you want to do something special for some errors,</span></span><br><span class="line"><span class="comment"># you may need the failure&#x27;s type:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> failure.check(HttpError)<span class="symbol">:</span></span><br><span class="line"><span class="comment"># these exceptions come from HttpError spider middleware</span></span><br><span class="line"><span class="comment"># you can get the non-200 response</span></span><br><span class="line">response = failure.value.response</span><br><span class="line"><span class="keyword">self</span>.logger.error(<span class="string">&#x27;HttpError on %s&#x27;</span>, response.url)</span><br></pre></td></tr></table></figure><h2 id="配置关闭条件-0代表不开启"><a href="#配置关闭条件-0代表不开启" class="headerlink" title="配置关闭条件(0代表不开启)"></a>配置关闭条件(0代表不开启)</h2><p>1、CLOSESPIDER_TIMEOUT<br>默认值：0<br>如果一个spider在指定的秒数后仍在运行， 它将以 closespider_timeout 的原因被自动关闭。</p><p>2、CLOSESPIDER_ITEMCOUNT<br>默认值：0<br>一个整数值，指定条目的个数。如果spider爬取条目数超过了指定的数， 并且这些条目通过item pipeline传递，spider将会以 closespider_itemcount 的原因被自动关闭。</p><p>3、CLOSESPIDER_PAGECOUNT<br>默认值：0<br>一个整数值，指定最大的抓取响应(reponses)数。 如果spider抓取数超过指定的值，则会以 closespider_pagecount 的原因自动关闭。</p><h2 id="项目相关设置"><a href="#项目相关设置" class="headerlink" title="项目相关设置"></a>项目相关设置</h2><p>1、邮件比如MAIL_FROM，可以让你配置MailSender类，该类目前用于统计邮件信息以及内存使用信息。<br>2、<code>SCRAPY_SETTINGS_MODULE</code> 以及 <code>SCRAPY_PROJECT</code>，可以调整Scrapy项目与其他项目集成的方式，比如Django。</p><h2 id="下载调优"><a href="#下载调优" class="headerlink" title="下载调优"></a>下载调优</h2><p>将<code>REDIRECT_PRIORITY_ADJUST</code>设为2，意味着每次发生重定向时，新请求会在所有非重定向请求完成服务后才会被调度；<br>而将<code>REDIRECT_MAX_TIMES</code>设置为20，则表示在执行20次重定向后下载器将会放弃尝试。</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Scrapy settings for companyNews project</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># For simplicity, this file contains only settings considered important or</span></span><br><span class="line"><span class="meta"># commonly used. You can find more settings consulting the documentation:</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#     http://doc.scrapy.org/en/latest/topics/settings.html</span></span><br><span class="line"><span class="meta">#     http://scrapy.readthedocs.org/en/latest/topics/downloader-middleware.html</span></span><br><span class="line"><span class="meta">#     http://scrapy.readthedocs.org/en/latest/topics/spider-middleware.html</span></span><br><span class="line"></span><br><span class="line">BOT_NAME = <span class="string">&#x27;companyNews&#x27;</span></span><br><span class="line"></span><br><span class="line">SPIDER_MODULES = [<span class="string">&#x27;companyNews.spiders&#x27;</span>]</span><br><span class="line">NEWSPIDER_MODULE = <span class="string">&#x27;companyNews.spiders&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#-----------------------日志文件配置-----------------------------------</span></span><br><span class="line"><span class="meta">#日志文件名</span></span><br><span class="line"><span class="meta">#LOG_FILE = &quot;dg.log&quot;</span></span><br><span class="line"><span class="meta">#日志文件级别</span></span><br><span class="line">LOG_LEVEL = <span class="string">&#x27;WARNING&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Obey robots.txt rules</span></span><br><span class="line"><span class="meta"># robots.txt 是遵循 Robot协议 的一个文件，它保存在网站的服务器中，它的作用是，告诉搜索引擎爬虫，</span></span><br><span class="line"><span class="meta"># 本网站哪些目录下的网页 不希望 你进行爬取收录。在Scrapy启动后，会在第一时间访问网站的 robots.txt 文件，</span></span><br><span class="line"><span class="meta"># 然后决定该网站的爬取范围。</span></span><br><span class="line"><span class="meta"># ROBOTSTXT_OBEY = True</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># ------------------------全局并发数的一些配置:-------------------------------</span></span><br><span class="line"><span class="meta"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span></span><br><span class="line"><span class="meta"># 默认 Request 并发数：16</span></span><br><span class="line"><span class="meta"># CONCURRENT_REQUESTS = 32</span></span><br><span class="line"><span class="meta"># 默认 Item 并发数：100</span></span><br><span class="line"><span class="meta"># CONCURRENT_ITEMS = 100</span></span><br><span class="line"><span class="meta"># The download delay setting will honor only one of:</span></span><br><span class="line"><span class="meta"># 默认每个域名的并发数：16</span></span><br><span class="line"><span class="meta">#CONCURRENT_REQUESTS_PER_DOMAIN = 16</span></span><br><span class="line"><span class="meta"># 每个IP的最大并发数：0表示忽略</span></span><br><span class="line"><span class="meta"># CONCURRENT_REQUESTS_PER_IP = 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Configure a delay for requests for the same website (default: 0)</span></span><br><span class="line"><span class="meta"># See http://scrapy.readthedocs.org/en/latest/topics/settings.html#download-delay</span></span><br><span class="line"><span class="meta"># See also autothrottle settings and docs</span></span><br><span class="line"><span class="meta">#DOWNLOAD_DELAY 会影响 CONCURRENT_REQUESTS，不能使并发显现出来,设置下载延迟</span></span><br><span class="line"><span class="meta">#DOWNLOAD_DELAY = 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Disable cookies (enabled by default)</span></span><br><span class="line"><span class="meta">#禁用cookies</span></span><br><span class="line"><span class="meta"># COOKIES_ENABLED = True</span></span><br><span class="line"><span class="meta"># COOKIES_DEBUG = True</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Disable Telnet Console (enabled by default)</span></span><br><span class="line"><span class="meta">#TELNETCONSOLE_ENABLED = False</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></span><br><span class="line"><span class="meta">#USER_AGENT = &#x27;haoduofuli (+http://www.yourdomain.com)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Override the default request headers:</span></span><br><span class="line">DEFAULT_REQUEST_HEADERS = &#123;</span><br><span class="line">  <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># Enable or disable spider middlewares</span></span><br><span class="line"><span class="meta"># See http://scrapy.readthedocs.org/en/latest/topics/spider-middleware.html</span></span><br><span class="line">SPIDER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">&#x27;companyNews.middlewares.UserAgentmiddleware&#x27;</span>: <span class="number">401</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># Enable or disable downloader middlewares</span></span><br><span class="line"><span class="meta"># See http://scrapy.readthedocs.org/en/latest/topics/downloader-middleware.html</span></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">     <span class="string">&#x27;companyNews.middlewares.UserAgentmiddleware&#x27;</span>: <span class="number">400</span>,</span><br><span class="line">     # <span class="string">&#x27;companyNews.middlewares.CookieMiddleware&#x27;</span>: <span class="number">700</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MYEXT_ENABLED=True      # 开启扩展</span><br><span class="line">IDLE_NUMBER=<span class="number">10</span>           # 配置空闲持续时间单位为 <span class="number">360</span>个 ，一个时间单位为<span class="number">5</span>s</span><br><span class="line"><span class="meta"># Enable or disable extensions</span></span><br><span class="line"><span class="meta"># See http://scrapy.readthedocs.org/en/latest/topics/extensions.html</span></span><br><span class="line"><span class="meta"># 在 EXTENSIONS 配置，激活扩展</span></span><br><span class="line">EXTENSIONS = &#123;</span><br><span class="line">    # <span class="string">&#x27;scrapy.extensions.telnet.TelnetConsole&#x27;</span>: None,</span><br><span class="line">    <span class="string">&#x27;companyNews.extensions.RedisSpiderSmartIdleClosedExensions&#x27;</span>: <span class="number">500</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># Configure item pipelines</span></span><br><span class="line"><span class="meta"># See http://scrapy.readthedocs.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"><span class="meta"># 注意:自定义pipeline的优先级需高于Redispipeline,因为RedisPipeline不会返回item,</span></span><br><span class="line"><span class="meta"># 所以如果RedisPipeline优先级高于自定义pipeline,那么自定义pipeline无法获取到item</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">     #将清除的项目在redis进行处理，# 将RedisPipeline注册到pipeline组件中(这样才能将数据存入Redis)</span><br><span class="line">    # <span class="string">&#x27;scrapy_redis.pipelines.RedisPipeline&#x27;</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="string">&#x27;companyNews.pipelines.companyNewsPipeline&#x27;</span>: <span class="number">300</span>,# 自定义pipeline视情况选择性注册(可选)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># Enable and configure the AutoThrottle extension (disabled by default)</span></span><br><span class="line"><span class="meta"># See http://doc.scrapy.org/en/latest/topics/autothrottle.html</span></span><br><span class="line"><span class="meta">#AUTOTHROTTLE_ENABLED = True</span></span><br><span class="line"><span class="meta"># The initial download delay</span></span><br><span class="line"><span class="meta">#AUTOTHROTTLE_START_DELAY = 5</span></span><br><span class="line"><span class="meta"># The maximum download delay to be set in case of high latencies</span></span><br><span class="line"><span class="meta">#AUTOTHROTTLE_MAX_DELAY = 60</span></span><br><span class="line"><span class="meta"># The average number of requests Scrapy should be sending in parallel to</span></span><br><span class="line"><span class="meta"># each remote server</span></span><br><span class="line"><span class="meta">#AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span></span><br><span class="line"><span class="meta"># Enable showing throttling stats for every response received:</span></span><br><span class="line"><span class="meta">#AUTOTHROTTLE_DEBUG = False</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Enable and configure HTTP caching (disabled by default)</span></span><br><span class="line"><span class="meta"># See http://scrapy.readthedocs.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span></span><br><span class="line"><span class="meta"># ----------------scrapy默认已经自带了缓存，配置如下-----------------</span></span><br><span class="line"><span class="meta"># 打开缓存</span></span><br><span class="line"><span class="meta">#HTTPCACHE_ENABLED = True</span></span><br><span class="line"><span class="meta"># 设置缓存过期时间（单位：秒）</span></span><br><span class="line"><span class="meta">#HTTPCACHE_EXPIRATION_SECS = 0</span></span><br><span class="line"><span class="meta"># 缓存路径(默认为：.scrapy/httpcache)</span></span><br><span class="line"><span class="meta">#HTTPCACHE_DIR = &#x27;httpcache&#x27;</span></span><br><span class="line"><span class="meta"># 忽略的状态码</span></span><br><span class="line"><span class="meta">#HTTPCACHE_IGNORE_HTTP_CODES = []</span></span><br><span class="line"><span class="meta"># 缓存模式(文件缓存)</span></span><br><span class="line"><span class="meta">#HTTPCACHE_STORAGE = &#x27;scrapy.extensions.httpcache.FilesystemCacheStorage&#x27;</span></span><br><span class="line"><span class="meta">#HTTPCACHE_POLICY = &quot;scrapy.extensions.httpcache.DummyPolicy&quot; 策略：所有请求均缓存，下次请求直接访问原来的缓存即可</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#-----------------Scrapy-Redis分布式爬虫相关设置如下--------------------------</span></span><br><span class="line"><span class="meta"># Enables scheduling storing requests queue in redis.</span></span><br><span class="line"><span class="meta">#启用Redis调度存储请求队列，使用Scrapy-Redis的调度器,不再使用scrapy的调度器</span></span><br><span class="line">SCHEDULER = <span class="string">&quot;scrapy_redis.scheduler.Scheduler&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Ensure all spiders share same duplicates filter through redis.</span></span><br><span class="line"><span class="meta">#确保所有的爬虫通过Redis去重，使用Scrapy-Redis的去重组件,不再使用scrapy的去重组件</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">&quot;scrapy_redis.dupefilter.RFPDupeFilter&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 默认请求序列化使用的是pickle 但是我们可以更改为其他类似的。PS：这玩意儿2.X的可以用。3.X的不能用</span></span><br><span class="line"><span class="meta"># SCHEDULER_SERIALIZER = &quot;scrapy_redis.picklecompat&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 使用优先级调度请求队列 （默认使用），</span></span><br><span class="line"><span class="meta"># 使用Scrapy-Redis的从请求集合中取出请求的方式,三种方式择其一即可:</span></span><br><span class="line"><span class="meta"># 分别按(1)请求的优先级/(2)队列FIFO/(先进先出)(3)栈FILO 取出请求（先进后出）</span></span><br><span class="line"><span class="meta"># SCHEDULER_QUEUE_CLASS = &#x27;scrapy_redis.queue.PriorityQueue&#x27;</span></span><br><span class="line"><span class="meta"># 可选用的其它队列</span></span><br><span class="line">SCHEDULER_QUEUE_CLASS = <span class="string">&#x27;scrapy_redis.queue.FifoQueue&#x27;</span></span><br><span class="line"><span class="meta"># SCHEDULER_QUEUE_CLASS = &#x27;scrapy_redis.queue.LifoQueue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Don&#x27;t cleanup redis queues, allows to pause/resume crawls.</span></span><br><span class="line"><span class="meta">#不清除Redis队列、这样可以暂停/恢复 爬取，</span></span><br><span class="line"><span class="meta"># 允许暂停,redis请求记录不会丢失(重启爬虫不会重头爬取已爬过的页面)</span></span><br><span class="line"><span class="meta">#SCHEDULER_PERSIST = True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#----------------------redis的地址配置-------------------------------------</span></span><br><span class="line"><span class="meta"># Specify the full Redis URL for connecting (optional).</span></span><br><span class="line"><span class="meta"># If set, this takes precedence over the REDIS_HOST and REDIS_PORT settings.</span></span><br><span class="line"><span class="meta"># 指定用于连接redis的URL（可选）</span></span><br><span class="line"><span class="meta"># 如果设置此项，则此项优先级高于设置的REDIS_HOST 和 REDIS_PORT</span></span><br><span class="line"><span class="meta"># REDIS_URL = &#x27;redis://root:密码@主机ＩＰ:端口&#x27;</span></span><br><span class="line">REDIS_URL = <span class="string">&#x27;redis://root:123456@192.168.8.30:6379&#x27;</span></span><br><span class="line"><span class="meta"># 自定义的redis参数（连接超时之类的）</span></span><br><span class="line">REDIS_PARAMS=&#123;<span class="string">&#x27;db&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta"># Specify the host and port to use when connecting to Redis (optional).</span></span><br><span class="line"><span class="meta"># 指定连接到redis时使用的端口和地址（可选）</span></span><br><span class="line"><span class="meta">#REDIS_HOST = &#x27;127.0.0.1&#x27;</span></span><br><span class="line"><span class="meta">#REDIS_PORT = 6379</span></span><br><span class="line"><span class="meta">#REDIS_PASS = &#x27;19940225&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># REDIRECT_ENABLED = False</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># HTTPERROR_ALLOWED_CODES = [302, 301]</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># DEPTH_LIMIT = 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta"># 最大空闲时间防止分布式爬虫因为等待而关闭</span></span><br><span class="line"><span class="meta"># 这只有当上面设置的队列类是SpiderQueue或SpiderStack时才有效</span></span><br><span class="line"><span class="meta"># 并且当您的蜘蛛首次启动时，也可能会阻止同一时间启动（由于队列为空）</span></span><br><span class="line"><span class="meta"># SCHEDULER_IDLE_BEFORE_CLOSE = 10</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 序列化项目管道作为redis Key存储</span></span><br><span class="line"><span class="meta"># REDIS_ITEMS_KEY = &#x27;%(spider)s:items&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 默认使用ScrapyJSONEncoder进行项目序列化</span></span><br><span class="line"><span class="meta"># You can use any importable path to a callable object.</span></span><br><span class="line"><span class="meta"># REDIS_ITEMS_SERIALIZER = &#x27;json.dumps&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 自定义redis客户端类</span></span><br><span class="line"><span class="meta"># REDIS_PARAMS[&#x27;redis_cls&#x27;] = &#x27;myproject.RedisClient&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 如果为True，则使用redis的&#x27;spop&#x27;进行操作。</span></span><br><span class="line"><span class="meta"># 如果需要避免起始网址列表出现重复，这个选项非常有用。开启此选项urls必须通过sadd添加，否则会出现类型错误。</span></span><br><span class="line"><span class="meta"># REDIS_START_URLS_AS_SET = False</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># RedisSpider和RedisCrawlSpider默认 start_usls 键</span></span><br><span class="line"><span class="meta"># REDIS_START_URLS_KEY = &#x27;%(name)s:start_urls&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 设置redis使用utf-8之外的编码</span></span><br><span class="line"><span class="meta"># REDIS_ENCODING = &#x27;latin1&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy get请求和post请求</title>
      <link href="/2019/08/01/Scrapy%20get%E8%AF%B7%E6%B1%82%E5%92%8Cpost%E8%AF%B7%E6%B1%82/"/>
      <url>/2019/08/01/Scrapy%20get%E8%AF%B7%E6%B1%82%E5%92%8Cpost%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="Form-Data"><a href="#Form-Data" class="headerlink" title="Form Data"></a>Form Data</h2><p>‘Content-Type’: “application/x-www-form-urlencoded”表示multipart/form-data表单请求，如下图知乎登录参数<br><img src="/images/2-scrapybase/01-formdata.png"></p><p>1、scrapy.Request</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 图1形式参数提交</span></span><br><span class="line">self.login_url = <span class="string">&#x27;https://www.zhihu.com/api/v3/oauth/sign_in&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成登录参数后</span></span><br><span class="line"><span class="keyword">yield</span> scrapy.Request(</span><br><span class="line">url=self.login_url,</span><br><span class="line">method=<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">body=encrytext,</span><br><span class="line">headers = headers,</span><br><span class="line">callback=self.parse,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>2、scrapy.FormRequest<br>用于提交表单数据，以下图github登录为例。<br><img src="/images/2-scrapybase/02-github.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">post_data = dict()</span><br><span class="line"></span><br><span class="line"><span class="keyword">yield</span> scrapy.FormRequest(</span><br><span class="line"><span class="string">&quot;https://github.com/session&quot;</span>,</span><br><span class="line">formdata=post_data,</span><br><span class="line">callback=self.after_login</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>3、scrapy.FormRequest.from_response<br>自动的从response中寻找form表单（表单action，表单name），并且可以预填充表单认证令牌等发送POST请求提交。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">start_urls = [<span class="string">&#x27;https://github.com/login&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line"><span class="keyword">yield</span> scrapy.FormRequest.from_response(</span><br><span class="line">response,   <span class="comment"># 自动从response中寻找form表单,并发送请求到表单action的url地址。</span></span><br><span class="line"><span class="comment"># formid=None,    # 也可以通过id属性定位form表单</span></span><br><span class="line"><span class="comment"># formname=None,  # 也可以通过name属性定位form表单</span></span><br><span class="line"><span class="comment"># formxpath=None,  # 也可以通过XPath定位form表单</span></span><br><span class="line">formdata=&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;用户名&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;密码&quot;</span>&#125;,</span><br><span class="line">callback = self.after_login</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Request-Payload"><a href="#Request-Payload" class="headerlink" title="Request Payload"></a>Request Payload</h2><p>‘Content-Type’: “application/json”表示其他形式(如ajax方式)的POST请求，如下图:<br><img src="/images/2-scrapybase/03-payload.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span>(<span class="params">self</span>):</span></span><br><span class="line">url = <span class="string">&quot;https://www.itjuzi.com/api/companys&quot;</span></span><br><span class="line">payload = &#123;</span><br><span class="line"><span class="string">&quot;city&quot;</span>: [],</span><br><span class="line"><span class="string">&quot;com_fund_needs&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;hot_city&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;keyword&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;location&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;page&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;pagetotal&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&quot;per_page&quot;</span>: <span class="number">30</span>,</span><br><span class="line"><span class="string">&quot;prov&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;round&quot;</span>: [],</span><br><span class="line"><span class="string">&quot;scope&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;selected&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;sort&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;status&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;sub_scope&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;total&quot;</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">&quot;year&quot;</span>: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">yield</span> scrapy.Request(url, self.parse, method=<span class="string">&quot;POST&quot;</span>, body=json.dumps(payload), headers=self.headers)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>请求方式</th><th>使用方法</th><th>headers参数</th><th>参数</th><th>服务器端接收到参数</th></tr></thead><tbody><tr><td>get</td><td>Request</td><td>-</td><td>name=tom</td><td>args</td></tr><tr><td>post</td><td>FormRequest</td><td>有默认值</td><td>formdata={“name”: “Tom”}</td><td>form</td></tr><tr><td>post</td><td>Request</td><td>-</td><td>body=json.dumps({“name”: “Tom”})</td><td>data，json</td></tr><tr><td>post</td><td>Request</td><td>“Content-Type”: “application/x-www-form-urlencoded”</td><td>body=json.dumps({“name”: “Tom”})</td><td>form</td></tr><tr><td>post</td><td>Request</td><td>“Content-Type”: “application/json”,</td><td>body=json.dumps({“name”: “Tom”})</td><td>data， json</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>红薯中文网小说</title>
      <link href="/2019/07/30/Font%20%E7%BA%A2%E8%96%AF%E4%B8%AD%E6%96%87%E7%BD%91%E5%B0%8F%E8%AF%B4%E7%88%AC%E5%8F%96/"/>
      <url>/2019/07/30/Font%20%E7%BA%A2%E8%96%AF%E4%B8%AD%E6%96%87%E7%BD%91%E5%B0%8F%E8%AF%B4%E7%88%AC%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h3 id="WebStorm破解小记"><a href="#WebStorm破解小记" class="headerlink" title="WebStorm破解小记:"></a>WebStorm破解小记:</h3><p>1、补丁与版本号</p><ul><li>版本：WebStorm/Idea 2018.3.1：</li><li>破解补丁：JetbrainsIdesCrack-3.4-release-enc.jar<br>2、将“0.0.0.0 account.jetbrains.com”添加到hosts文件中,再将补丁复制到安装目录的bin目录下。<br>3、修改同目录下的 WebStorm.exe.vmoptions 和WebStorm64.exe.vmoptions，这两个文件一个是32位的，一个是64位的，建议同步修改。<br>4、用文本编辑器打开之后，在文件最上面加一行代码 ：-javaagent:你的webstorm bin目录\JetbrainsCrack-3.1-release-enc.jar<br>5、配置好之后，保存文件。在此再次启动WebStorm，选择activation code，并将-javaagent:你的WebStorm路径前缀/WebStorm/bin/破解补丁名字.jar。<br>6、破解补丁加我微信好友获取。</li></ul><h3 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h3><p>目标网址：<a href="https://g.hongshu.com/nan.html">https://g.hongshu.com/nan.html</a></p><ol><li>首先发现伪元素且style中的样式应该是异步加载的。</li></ol><p><img src="/images/14-hsnovel/hsone.png"></p><ol start="2"><li>在XHR和CSS中没找到有用的请求和文件，考虑是否为源代码source中的JS代码生成style，全局搜索<code>.context_kw</code>找到如下位置：</li></ol><p><img src="/images/14-hsnovel/hstwo.png"></p><ol start="3"><li>验证猜想,在console中键入words得到所需的字符</li></ol><p><img src="/images/14-hsnovel/hsthree.png"></p><ol start="4"><li>为调试方便把包含上图代码的JS复制到Webstorm调试输出。</li></ol><p><img src="/images/14-hsnovel/hsfour.png"></p><ol start="5"><li>发现控制台输出与实际words不符，那么查找words是怎么生成的？<br>再次搜索words，找到如下的代码片段：</li></ol><p><img src="/images/14-hsnovel/hsfive.png"></p><ol start="6"><li><p>secwords和decrypted又存在关联，decrypted则跟iv有关系，打印iv验证猜想：<br><img src="/images/14-hsnovel/hssix.png"></p></li><li><p>最后找到生成iv的相关代码，由于node环境模拟的window不存在location，导致执行了异常处理部分的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 top.window.location.href=”url”  在顶层页面打开url</span></span><br><span class="line"><span class="comment">//2 window.location.href  在本页面打开url地址</span></span><br><span class="line"><span class="comment">//例如 a.html里面嵌着b.html; 1是在a处跳转2则是b部分跳转</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (top[_0xea12(<span class="string">&#x27;0x10&#x27;</span>)][_0xea12(<span class="string">&#x27;0x11&#x27;</span>)][_0xea12(<span class="string">&#x27;0x12&#x27;</span>)] != <span class="built_in">window</span>[_0xea12(<span class="string">&#x27;0x11&#x27;</span>)][<span class="string">&#x27;href&#x27;</span>]) &#123;</span><br><span class="line">        top[<span class="string">&#x27;window&#x27;</span>][_0xea12(<span class="string">&#x27;0x11&#x27;</span>)][<span class="string">&#x27;href&#x27;</span>] = <span class="built_in">window</span>[_0xea12(<span class="string">&#x27;0x11&#x27;</span>)][_0xea12(<span class="string">&#x27;0x12&#x27;</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    iv = CryptoJS[<span class="string">&#x27;enc&#x27;</span>][_0xea12(<span class="string">&#x27;0xe&#x27;</span>)][<span class="string">&#x27;parse&#x27;</span>](<span class="string">&#x27;6B0600CA9BCE5B24&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (_0x3f6f9e) &#123;</span><br><span class="line">    iv = CryptoJS[_0xea12(<span class="string">&#x27;0xd&#x27;</span>)][_0xea12(<span class="string">&#x27;0xe&#x27;</span>)][<span class="string">&#x27;parse&#x27;</span>](_0xea12(<span class="string">&#x27;0x13&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>应对策略</strong>:将上述代码直接替换为：<code>iv = CryptoJS[&#39;enc&#39;][_0xea12(&#39;0xe&#39;)][&#39;parse&#39;](&#39;6B0600CA9BCE5B24&#39;);</code><br><strong>重要混淆</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> decrypted = CryptoJS[<span class="string">&#x27;AES&#x27;</span>][_0xea12(<span class="string">&#x27;0x14&#x27;</span>)](data, keywords, &#123;</span><br><span class="line">    <span class="string">&#x27;iv&#x27;</span>: iv,</span><br><span class="line">    <span class="string">&#x27;padding&#x27;</span>: CryptoJS[_0xea12(<span class="string">&#x27;0x0&#x27;</span>)][_0xea12(<span class="string">&#x27;0x15&#x27;</span>)]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">toString: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (a || v).stringify(<span class="built_in">this</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">b = w.Latin1 = &#123;</span><br><span class="line">            stringify: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> c = a.words;</span><br><span class="line">                a = a.sigBytes;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> e = [], j = <span class="number">0</span>; j &lt; a; j++) &#123;</span><br><span class="line">                    e.push(<span class="built_in">String</span>.fromCharCode(c[j &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; <span class="number">24</span> - <span class="number">8</span> * (j % <span class="number">4</span>) &amp; <span class="number">255</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> e.join(<span class="string">&quot;&quot;</span>)</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>字体解析部分已经实现了，那么来梳理下爬取流程。<br>以爬取“汉天子”为例：详情页URL由书籍id和章节id构成如<a href="https://g.hongshu.com/content/93416/13877912.html">https://g.hongshu.com/content/93416/13877912.html</a></p><p><img src="/images/14-hsnovel/hsseven.png"></p><p><img src="/images/14-hsnovel/hseight.png" alt="代码流程图"></p><p><img src="/images/14-hsnovel/hsnine.png" alt="成果展示"></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>网络爬虫在未登录状态下肯定只能采集免费章节，运行后在付费章节(比如汉天子60章节及以后)跳转登录界面导致采集异常。</p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字体反爬 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO快速搭建优化</title>
      <link href="/2019/07/01/HEXO%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%BC%98%E5%8C%96/"/>
      <url>/2019/07/01/HEXO%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于之前的文章太杂太乱，重新梳理了下，把博客主题也换了下，特有此篇文章。</p><h3 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N<span class="function"><span class="title">ew</span> repository--&gt;</span>仓库名:用户名.http:<span class="comment">//github.io</span></span><br></pre></td></tr></table></figure><h3 id="安装Git和Node环境"><a href="#安装Git和Node环境" class="headerlink" title="安装Git和Node环境"></a>安装Git和Node环境</h3><p>官网下载安装包，不断下一步即可完成安装，控制台输入node命令不报错即成功。</p><h3 id="配置Github-ssh"><a href="#配置Github-ssh" class="headerlink" title="配置Github ssh"></a>配置Github ssh</h3><ol><li>Git Bash<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">&quot;你的GitHub用户名&quot;</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure></li><li>生成密钥文件<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure></li><li>复制生成的.ssh的文件夹中的<code>id_rsa.pub</code>密钥到 <code>GitHub_Settings_keys</code></li><li>ssh <a href="mailto:&#103;&#x69;&#116;&#64;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#x6d;">&#103;&#x69;&#116;&#64;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#x6d;</a>测试成功与否</li></ol><h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><p>1、安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g hexo</span><br></pre></td></tr></table></figure><p>2、初始化</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo init</span> </span><br></pre></td></tr></table></figure><p>3、目录解析</p><ul><li>node_modules：是依赖包</li><li>public：存放的是生成的页面</li><li>scaffolds：命令生成文章等的模板</li><li>source：用命令创建的各种文章</li><li>themes：主题</li><li>_config.yml：站点配置/主题配置</li><li>db.json：source解析所得到的</li><li>package.json：项目所需模块项目的配置信息</li></ul><p>4、修改主题</p><ul><li>只需要在博客主目录下执行：<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure></li><li>然后设置站点配置文件_config.yml：<figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: <span class="keyword">next</span></span><br></pre></td></tr></table></figure></li></ul><p>5、上传到github</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/LeoLin9527/LeoLin9527.github.io.git</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure><p>6、绑定域名<br>在 hexo 项目下，source 文件夹下面创建 CNAME 文件（没有后缀名），在里面写上域名。<br>然后在 GitHub Pages的 Custom domain设置里填上域名。</p><h3 id="配置优化："><a href="#配置优化：" class="headerlink" title="配置优化："></a>配置优化：</h3><p><a href="https://theme-next.iissnan.com/getting-started.html">官方配置教程</a><br>1、Hexo提交百度收录<br>暂略。</p><p>2、显示当前浏览进度</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Back to top in sidebar</span></span><br><span class="line"><span class="attr">b2t:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">​</span></span><br><span class="line"><span class="comment"># Scroll percent label in b2t button</span></span><br><span class="line"><span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>3、动态背景<br>git clone <a href="https://github.com/theme-next/theme-next-canvas-nest">https://github.com/theme-next/theme-next-canvas-nest</a> themes/next/source/lib/canvas-nest</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="comment"># 网络背景</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&#x27;0,0,0&#x27;</span> <span class="comment"># RGB values, use &#x27;,&#x27; to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># the opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">150</span> <span class="comment"># the number of lines</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JavaScript 3D library.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>4、修改文章标签样式<br>进入文件/themes/next/layout/_macro/post.swig，搜索 rel=”tag”&gt;#，将 # 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><p>5、设置博客底部布局</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup.</span></span><br><span class="line">  <span class="comment"># If not defined, current year will be used.</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2019</span> <span class="comment">#建站时间</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>6、添加文章搜索</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">search</span></span><br></pre></td></tr></table></figure><p>并在站点配置文件中加入如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>7、添加页面宠物</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -<span class="keyword">save</span> hexo-helper-live2d</span><br><span class="line">npm <span class="keyword">install</span> live2d-widget-<span class="keyword">model</span>-hijiki</span><br></pre></td></tr></table></figure><p>并在站点配置文件中加入如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-hijiki</span>  <span class="comment">#选择哪种模型</span></span><br><span class="line">  <span class="attr">display:</span> <span class="comment">#放置位置和大小</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">false</span> <span class="comment">#是否在手机端显示</span></span><br></pre></td></tr></table></figure><p>8、增加阅读次数/时长和访客数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show PV/UV of the website/page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="comment"># count values only if the other configs are false</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># custom uv span for the whole site</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_uv_header:</span> <span class="string">访客数</span></span><br><span class="line">  <span class="attr">site_uv_footer:</span> <span class="string">人</span></span><br><span class="line">  <span class="comment"># custom pv span for the whole site</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_pv_header:</span> <span class="string">总访问量</span></span><br><span class="line">  <span class="attr">site_pv_footer:</span> <span class="string">次</span></span><br><span class="line">  <span class="comment"># custom pv span for one page only</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class=&quot;fa</span> <span class="string">fa-file-o&quot;&gt;&lt;/i&gt;</span>  <span class="string">阅读数</span></span><br><span class="line">  <span class="attr">page_pv_footer:</span></span><br></pre></td></tr></table></figure><p>9、图片可点击放大查看，放大后可关闭</p><ul><li>打开站点配置文件_config.yml，搜索fancybox字段，设置其值为true</li><li>进入到theme/text/文件夹下，打开git bash</li><li>git clone <a href="https://github.com/theme-next/theme-next-fancybox3">https://github.com/theme-next/theme-next-fancybox3</a> source/lib/fancybox</li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Chrome DevTool</title>
      <link href="/2019/07/01/Chrome%20DevTool/"/>
      <url>/2019/07/01/Chrome%20DevTool/</url>
      
        <content type="html"><![CDATA[<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>网站页面点击审查元素或者按下F12，将会打开devtools。</p><ul><li><p>可以看到下列选项卡：<br>Elements：元素<br>Console：控制台<br>Sources：资源管理<br>Network：网络<br>Performance：性能分析<br>Memory：内存监控<br>Application：应用管理<br>Secriuty：安全<br>Audits：审计</p></li><li><p>常用的几个功能：<br>Elements的主要作用：网页结构分析、生成各种Dom匹配表达式、Dom属性查看、修改Dom属性以观察一些事件的触发、Dom断点设置、事件挂载检测<br>Console的主要作用：执行js代码以方便查看变量值、hook函数、触发函数、修改当前变量、控制dom、控制js运行<br>Sources的主要作用：查看web使用的资源文件，VM内容显示、断点、监听器、webworkers查看、调用栈跟踪、单步/断点调试、变量监控、作用域监控、<br>Network的主要作用：监控数据请求、查看网络请求的详细内容（general、request/response header、param、body以及response body）、解析返回数据并格式化text/json提供preview、查看请求来源js调用链<br>Memory的主要作用：通过分析内存得知js的调用顺序</p></li></ul><p>Content scripts：Content scripts 指的是 Chrome 拓展注入在网页中的脚本。<br>Snippets：Snippets 的含义是片段，在这里指的是一小段程序，这个一小段程序跟在其他地方不一样的是，可以访问这个页面中的变量和函数等。<br>比如我安装了一个叫 新媒体管家 的 Chrome 拓展，打开我的 Content scripts 面板会看到：<br><img src="/images/15-devtool/debug1.png"></p><h2 id="断点与监听器"><a href="#断点与监听器" class="headerlink" title="断点与监听器"></a>断点与监听器</h2><ul><li>devtools中断点主要分为DOM断点、行断点、行内断点、xhr断点、事件监听断点，</li><li>监听器也是断点的一种，主要为全局监听器，不过无需在具体的地方提前设下断点。</li></ul><p><strong>1、DOM断点</strong>主要在Elements里，右击需要下断点的元素，然后选择break on会给出三种状态<br><img src="/images/15-devtool/debug2.png"></p><ul><li>subtree modifications是在添加，改变，删除子元素时触发，</li><li>attribute modifica是当元素属性改变时触发，</li><li>node removal是当元素被移除的时候触发。</li></ul><p><strong>2、条件断点</strong>设置后显示为橙色：<br>右键一个未添加断点的行号，选择”Add conditional breakpoint”，输入条件满足时，断点才会生效，用于处理debugger场景。</p><p><strong>3、行内断点</strong>用于处理逗号表达式或者是一行内执行了多个函数以及if单行写法。<br>先在该行添加断点，当程序中断在该行，此时如果想仅断住funb函数，仅需点击一下funb左侧的小箭头。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = flag ? funa() : funb()</span><br></pre></td></tr></table></figure><p><strong>4、事件监听断点</strong>（Event Listener Breakpoints）<br>事件监听器断点，列出了所有页面及脚本事件，包括：鼠标、键盘、动画、定时器、XHR等等。<br>每个事件名称和事件类型前都有个复选框,选中即指当页面中触发了所选的事件会产生中断。<br>针对网页一打开就执行代码且变量及代码位置不同的场景，等加载完页面再打断点刷新的操作则不奏效。<br>不妨试试提前打上Script断点，这样浏览器会在刚执行js的时候进入断点，你要做的就是找到你想下断点的函数了，然后取消Script断点，继续Resume下一步就可以进入你要阻断的函数啦！</p><p><strong>5、全局监听器</strong>（Global Listeners）<br>显示全局监听器，在浏览器中 window 是全局对象，所以在 Global Listeners 面板中显示绑定在 window 对象上的事件监听。</p><h2 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h2><p>1、快速定位文件中成员函数：ctrl + shif + o<br>2、拷贝返回的 JSON 数据：请求项的右键菜单中选择 Copy Response 拷贝响应内容<br>3、Async 模式调试异步函数<br>Promise 的回调是异步执行的，默认情况下调用栈只记录到回调函数本身，我们无法找到代码执行的顺序。开启 Async 模式后，异步函数之前的调用栈都会被记录下来，而且调用栈中代码执行状态也得到了保留。</p><h2 id="Network选项卡深入解读"><a href="#Network选项卡深入解读" class="headerlink" title="Network选项卡深入解读"></a>Network选项卡深入解读</h2><p>data URLs指一些嵌入到文档中的小型文件，在请求表里面以data:开头的文件。<br>输入框是用来搜索关键字的，他会在链接、requests以及response中进行搜索，显示匹配的网络请求。<br>第一个Group bu frame，勾选后如果页面中有多个frame，会自动合并来自同一个frame的网络请求。<br>第二个Preserver log，勾选后再刷新页面，会保留之前的网络请求，如果不勾选，下次重新载入页面的时候会自动清空之前的记录。<br>第三个Disable cache，勾选后，当devtools开启的时候，所有资源将不会保留缓存，嗯，对于前端开发人员确实很实用，静态资源修改的时候就不用手动清空缓存了。<br>第四个Offline，勾选后，会强迫当前页面断网，其实这个对于我们也是很实用的，有的时候我们并不想让请求发出去，而是想看看点击按钮后发送的请求附带了什么cookies或header时，可以开启这个选项。<br>最后一个Online，是一个下拉选项，模拟不同的网络请求环境。</p><h2 id="Js调试技巧"><a href="#Js调试技巧" class="headerlink" title="Js调试技巧"></a>Js调试技巧</h2><p>1、查找加密函数方法</p><ul><li>XHR断点</li><li>事件监听</li><li>栈堆查找</li><li>搜索关键字</li></ul><p>2、常见混淆方法</p><ul><li>Base62混淆<br>常以eval(function(p,a,c,k,e,r)) 开头</li><li>公钥加密关键字段<br>客户端向服务器请求获取RSA公钥以及key,存储在本地。<br>客户端将密文与key一起传回后台，后台通过key找到缓存里的私钥，对密文进行解密。</li><li>变量名混淆<br><a href="http://jsnice.org/">http://jsnice.org/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
